<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../../Properties.xslt"?>
<Content xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<Object id="gxui.GridExtension">
		<Group>
			<Name>General</Name>
			<Type>Main</Type>
			<Children>
				<Prop>
					<Id>Title</Id>
					<Name>Title</Name>
					<Type>Text</Type>
					<Default></Default>
					<Metadata />
					<Description>Optional title for the grid.</Description>
				</Prop>
				<Prop>
					<Id>AddToParentGxUIControl</Id>
					<Name>AddToParentGxUIControl</Name>
					<Type>Boolean</Type>
					<Default>true</Default>
					<Metadata>
						<Value name="FlagScope">DesignTime</Value>
					</Metadata>
					<Description>True to add the control to its parent GxUI control (if there's one). Defaults to true.</Description>
				</Prop>
				<Group>
					<Name>Appearance</Name>
					<Children>
						<Prop>
							<Id>UseThemeClasses</Id>
							<Name>UseThemeClasses</Name>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Description>True to use the Theme classes asigned to the grid and columns, false to ignore them.</Description>
						</Prop>
						<Prop>
							<Id>EditableCellClass</Id>
							<Name>EditableCellClass</Name>
							<Type>Text</Type>
							<Default></Default>
							<Description>Theme class for editable cells.</Description>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Behavior</Name>
					<Children>
						<Prop>
							<Id>EnableColumnLocking</Id>
							<Name>EnableColumnLocking</Name>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Description>True to allow column locking ala Ms Excel's "Freeze Panes" option.</Description>
						</Prop>
						<Prop>
							<Id>EnableTextSelection</Id>
							<Name>EnableTextSelection</Name>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Description>True to enable text selections.</Description>
						</Prop>
						<Prop>
							<Id>SelectionModel</Id>
							<Name>SelectionModel</Name>
							<Type>Combo</Type>
							<Default>RowSelectionModel</Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Values>
								<Value id="RowSelectionModel" desc="Row" />
								<Value id="CheckBoxSelectionModel" desc="Checkbox" />
							</Values>
							<Description>The selection model to use with the grid: Row (rows are selected by clicking on the row) or Checkbox (a check box appears in the first column of the grid). If the grid has at least one editable column, the selection model is ignored as a cell by cell model is used.</Description>
						</Prop>
						<Group>
							<Name>Editing</Name>
							<Children>
								<Prop>
									<Id>EditModel</Id>
									<Name>EditModel</Name>
									<Type>Combo</Type>
									<Default>CellEditModel</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Values>
										<Value id="CellEditModel" desc="Cell" />
										<Value id="RowEditModel" desc="Row" />
									</Values>
									<Description>The edit model to use with the grid. If Row is selected, when editing begins, a small floating dialog will be shown for the appropriate row. Each editable column will show a field for editing. There is a button to save or cancel all changes for the edit. If Cell is selected, only a single cell will be editable at a time.</Description>
								</Prop>
								<Prop>
									<Id>ClicksToEdit</Id>
									<Name>ClicksToEdit</Name>
									<Type>Combo</Type>
									<Default>1</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Values>
										<Value id="1" desc="1" />
										<Value id="2" desc="2" />
									</Values>
									<Description>The number of clicks on a grid required to display the editor. The only accepted values are 1 and 2.</Description>
								</Prop>
							</Children>
						</Group>
						<Group>
							<Name>DragDrop</Name>
							<Children>
								<Prop>
									<Id>DragDropGroup</Id>
									<Name>DragDropGroup</Name>
									<Type>Text</Type>
									<Default></Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group. This is useful when using drag and drop between a {@link gxui.Treeview tree} and a grid.</Description>
								</Prop>
								<Prop>
									<Id>DragDropText</Id>
									<Name>DragDropText</Name>
									<Type>Text</Type>
									<Default></Default>
									<Metadata />
									<Description>Configures the text in the drag proxy that is shown during the drag/drop operation.</Description>
								</Prop>
								<Prop>
									<Id>PrimaryButtonOnly</Id>
									<Name>PrimaryButtonOnly</Name>
									<Type>Boolean</Type>
									<Default>true</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>Set to false to allow drag and drop to start with any mouse click that is propogated by the browser.</Description>
								</Prop>
							</Children>
						</Group>
						<Group>
							<Name>Grouping</Name>
							<Children>
								<Prop>
									<Id>Grouping</Id>
									<Name>Grouping</Name>
									<Type>Boolean</Type>
									<Default>false</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>True to allow to display the grid rows aggregated into groups. The group will show the title for the group name and then the appropriate records for the group underneath. The groups can also be expanded and collapsed.</Description>
								</Prop>
								<Prop>
									<Id>ShowGroupingSummary</Id>
									<Name>ShowGroupingSummary</Name>
									<Type>Boolean</Type>
									<Default>false</Default>
									<Metadata />
									<Description>True to add an aggregate summary row at the bottom of each group.
* The summary value needs to be calculated for each column in the grid. This is controlled by the {@link gxui.GridExtensionColumn#SummaryType} option specified on the column.
									</Description>
								</Prop>
								<Prop>
									<Id>GroupField</Id>
									<Name>GroupField</Name>
									<Type>Text</Type>
									<Default></Default>
									<Metadata/>
									<Description>The name of the attribute or variable to group on (case sensitive). When a SDT is bound to the grid, use the name of the SDT member. Data should be sorted by this field when paging is enabled.</Description>
								</Prop>
								<Prop>
									<Id>HideGroupedField</Id>
									<Name>HideGroupedField</Name>
									<Type>Boolean</Type>
									<Default>false</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>True to hide the grouping field.</Description>
								</Prop>
								<Prop>
									<Id>GroupTemplate</Id>
									<Name>GroupTemplate</Name>
									<Type>Text</Type>
									<Default>{name}</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>The template used to render the group header.</Description>
								</Prop>
							</Children>
						</Group>
						<Group>
							<Name>Columns</Name>
							<Children>
								<Prop>
									<Id>ForceFit</Id>
									<Name>ForceFit</Name>
									<Type>Boolean</Type>
									<Default>false</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>True to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling.</Description>
								</Prop>
								<Prop>
									<Id>MinColumnWidth</Id>
									<Name>MinColumnWidth</Name>
									<Type>Integer</Type>
									<Default>25</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>The minimum width a column can be resized to.</Description>
								</Prop>
								<Prop>
									<Id>EnableColumnHide</Id>
									<Name>EnableColumnHide</Name>
									<Type>Boolean</Type>
									<Default>true</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>True to enable hiding of columns with the header context menu.</Description>
								</Prop>
								<Prop>
									<Id>EnableColumnMove</Id>
									<Name>EnableColumnMove</Name>
									<Type>Boolean</Type>
									<Default>true</Default>
									<Metadata>
										<Value name="FlagScope">DesignTime</Value>
									</Metadata>
									<Description>True to enable drag and drop reorder of columns.</Description>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Group>
					<Name>Sorting</Name>
					<Children>
						<Prop>
							<Id>RemoteSort</Id>
							<Name>RemoteSort</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Metadata />
							<Description>
								Indicates if sort operations will be performed locally (on the current page) or remotely over the whole data set.
								* To accomplish this, orders must be programmed on the webpanel accordingly. For example, in a grid with CustomerName and CustomerAddress fields,
								* the order clauses should be:
								*
								*		CustomerName when (Grid1.SortField = 'CustomerName' and Grid1.SortOrder = 'ASC')  or Grid1.SortField = ''
								*		(CustomerName) when Grid1.SortField = 'CustomerName' and Grid1.SortOrder = 'DESC'
								*		CustomerAddress when Grid1.SortField = 'CustomerAddress' and Grid1.SortOrder = 'ASC'
								*		(CustomerAddress) when Grid1.SortField = 'CustomerAddress' and Grid1.SortOrder = 'DESC'
								*
								* Bear in mind that sorting must be enabled by setting the {@link gxui.GridExtensionColumn#Sortable Sortable} = True in the column.
							</Description>
						</Prop>
						<Prop>
							<Id>SortField</Id>
							<Name>SortField</Name>
							<Type>Text</Type>
							<Default />
							<Metadata />
							<Description>The field used to sort the grid.</Description>
						</Prop>
						<Prop>
							<Id>SortOrder</Id>
							<Name>SortOrder</Name>
							<Type>Combo</Type>
							<Default>ASC</Default>
							<Values>
								<Value id="ASC" desc="Ascendent" />
								<Value id="DESC" desc="Descendent" />
							</Values>
							<Metadata />
							<Description>The sort order of the grid (ASC|DESC). Defaults to ASC.</Description>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Paging</Name>
					<Children>
						<Group>
							<Name>PagingTexts</Name>
							<Children>
								<Prop>
									<Id>FirstText</Id>
									<Name>FirstText</Name>
									<Type>Text</Type>
									<Default>First Page</Default>
									<Metadata />
									<Description>Text of the "First page" button.</Description>
								</Prop>
								<Prop>
									<Id>LastText</Id>
									<Name>LastText</Name>
									<Type>Text</Type>
									<Default>Last Page</Default>
									<Metadata />
									<Description>Text of the "Last page" button.</Description>
								</Prop>
								<Prop>
									<Id>NextText</Id>
									<Name>NextText</Name>
									<Type>Text</Type>
									<Default>Next Page</Default>
									<Metadata />
									<Description>Text of the "Next page" button.</Description>
								</Prop>
								<Prop>
									<Id>PreviousText</Id>
									<Name>PreviousText</Name>
									<Type>Text</Type>
									<Default>Previous Page</Default>
									<Metadata />
									<Description>Text of the "Previous page" button.</Description>
								</Prop>
								<Prop>
									<Id>RefreshText</Id>
									<Name>RefreshText</Name>
									<Type>Text</Type>
									<Default>Refresh</Default>
									<Metadata />
									<Description>Text of the "Refresh" button.</Description>
								</Prop>
								<Prop>
									<Id>StatusText</Id>
									<Name>StatusText</Name>
									<Type>Text</Type>
									<Default></Default>
									<Metadata />
									<Description>Text shown at the right side of the paging bar. Useful to show status messages or a text indicating the current page and the page count.</Description>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Group>
					<Name>State Management</Name>
					<Children>
						<Prop>
							<Id>Stateful</Id>
							<Name>Stateful</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Description>A flag which causes the Component to attempt to restore the state of internal properties from a saved state on startup.</Description>
						</Prop>
						<Prop>
							<Id>StateId</Id>
							<Name>StateId</Name>
							<Type>Text</Type>
							<Default></Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Description>The unique id for this component to use for state management purposes.</Description>
						</Prop>
					</Children>
				</Group>
				<Prop>
					<Id>SelectedRow</Id>
					<Name>SelectedRow</Name>
					<Type>Integer</Type>
					<Default>0</Default>
					<Metadata>
						<Value name="FlagScope">Runtime</Value>
					</Metadata>
					<Description>The index of the selected row. Changing this property changes the selected row.</Description>
				</Prop>
			</Children>
		</Group>
	</Object>
</Content>