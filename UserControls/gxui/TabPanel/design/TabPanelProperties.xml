<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../../Properties.xslt"?>
<Content xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<Object id="gxui.TabPanel">
		<Group>
			<Name>General</Name>
			<Type>Main</Type>
			<Children>
				<Prop>
					<Id>Width</Id>
					<Name>Width</Name>
					<Type>Integer</Type>
					<Default>100</Default>
					<Metadata />
					<Description>Control width.</Description>
				</Prop>
				<Prop>
					<Id>Height</Id>
					<Name>Height</Name>
					<Type>Integer</Type>
					<Default>100</Default>
					<Metadata />
					<Description>Control height.</Description>
				</Prop>
				<Prop>
					<Id>Layout</Id>
					<Name>Layout</Name>
					<Type>Combo</Type>
					<Default>fit</Default>
					<Metadata />
					<Values>
						<Value id="fit" desc="Fit" />
						<Value id="default" desc="Default" />
					</Values>
					<Description>
						The layout type to be used in each tab.
						* Use Fit if inside the each tab a single GxUI child control will be shown.
						* This child control will expand to fit the layout's container if its AddToParentGxUIControl property is set to true.
						* Important: Fit layout will disable the container scrollbars, so it should only be used when showing a single, expanded, GxUI control inside. In any other case, Default layout should be used.
					</Description>

				</Prop>
				<Prop>
					<Id>AddToParentGxUIControl</Id>
					<Name>AddToParentGxUIControl</Name>
					<Type>Boolean</Type>
					<Default>true</Default>
					<Metadata />
					<Description>
						True to add the control to its parent GxUI control (if it's contained inside one). This property is useful when the control
						* is contained inside a {@link gxui.Panel Panel}, {@link gxui.TabPanel TabPanel} or {@link gxui.Layout Layout} control and you want its dimensions to be
						* controlled from the parent control.
						* Bear in mind that if there are other controls between the control and its parent (for example, a Table or Group), in runtime the parent control will move
						* the control out of the controls in the middle, to make it its direct descendant. The controls in the middle will be ignored.
					</Description>
				</Prop>
				<Group>
					<Name>Appareance</Name>
					<Children>
						<Prop>
							<Id>TabPosition</Id>
							<Name>TabPosition</Name>
							<Type>Combo</Type>
							<Default>top</Default>
							<Metadata />
							<Values>
								<Value id="top" desc="top" />
								<Value id="bottom" desc="bottom" />
							</Values>
							<Description>The position where the tab strip should be rendered. Can be top or bottom.</Description>
						</Prop>
						<Prop>
							<Id>AutoWidth</Id>
							<Name>AutoWidth</Name>
							<Type>Combo</Type>
							<Default>false</Default>
							<Metadata />
							<Values>
								<Value id="true" desc="True" />
								<Value id="false" desc="False" />
							</Values>
							<Description>True to automatically calculate width from the tab content, false to use fixed width.</Description>
						</Prop>
						<Prop>
							<Id>AutoHeight</Id>
							<Name>AutoHeight</Name>
							<Type>Combo</Type>
							<Default>false</Default>
							<Metadata />
							<Values>
								<Value id="true" desc="True" />
								<Value id="false" desc="False" />
							</Values>
							<Description>True to automatically calculate height from the tab content, false to use fixed height.</Description>
						</Prop>
						<Prop>
							<Id>Cls</Id>
							<Name>Cls</Name>
							<Type>Text</Type>
							<Default></Default>
							<Metadata />
							<Description>An optional extra CSS class that will be added to this control's element. This can be useful for adding customized styles to the component or any of its children using standard CSS rules.</Description>
						</Prop>
						<Prop>
							<Id>TabCls</Id>
							<Name>TabCls</Name>
							<Type>Text</Type>
							<Default></Default>
							<Metadata />
							<Description>An optional extra CSS class that will be added to each tab's element. This can be useful for adding customized styles to each tab or any of its children using standard CSS rules.</Description>
						</Prop>
						<Prop>
							<Id>Frame</Id>
							<Name>Frame</Name>
							<Type>Combo</Type>
							<Default>false</Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Values>
								<Value id="true" desc="True" />
								<Value id="false" desc="False" />
							</Values>
							<Description>True to render the tab panel with custom rounded borders, false to render with plain 1px square borders.</Description>
						</Prop>
						<Prop>
							<Id>Border</Id>
							<Name>Border</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Metadata>
								<Value name="FlagScope">DesignTime</Value>
							</Metadata>
							<Description>True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border.</Description>
						</Prop>
						<Prop>
							<Id>MinTabWidth</Id>
							<Name>MinTabWidth</Name>
							<Type>Integer</Type>
							<Default>60</Default>
							<Metadata />
							<Description>The minimum width in pixels for each tab.</Description>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Behavior</Name>
					<Children>
						<Prop>
							<Id>EnableTabScroll</Id>
							<Name>EnableTabScroll</Name>
							<Type>Combo</Type>
							<Default>true</Default>
							<Metadata />
							<Values>
								<Value id="true" desc="True" />
								<Value id="false" desc="False" />
							</Values>
							<Description>True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on top.</Description>
						</Prop>
					  <Prop>
						 <Id>HandleUniqueId</Id>
						 <Name>HandleUniqueId</Name>
						 <Type>Boolean</Type>
						 <Default>true</Default>
						<Description>True to automatically create a unique identifier for each tab. Set to false when handling tabs by id with any of the gxui.TabPanel methods.</Description>
						</Prop>
					</Children>
				</Group>
				<Prop>
					<Id>DesignTimeTabs</Id>
					<Name>DesignTimeTabs</Name>
					<Type>Text</Type>
					<Default />
					<Metadata />
					<Description>@ignore
						* @private
					</Description>
				</Prop>
				<Prop>
					<Id>ClosedTabId</Id>
					<Name>ClosedTabId</Name>
					<Type>Text</Type>
					<Default />
					<Metadata>
						<Value name="FlagScope">Runtime</Value>
					</Metadata>
					<Description>Identifier of the last closed tab. This property is used to know which tab was closed in {@link #BeforeTabClosed} and {@link #TabClosed} events</Description>
				</Prop>
				<Prop>
					<Id>ActiveTabId</Id>
					<Name>ActiveTabId</Name>
					<Type>Text</Type>
					<Default />
					<Metadata>
						<Value name="FlagScope">Runtime</Value>
					</Metadata>
					<Description>Identifier of the currently selected tab.</Description>
				</Prop>
				<Prop>
					<Id>CancelEvent</Id>
					<Name>CancelEvent</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Metadata>
						<Value name="FlagScope">Runtime</Value>
					</Metadata>
					<Description>When a tab is closed the {@link #BeforeTabClosed} event is fired, before closing the tab. If this property is set to true in the {@link #BeforeTabClosed} event, the closing event is cancelled and the tab remains opened.</Description>
				</Prop>
			</Children>
		</Group>
	</Object>
</Content>