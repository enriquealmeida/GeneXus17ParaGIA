<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Deploy" ToolsVersion="4.0">
	
	<PropertyGroup>
		<GXDeployFileProject>$([System.IO.Path]::GetFullPath('$(DeployFullPath)\..\..\..\..\web\$(ProjectName).gxdproj'))</GXDeployFileProject>
		<STATICRESOURCES_PROVIDER>azureblobstorage</STATICRESOURCES_PROVIDER>
	</PropertyGroup>
	<Import Project="$(GX_PROGRAM_DIR)\GeneXus.AzureDeploy.targets"/>
	<Import Project="$(GXDeployFileProject)"/>
	<Import Project="$(GX_PROGRAM_DIR)\DeploymentTargets\AzureServerless\DeployStaticResources\deploystaticfiles.targets"/>
		
	<PropertyGroup Condition="'$(GENERATOR)' == '.NET Core' or '$(GENERATOR)' == '.NET'">
		<UploadSource>$(DeployFullPath)</UploadSource>
		<DeploymentTargetBinPath>$(GX_PROGRAM_DIR)\DeploymentTargets\AzureServerless\AzFunctionFiles\bin</DeploymentTargetBinPath>
		<DeploymentTargetAzfunctionsPath>$(GX_PROGRAM_DIR)\DeploymentTargets\AzureServerless\AzFunctionFiles\bin\.azurefunctions</DeploymentTargetAzfunctionsPath>
		<DeploymentTargetRuntimesPath>$(GX_PROGRAM_DIR)\DeploymentTargets\AzureServerless\AzFunctionFiles\bin\runtimes</DeploymentTargetRuntimesPath>
	</PropertyGroup>

	<ItemGroup>
		<AzureFunctionsRootDeps Include = "$(DeploymentTargetBinPath)\**\*.*" />
		<AzureFunctionsFolderDeps Include = "$(DeploymentTargetAzfunctionsPath)\**\*.*" />
		<AzureFunctionsRuntimesDeps Include = "$(DeploymentTargetRuntimesPath)\**\*.*" />
	</ItemGroup>	

	<Target Name="GenerateConfigs" DependsOnTargets="OpenAPIGeneration;ValidateDeployment">

		<Message Text="Generating configuration file..." Importance="high"/>
		<GenerateAzFunctionConfigsHttp 

				YamlFile = "$(OpenAPIDefinitionOutputFile)"
				DeployFullPath="$(DeployFullPath)" />

		<PropertyGroup>
			<IntegratedSecurityEnabled Condition= "$(AZURE_SERVERLESS_GAM_CONNECTION_KEY) != ''">true</IntegratedSecurityEnabled>
			<IntegratedSecurityEnabled Condition= "$(AZURE_SERVERLESS_GAM_CONNECTION_KEY) == ''">false</IntegratedSecurityEnabled>
		</PropertyGroup>
		
		<UpdateAzureFlagFile 
				AzureDeploy = "AzureServerless"
				BaseServiceRoute = "rest"
				IntegratedSecurityEnabled = "$(IntegratedSecurityEnabled)"
				DeployFullPath = "$(DeployFullPath)" />
			
	</Target>
	
	<Target Name="PrepareDeploy" DependsOnTargets="GenerateConfigs;RedisSupport" >
	<Message Text="Adding required files to the deploy...(this may take a while)" Importance="high"/>

		<ItemGroup>
			<ConfigResources Include="$(DeployFullPath)\*.svc" />
			<ConfigResources Include="$(DeployFullPath)\Images.txt" Condition="Exists('$(DeployFullPath)\Images.txt')"/>
			<ConfigResources Include="$(DeployFullPath)\log.config" Condition="Exists('$(DeployFullPath)\log.config')"/>
			<ConfigResources Include="$(DeployFullPath)\log.console.config" Condition="Exists('$(DeployFullPath)\log.console.config')"/>	
			<ConfigResources Include="$(DeployFullPath)\GeneXus.services" Condition ="Exists('$(DeployFullPath)\GeneXus.services')" />
			<ConfigResources Include="$(DeployFullPath)\functions.metadata"  />
			<ConfigResources Include="$(DeployFullPath)\azureflag.json"  Condition ="Exists('$(DeployFullPath)\azureflag.json')" />
			<ConfigResources Include="$(DeployFullPath)\appsettings.json" />
			<ConfigResources Include="$(DeployFullPath)\CloudServices.config" Condition ="Exists('$(DeployFullPath)\CloudServices.config')" />
		</ItemGroup>

		<ItemGroup>
			<Modules Include="@(Object -> '%(Module)')" />
			<ModuleDirs Include="%(Modules.Identity)" />
			<ModuleRelativePath Include="@(ModuleDirs->Replace('.', '\'))" />
			<ModuleRelativePathLower Include="@(ModuleRelativePath->ToLower())" />
			<ModuleFiles Include="$(DeployFullPath)\%(ModuleRelativePathLower.Identity)\**\*.*" Condition="%(ModuleRelativePathLower.Identity) != ''" >
				<RelativePath>%(ModuleRelativePathLower.Identity)</RelativePath>
			</ModuleFiles>
		</ItemGroup>

		<Copy SourceFiles="@(ModuleFiles)" DestinationFiles="@(ModuleFiles -> '$(DeployFullPath)\bin\%(RelativePath)\%(RecursiveDir)%(Filename)%(Extension)')" />

		<ItemGroup>
			<CacheMetadata Include="$(DeployFullPath)\Metadata\TableAccess\*.*" Condition="Exists('$(DeployFullPath)\Metadata\TableAccess')"/>
		</ItemGroup>

		<ItemGroup>
			<PrivateDirectory Include="$(DeployFullPath)\private\*.*" Condition="Exists('$(DeployFullPath)\private')"/>
		</ItemGroup>
		
		<Copy SourceFiles="@(CacheMetadata)"  
		DestinationFiles="@(CacheMetadata -> '$(DeployFullPath)\bin\Metadata\TableAccess\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(PrivateDirectory)"  
		DestinationFiles="@(PrivateDirectory -> '$(DeployFullPath)\bin\private\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />
		
		<Copy SourceFiles="@(AzureFunctionsRootDeps)"  
		DestinationFolder="$(DeployFullPath)\bin\%(RecursiveDir)" SkipUnchangedFiles="true"/>

		<Copy SourceFiles="@(ConfigResources)"  
		DestinationFiles="@(ConfigResources -> '$(DeployFullPath)\bin\%(Filename)%(Extension)')" SkipUnchangedFiles="true" />
		
	</Target>

	<Target Name="RedisSupport" Condition="'$(AZURE_SERVERLESS_SESSION_STATE_PROVIDER)' == 'Redis' AND '$(AZURE_SERVERLESS_SESSION_PROVIDER_ADDRESS)' != ''">

		<Message Text="Enabling Redis support" Importance="high"/>

		<ItemGroup>
				<RedisSessionTemplate Include="$(GX_PROGRAM_DIR)\DeploymentTargets\AzureServerless\redis\$(GENERATOR)\*.*"/>
		</ItemGroup>

		<Copy SourceFiles="@(RedisSessionTemplate)" DestinationFolder="$(DeployFullPath)" Condition="'$(AZURE_SERVERLESS_SESSION_STATE_PROVIDER)' == 'Redis'"/>	

		<ItemGroup>
				<CSRedis Include="$(DeployFullPath)\CloudServices.redis.config"/>
		</ItemGroup>

		<CallTarget Targets="UpdateRedisCS" />

		<XmlPeek XmlInputPath="@(CSRedis)" Query="Services/Service" Condition="Exists('@(CSRedis)')">
			<Output TaskParameter="Result" ItemName="RedisService" />
		</XmlPeek>	

		<ItemGroup>
			<DestinationCS Include="$(DeployFullPath)\CloudServices.config"/>
			<OriginalCS Include="$(DeployFullPath)\CloudServices.config"/>
		</ItemGroup>
		
		<PropertyGroup>
			<CloudServiceExists Condition="Exists('@(OriginalCS)')">true</CloudServiceExists>
			<CloudServiceExists Condition="!Exists('@(OriginalCS)')">false</CloudServiceExists>
		</PropertyGroup>

		<XmlPeek XmlInputPath="@(OriginalCS)" Query="Services/Service" Condition="'$(CloudServiceExists)' == 'true'">
			<Output TaskParameter="Result" ItemName="OriginalServices" />
		</XmlPeek>

	</Target>

	<Target Name="UpdateRedisCS" Condition="'$(AZURE_SERVERLESS_SESSION_STATE_PROVIDER)' == 'Redis' AND '$(AZURE_SERVERLESS_SESSION_PROVIDER_ADDRESS)' != ''">

		 <XmlPoke
			XmlInputPath="$(DeployFullPath)\CloudServices.redis.config"
			Value="$(AZURE_SERVERLESS_SESSION_PROVIDER_ADDRESS)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_ADDRESS']/Value" />

		<XmlPoke Condition = "$(AZURE_SERVERLESS_SESSION_PROVIDER_PASSWORD) != ''"
			XmlInputPath="$(DeployFullPath)\CloudServices.redis.config"
			Value="$(AZURE_SERVERLESS_SESSION_PROVIDER_PASSWORD)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_PASSWORD']/Value" />

		<XmlPoke Condition = "$(AZURE_SERVERLESS_SESSION_PROVIDER_INSTANCE_NAME) != ''"
			XmlInputPath="$(DeployFullPath)\CloudServices.redis.config"
			Value="$(AZURE_SERVERLESS_SESSION_PROVIDER_INSTANCE_NAME)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_INSTANCE_NAME']/Value" />

		<XmlPoke Condition = "$(AZURE_SERVERLESS_SESSION_TIMEOUT) != ''"
			XmlInputPath="$(DeployFullPath)\CloudServices.redis.config"
			Value="$(AZURE_SERVERLESS_SESSION_TIMEOUT)"
			Query="Services/Service/Properties/Property[Name='SESSION_PROVIDER_SESSION_TIMEOUT']/Value" />
	</Target>

	<Target Name="AppendRedisCS" AfterTargets="RedisSupport" Condition="'@(RedisService->Count())' > 0">

		<Message Text="Setting up new CloudServices.config" Importance="high"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" Overwrite="true" Encoding="UTF-8"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;Services xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(OriginalServices)" Overwrite="false"/>
		
		<WriteLinesToFile File="@(DestinationCS)" Lines="@(RedisService)" Overwrite="false"/>

		<WriteLinesToFile File="@(DestinationCS)" Lines="&lt;/Services&gt;" Overwrite="false"/>

	</Target>


	<Target Name="ZipDeploy">
		<CreateItem Include="$(DeployFullPath)\bin\**\*.*" >
			<Output ItemName="ZipFiles" TaskParameter="Include"/>
		</CreateItem>
		<Zip ZipFileName="$(DeployFileFullPath)\$(ProjectName)_$(AZURE_SERVERLESS_FUNCTION_NAME).zip" WorkingDirectory="$(DeployFullPath)\bin" Files="@(ZipFiles)" />
		<Message Text="Application successfully Packaged to be uploaded to Azure : $(DeployFileFullPath)\$(ProjectName)_$(AZURE_SERVERLESS_FUNCTION_NAME).zip" Importance="high"/>

	</Target>
	
	<Target Name="AzLogin">
        <Exec Command="az login --service-principal --username $(AZURE_SERVERLESS_SP_APP_ID) --tenant $(AZURE_SERVERLESS_SP_TENANT_ID) --password $(AZURE_SERVERLESS_SP_CREDENTIALS)" EchoOff="true" StandardOutputImportance="Low" />
		<Message Text="Authentication to Azure finished." Importance="high"/>
    </Target>
	<Target Name="AzPublish">
		<ItemGroup>
	   		<pathToFile Include="$([MSBuild]::Escape('$(DeployFileFullPath)\$(ProjectName)_$(AZURE_SERVERLESS_FUNCTION_NAME).zip'))" />
	   </ItemGroup>
	    <Message Text="Deploying to Azure functions ...." Importance="high"/>	
        <Exec Command="az functionapp deployment source config-zip -g $(AZURE_SERVERLESS_RESOURCE_GROUP) -n $(AZURE_SERVERLESS_FUNCTION_APP) --src %(pathToFile.Identity)" ConsoleToMSBuild="true" ContinueOnError="true" >
			<Output TaskParameter="ConsoleOutput" PropertyName="OUTPUT_MESSAGE" />
			<Output TaskParameter="ExitCode" PropertyName="AZ_EXIT_CODE"/>
		</Exec>
		<Error Text= "Error publishing to Azure Functions: $(OUTPUT_MESSAGE)" Condition = "'$(OUTPUT_MESSAGE)' != 'ServiceError: Unknown error' AND '$(AZ_EXIT_CODE)' == '1'" />
    </Target>

	<Target Name="Deploy" DependsOnTargets="ValidateDeployment;OpenAPIGeneration;GenerateConfigs;PrepareDeploy;ZipDeploy;AzLogin;AzPublish">
		<Message Text="Deploying to Azure functions finished successfully." Condition="'$(AZ_EXIT_CODE)' == '0' Or '$(OUTPUT_MESSAGE)' == 'ServiceError: Unknown error'" Importance="high"/>

		<!-- Define App Settings for GAM connection -->

		<PropertyGroup>
			<GAMConnectionKey>GX_GAMCONNECTIONKEY</GAMConnectionKey>
		</PropertyGroup>

		<Exec Command="az functionapp config appsettings set --name $(AZURE_SERVERLESS_FUNCTION_APP) --resource-group $(AZURE_SERVERLESS_RESOURCE_GROUP) --settings &quot;$(GAMConnectionKey)=$(AZURE_SERVERLESS_GAM_CONNECTION_KEY)&quot;" EchoOff="true" ContinueOnError="true" Condition="'$(AZURE_SERVERLESS_GAM_CONNECTION_KEY)' != ''">
			<Output TaskParameter="ExitCode" PropertyName="PUSHSETTINGS_EXIT_CODE"/>
		</Exec>

		<Message Text="Pushing GAM app settings finished." Importance="high" Condition = "'$(PUSHSETTINGS_EXIT_CODE)' == '0' and '$(IntegratedSecurityEnabled)' == 'true'"/>
		<Message Text="Pushing GAM app settings failed. Please define the GX_GAMCONNECTIONKEY app setting in Azure." Importance="high" Condition = "'$(PUSHSETTINGS_EXIT_CODE)' != '0' and '$(IntegratedSecurityEnabled)' == 'true'"/>

		<!-- Deploy to Azure API Management -->

			<PropertyGroup>
				<DeploytoAPIManagementOn Condition="$(AZURE_APIM_SERVICE_NAME) != '' and $(AZURE_APIM_RESOURCE_GROUP) != '' and
				$(AZURE_APIM_API_ID) != '' and $(AZURE_APIM_API_SERVICE_URL) != '' and $(AZURE_APIM_API_DISPLAY_NAME) != ''">true</DeploytoAPIManagementOn>
			</PropertyGroup>

			<Message Text="Deploy to Azure API Management skipped because at least one property value is empty." Importance="high" Condition = "$(DeploytoAPIManagementOn) != 'true'"/>

			<Message Text="Deploying to Azure API Management..." Importance="high" Condition = "$(DeploytoAPIManagementOn) == 'true'"/>

			<Exec Command="az apim api import --resource-group $(AZURE_APIM_RESOURCE_GROUP) --service-name $(AZURE_APIM_SERVICE_NAME) --specification-format OpenApiJson --api-id $(AZURE_APIM_API_ID) --service-url $(AZURE_APIM_API_SERVICE_URL) --specification-path &quot;$(OpenAPIDefinitionOutputFile)&quot; --subscription-required $(AZURE_APIM_API_SUBSCRIPTION_REQUIRED) --path &quot;$(AZURE_APIM_API_PATH)&quot; --display-name &quot;$(AZURE_APIM_API_DISPLAY_NAME)&quot;" EchoOff="true" ContinueOnError="true" Condition="'$(DeploytoAPIManagementOn)'=='true'">
				<Output TaskParameter="ExitCode" PropertyName="DEPLOYAPIM_EXIT_CODE"/>
			</Exec>

			<Message Text="Deployment to API Management finished." Importance="high" Condition = "'$(DEPLOYAPIM_EXIT_CODE)' == '0'"/>

	</Target>
</Project>