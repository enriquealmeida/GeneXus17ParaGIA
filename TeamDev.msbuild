<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Update" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="$(MSBuildThisFileDirectory)GeneXus.Tasks.targets"/>
	<Import Project="$(MSBuildThisFileDirectory)Genexus.Server.Tasks.targets"/>
	<Import Condition="Exists('$(LocalSettings)')" Project="$(LocalSettings)"/>

	<PropertyGroup>
		<!--Input Parameters-->

		<!-- Server Properties -->
		<ServerUrl></ServerUrl>
		<ServerUsername></ServerUsername>
		<ServerPassword></ServerPassword>
		<ServerKbAlias></ServerKbAlias>
		<ServerKbVersion></ServerKbVersion>
		<GetAllKbVersions></GetAllKbVersions>
		<VersionName></VersionName>

		<!-- Bring Changes Properties -->
		<IsRevert></IsRevert>
		<RevisionIds></RevisionIds>

		<!-- Revert Properties -->
		<RevertObjectList></RevertObjectList>

		<!-- Working KB Properties -->
		<WorkingDirectory></WorkingDirectory>
		<DbaseServerInstance></DbaseServerInstance>
		<CreateDbInKbFolder></CreateDbInKbFolder>
		<DbaseUseIntegratedSecurity></DbaseUseIntegratedSecurity>
		<DbaseServerUsername></DbaseServerUsername>
		<DbaseServerPassword></DbaseServerPassword>
		<DbaseName></DbaseName>
		<WorkingVersion></WorkingVersion>
		<WorkingEnvironment></WorkingEnvironment>

		<!-- Source Control Properties -->
		<Executable></Executable>
		<TeamDevTasks></TeamDevTasks>
		<AutoGetSource></AutoGetSource>
		<CleanCopy></CleanCopy>
		<TagOnSuccess></TagOnSuccess>

		<!-- Building Properties -->
		<ForceRebuild Condition=" '$(ForceRebuild)' == '' ">false</ForceRebuild>
	</PropertyGroup>

	<Target Name="SetLocalProperties">
		<SetVersionProperty Condition="'@(VersionProperty)' != ''" Name="%(VersionProperty.Identity)" Value="%(VersionProperty.Value)" />
		<SetEnvironmentProperty Condition="'@(EnvironmentProperty)' != ''" Name="%(EnvironmentProperty.Identity)" Value="%(EnvironmentProperty.Value)" />
		<SetGeneratorProperty Condition="'@(GeneratorProperty)' != ''" Generator="%(GeneratorProperty.Generator)" Name="%(GeneratorProperty.PropertyName)" Value="%(GeneratorProperty.PropertyValue)" />
		<SetDataStoreProperty Condition="'@(DataStoreProperty)' != ''" Datastore="%(DataStoreProperty.DataStore)" Name="%(DataStoreProperty.PropertyName)" Value="%(DataStoreProperty.PropertyValue)" />
	</Target>

	<Target Name="CreateKB">
		<Error Condition="'$(WorkingDirectory)'==''" Text="WorkingDirectory cannot be null" />
		<Message Text="CreateKBfromServer Directory=$(WorkingDirectory)" />
		<CreateKnowledgeBaseFromServer
			Directory="$(WorkingDirectory)"
			CreateDbInKbFolder="$(CreateDbInKbFolder)"
			DBName="$(DbaseName)"
			IntegratedSecurity="$(DbaseUseIntegratedSecurity)"
			UserId="$(DbaseServerUsername)"
			Password="$(DbaseServerPassword)"
			ServerUri="$(ServerUrl)"
			ServerInstance="$(DbaseServerInstance)"
			ServerKBAlias="$(ServerKbAlias)"
			ServerVersionName="$(ServerKbVersion)"
			ServerUserName="$(ServerUsername)"
			ServerPassword="$(ServerPassword)"
			FullKB="$(GetAllKbVersions)" />
	</Target>

	<Target Name="SelectVersion" Condition="'$(WorkingVersion)'!=''" >
		<SetActiveVersion VersionName="$(WorkingVersion)"  />
	</Target>

	<Target Name="SelectEnvironment" Condition="'$(WorkingEnvironment)'!=''">
		<SetActiveEnvironment EnvironmentName="$(WorkingEnvironment)" />
	</Target>

	<Target Name="OpenKB">
		<Error Condition="'$(WorkingDirectory)'==''" Text="WorkingDirectory cannot be null" />
		<Message Text="OpenKnowledgeBase Directory=$(WorkingDirectory)" />
		<OpenKnowledgeBase
			DatabaseUser="$(DbaseServerUsername)"
			DatabasePassword="$(DbaseServerPassword)"
			Directory="$(WorkingDirectory)"/>
	</Target>

	<Target Name="Open" DependsOnTargets="OpenKB;SelectVersion;SelectEnvironment;SetLocalProperties"/>
	<Target Name="CheckOut" DependsOnTargets="CreateKB;SelectVersion;SelectEnvironment;SetLocalProperties"/>
	<Target Name="CleanCheckOut" DependsOnTargets="CleanWorkingDirectory;CheckOut" />
	<Target Name="CleanWorkingDirectory" DependsOnTargets="DeleteOperationalDBs;DeleteKB;CleanFolder" />

	<Target Name="Update" DependsOnTargets="Open">
		<UpdateFromServer	ServerUserName="$(ServerUsername)" ServerPassword="$(ServerPassword)" />
	</Target>

	<Target Name="CreateDB" DependsOnTargets="Open">
		<CreateDatabase ExecuteCreate="true" />
	</Target>

	<Target Name="BringChanges" DependsOnTargets="Open">
		<BringChanges Revert="$(IsRevert)" ServerUserName="$(ServerUsername)" ServerPassword="$(ServerPassword)" FromVersionName="$(VersionName)" RevisionIds="$(RevisionIds)" />
	</Target>

	<Target Name="Revert" DependsOnTargets="Open">
		<Revert	Objects="$(RevertObjectList)" />
	</Target>

	<Target Name="Build" DependsOnTargets="Open">
		<BuildAll ForceRebuild="$(ForceRebuild)"/>
	</Target>

	<Target Name="SetSqlCmdOptions">
		<PropertyGroup>
			<!--SQLcmd Options-->
			<SqlLoginUser Condition="$(DbaseServerUsername)!='' And !$(DbaseUseIntegratedSecurity)">-U $(DbaseServerUsername) </SqlLoginUser>
			<SqlLoginPassword Condition="$(DbaseServerPassword)!='' And $(SqlLoginUser)!=''">-P $(DbaseServerPassword) </SqlLoginPassword>
			<SqlLoginTrustedConnection Condition="$(DbaseUseIntegratedSecurity)">-E </SqlLoginTrustedConnection>
			<SqlCmdOptions>$(SqlLoginUser)$(SqlLoginPassword)$(SqlLoginTrustedConnection)-X -b</SqlCmdOptions>
		</PropertyGroup>
	</Target>

	<Target Name="DeleteOperationalDBs" Condition="'@(OperationalDatabase)' != ''" DependsOnTargets="SetSqlCmdOptions">
		<Exec Command='sqlcmd $(SqlCmdOptions) -S "%(OperationalDatabase.ServerName)" -Q "IF EXISTS (SELECT name FROM sys.databases WHERE name = N%27%(OperationalDatabase.Identity)%27) ALTER DATABASE [%(OperationalDatabase.Identity)] SET SINGLE_USER WITH ROLLBACK IMMEDIATE"' />
		<Exec Command='sqlcmd $(SqlCmdOptions) -S "%(OperationalDatabase.ServerName)" -Q "IF EXISTS (SELECT name FROM sys.databases WHERE name = N%27%(OperationalDatabase.Identity)%27) DROP DATABASE [%(OperationalDatabase.Identity)]"' />
	</Target>

	<Target Name="DeleteKB" DependsOnTargets="GetKbDatabase;SetSqlCmdOptions">
		<Message Text="DbaseServerInstance = $(DbaseServerInstance)" />
		<Exec Command='sqlcmd $(SqlCmdOptions) -S "$(DbaseServerInstance)" -Q "IF EXISTS (SELECT name FROM sys.databases WHERE name = N%27$(KbDatabase)%27) ALTER DATABASE [$(KbDatabase)] SET SINGLE_USER WITH ROLLBACK IMMEDIATE"' />
		<Exec Command='sqlcmd $(SqlCmdOptions) -S "$(DbaseServerInstance)" -Q "IF EXISTS (SELECT name FROM sys.databases WHERE name = N%27$(KbDatabase)%27) DROP DATABASE [$(KbDatabase)]"' />
	</Target>

	<Target Name="CleanFolder">
		<ItemGroup>
			<ToDelete Include="$(WorkingDirectory)\*.*" />
		</ItemGroup>
		<Delete Files="@(ToDelete)" />

		<!--This trick was taken from http://blog.coryfoy.com/2007/03/msbuild-task-to-recursively-delete-all-of-a-folders-contents/-->
		<Exec Command='for /f "Tokens=*" %%i in (%27dir /ad /b "$(WorkingDirectory)"%27) do rd /s/q "$(WorkingDirectory)\%%i"' />
		<Exec Command='rd /s/q "$(WorkingDirectory)"' />
	</Target>

	<Target Name="GetKbDatabase">
		<ItemGroup>
			<KbDirectory Include="$(WorkingDirectory)"/>
		</ItemGroup>
		<PropertyGroup>
			<KbDatabase Condition="$(DbaseName)!=''">$(DbaseName)</KbDatabase>

			<!--This fails when WorkingDirectory has a trailing slash, thus the error below-->
			<KbDatabase Condition="$(DbaseName)==''">GX_KB_%(KbDirectory.filename)</KbDatabase>
		</PropertyGroup>
		<Error Text="Trailing slash in WorkingDirectory is not supported" Condition="HasTrailingSlash($(WorkingDirectory))" />
		<Message Importance="high" Text="KbDatabase: $(KbDatabase)" />
	</Target>
</Project>
