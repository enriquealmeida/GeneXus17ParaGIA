(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[77],{

/***/ "../../node_modules/@genexus/gemini/dist/esm-es5/gxg-tree-grid-divs.entry.js":
/*!****************************************************************************************************************!*\
  !*** /__w/gx-web-editors/gx-web-editors/node_modules/@genexus/gemini/dist/esm-es5/gxg-tree-grid-divs.entry.js ***!
  \****************************************************************************************************************/
/*! exports provided: gxg_tree_grid_divs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gxg_tree_grid_divs\", function() { return GxgTreeGridDivs; });\n/* harmony import */ var _index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-09b1517f.js */ \"../../node_modules/@genexus/gemini/dist/esm-es5/index-09b1517f.js\");\n\nvar gxgTreeGridDivsCss = \":host{display:block}:host .table{display:table;background-color:var(--color-background);font-family:var(--font-family-primary);font-size:8.5px}:host .tr{display:table-row;cursor:pointer}:host .tr:hover{background-color:var(--color-secondary-enabled)}:host .tr.selected{background-color:var(--color-secondary-active)}:host .tbody{display:table-row-group}:host .td,:host .th{display:table-cell}:host .th:hover{background-color:var(--gray-03)}:host .td{padding:5px 8px;border-bottom:1px solid var(--color-on-disabled);border-left:1px solid var(--color-on-disabled);border-right:1px solid var(--color-on-disabled);color:var(--color-on-background)}:host .th{padding:10px var(--spacing-comp-02);text-transform:uppercase;font-weight:bold;background-color:var(--gray-02);color:var(--color-on-background);letter-spacing:var(--letter-spacing-sm)}:host .icon-text-container{position:relative;padding-left:12px}:host .icon-text-container gxg-icon{position:absolute;left:-6px;top:-4px;cursor:pointer}\";\nvar GxgTreeGridDivs = /** @class */ (function () {\n    function GxgTreeGridDivs(hostRef) {\n        Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\n        this.selectedRows = Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this, \"selectedRows\", 7);\n        this.addRow = Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this, \"addRow\", 7);\n        this.removeRow = Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this, \"removeRow\", 7);\n        this.width = \"100%\";\n        this.displayChildren = \"all\";\n        this.rowsBuffer = [];\n        this.thInPixels = false;\n        this.displayRowChildrenIds = [];\n    }\n    GxgTreeGridDivs.prototype.componentWillLoad = function () {\n        var _this = this;\n        //Check if th width is in percentages or pixels\n        this.checkThWidthUnit();\n        //Table width - if th widths are in pixels, table width should be auto.\n        if (this.thInPixels) {\n            this.width = \"auto\";\n        }\n        //Set th width leftover (only if th widhts are in percentages)\n        if (!this.thInPixels) {\n            this.calculateThWitdhLeftover();\n        }\n        //Display children rows\n        if (this.displayChildren === \"all\") {\n            this.displayChildrenRows(this.rows);\n        }\n        //Parse rows\n        this.rows.map(function (row, i) {\n            _this.parseRows(row, 0, i);\n        });\n    };\n    GxgTreeGridDivs.prototype.displayChildrenRows = function (rows) {\n        var _this = this;\n        rows.map(function (row) {\n            if (row.hasOwnProperty(\"children\")) {\n                _this.displayRowChildrenIds.push(row[\"id\"]);\n                _this.displayChildrenRows(row[\"children\"]);\n            }\n            else {\n                return;\n            }\n        });\n    };\n    GxgTreeGridDivs.prototype.componentDidLoad = function () {\n        //Spliter\n        // var name = this.el.shadowRoot.getElementById(\"name\");\n        // var type = this.el.shadowRoot.getElementById(\"type\");\n        // var telephone = this.el.shadowRoot.getElementById(\"telephone\");\n        // Split([name, type, telephone], {\n        //   gutterSize: 2,\n        //   cursor: \"col-resize\",\n        // });\n    };\n    GxgTreeGridDivs.prototype.checkThWidthUnit = function () {\n        for (var i = 0; i < this.columns.length; i++) {\n            if (this.columns[i].hasOwnProperty(\"width\")) {\n                if (this.columns[i][\"width\"].includes(\"px\")) {\n                    this.thInPixels = true;\n                    break;\n                }\n            }\n        }\n    };\n    GxgTreeGridDivs.prototype.parseRows = function (row, level, i) {\n        var _this = this;\n        var hasChildren = false;\n        if (row.hasOwnProperty(\"children\")) {\n            hasChildren = true;\n        }\n        this.rowsBuffer.push(Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: { tr: true }, onClick: function (e) { return _this.trClick(e, row); }, id: row.id }, Object.keys(row[\"cells\"]).map(function (td, i) { return (Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: { td: true }, style: {\n                paddingLeft: _this.tdPaddingLeft(i, level),\n            }, \"data-value-type\": td }, hasChildren && i === 0 ? (Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: { \"icon-text-container\": true } }, _this.arrowIcon(i, hasChildren, row), \n        //row[\"cells\"][td]\n        _this.renderTd(row.id, td, row[\"cells\"][td], i))) : (\n        //row[\"cells\"][td]\n        _this.renderTd(row.id, td, row[\"cells\"][td], i)))); })));\n        var displayRowIdFound = this.displayRowChildrenIds.find(function (id) { return id === row[\"id\"]; });\n        if (row.hasOwnProperty(\"children\") && displayRowIdFound !== undefined) {\n            row[\"children\"].map(function (row) {\n                _this.parseRows(row, level + 1, i);\n            });\n        }\n        else {\n            return;\n        }\n    };\n    GxgTreeGridDivs.prototype.renderTd = function (rowId, columnName, value, columnNumber) {\n        //si esta definido y es una funcion\n        if (this.columns[columnNumber][\"render\"]) {\n            return this.columns[columnNumber][\"render\"](rowId, columnName, value);\n        }\n        else {\n            return value;\n        }\n    };\n    GxgTreeGridDivs.prototype.trClick = function (e, row) {\n        //if ctrl key was not pressed\n        if (!e.ctrlKey && !e.shiftKey) {\n            //remove previously added classses\n            var rows = this.el.shadowRoot.querySelectorAll(\".tbody .tr\");\n            rows.forEach(function (row) {\n                row.classList.remove(\"selected\");\n            });\n        }\n        //Add 'selected' class to the currently clicked tr\n        var rowClicked = this.el.shadowRoot.getElementById(row.id);\n        //if ctrl key was pressed\n        if (e.ctrlKey) {\n            if (rowClicked.classList.contains(\"selected\")) {\n                rowClicked.classList.remove(\"selected\");\n            }\n            else {\n                rowClicked.classList.add(\"selected\");\n            }\n        }\n        else {\n            rowClicked.classList.add(\"selected\");\n        }\n        //if shift key was pressed\n        if (e.shiftKey) {\n            var itemsSelected = this.el.shadowRoot.querySelectorAll(\".tbody .tr.selected\");\n            var firstRowSelectedId_1 = itemsSelected[0].getAttribute(\"id\");\n            var lastRowSelectedId_1 = itemsSelected[1].getAttribute(\"id\");\n            var allRows = this.el.shadowRoot.querySelectorAll(\".tbody .tr\");\n            allRows.forEach(function (row) {\n                var rowId = row.getAttribute(\"id\");\n                if (rowId > firstRowSelectedId_1 && rowId < lastRowSelectedId_1) {\n                    row.classList.add(\"selected\");\n                }\n            });\n        }\n        //Emmit event with the table rows that are selected\n        var selectedRows = this.el.shadowRoot.querySelectorAll(\".tbody .tr.selected\");\n        var dataArray = [];\n        selectedRows.forEach(function (row) {\n            var rowData = {};\n            var tds = row.querySelectorAll(\".td\");\n            tds.forEach(function (td) {\n                rowData[\"id\"] = row.getAttribute(\"id\");\n                var dataValueType = td.getAttribute(\"data-value-type\");\n                var dataValue = td.innerHTML;\n                rowData[dataValueType] = dataValue;\n            });\n            dataArray.push(rowData);\n        });\n        this.selectedRows.emit(dataArray);\n    };\n    GxgTreeGridDivs.prototype.arrowIcon = function (i, hasChildren, row) {\n        if (i === 0 && hasChildren) {\n            var rowId_1 = row[\"id\"];\n            var rowIdFoundOndisplayRowChildrenIds = this.displayRowChildrenIds.find(function (id) { return id === rowId_1; });\n            var iconType = void 0;\n            if (rowIdFoundOndisplayRowChildrenIds !== undefined) {\n                iconType = \"navigation/chevron-down\";\n            }\n            else {\n                iconType = \"navigation/chevron-right\";\n            }\n            return (Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"gxg-icon\", { type: iconType, onClick: this.toggleRow.bind(this) }));\n        }\n    };\n    GxgTreeGridDivs.prototype.toggleRow = function (e) {\n        var _this = this;\n        var trId = e.target.closest(\".tr\").getAttribute(\"id\");\n        var trIdFoundOndisplayRowChildrenIds = this.displayRowChildrenIds.find(function (id) { return id === trId; });\n        if (trIdFoundOndisplayRowChildrenIds !== undefined) {\n            var index = this.displayRowChildrenIds.indexOf(trId);\n            if (index > -1) {\n                this.displayRowChildrenIds.splice(index, 1);\n            }\n        }\n        else {\n            this.displayRowChildrenIds.push(trId);\n        }\n        this.rowsBuffer = [];\n        this.rows.map(function (row, i) {\n            _this.parseRows(row, 0, i);\n        });\n    };\n    GxgTreeGridDivs.prototype.tdPaddingLeft = function (i, level) {\n        if (i === 0 && level !== 0) {\n            return level * 20 + \"px\";\n        }\n    };\n    GxgTreeGridDivs.prototype.calculateThWitdhLeftover = function () {\n        var totalThWidthDefined = 0;\n        var numberOfThWithoutWidthDefined = 0;\n        this.columns.forEach(function (th) {\n            if (th[\"width\"] !== undefined) {\n                totalThWidthDefined += parseInt(th[\"width\"].substring(0, th[\"width\"].length - 1));\n            }\n            else {\n                numberOfThWithoutWidthDefined++;\n            }\n        });\n        this.thWidthLeftover =\n            (100 - totalThWidthDefined) / numberOfThWithoutWidthDefined + \"%\";\n    };\n    GxgTreeGridDivs.prototype.thWidth = function (th) {\n        if (th[\"width\"] !== undefined) {\n            return th[\"width\"];\n        }\n        else {\n            return this.thWidthLeftover;\n        }\n    };\n    GxgTreeGridDivs.prototype.render = function () {\n        var _this = this;\n        return (Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], null, Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: { table: true }, style: { width: this.width } }, Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: { tr: true } }, this.columns.map(function (th) {\n            return (Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: { th: true }, style: {\n                    width: _this.thWidth(th),\n                }, id: th[\"name\"] }, th[\"displayName\"]));\n        })), Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: {\n                tbody: true,\n            } }, this.rowsBuffer))));\n    };\n    Object.defineProperty(GxgTreeGridDivs.prototype, \"el\", {\n        get: function () { return Object(_index_09b1517f_js__WEBPACK_IMPORTED_MODULE_0__[\"g\"])(this); },\n        enumerable: false,\n        configurable: true\n    });\n    return GxgTreeGridDivs;\n}());\nGxgTreeGridDivs.style = gxgTreeGridDivsCss;\n\n\n\n//# sourceURL=webpack:////__w/gx-web-editors/gx-web-editors/node_modules/@genexus/gemini/dist/esm-es5/gxg-tree-grid-divs.entry.js?");

/***/ })

}]);