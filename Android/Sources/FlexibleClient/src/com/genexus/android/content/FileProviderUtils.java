package com.genexus.android.content;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import androidx.annotation.NonNull;
import androidx.core.content.FileProvider;

import com.genexus.android.core.utils.FileUtils2;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

// Helper class for FlexibleClient's FileProvider declared in AndroidManifest.xml
public class FileProviderUtils {
	/**
	 * Returns true if the File is contained inside one of the directories for which we
	 * can produce a content uri (i.e. those listed in shared_files.xml).
	 */
	public static boolean canShareFile(@NonNull Context context, @NonNull File file) {
		return (FileUtils2.directoryContains(context.getFilesDir(), file) ||
			FileUtils2.directoryContains(context.getCacheDir(), file) ||
			FileUtils2.directoryContains(context.getExternalFilesDir(null), file) ||
			FileUtils2.directoryContains(context.getExternalCacheDir(), file));
	}

	/**
	 * Grants {@link Intent#FLAG_GRANT_READ_URI_PERMISSION} to all activities that can be
	 * used to open the given intent.
	 */
	public static void grantReadPermissions(@NonNull Context context, @NonNull Intent intent) {
		if (intent.getData() == null ||
			!ContentResolver.SCHEME_CONTENT.equals(intent.getData().getScheme()) ||
			!getAuthority(context).equals(intent.getData().getHost())) {
			String errorMessage = String.format("Intent does not have an Uri generated by this FileProvider (data = %s)", intent.getData());
			throw new IllegalArgumentException(errorMessage);
		}

		// According to the documentation granting permissions manually should not be necessary,
		// as FileProvider does it automatically (and the provider MUST also be declared with
		// exported=false in the manifest. However, it does not work at least for ACTION_VIEW.
		// See http://stackoverflow.com/a/33652695/82788
		for (ResolveInfo resolveInfo : context.getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY)) {
			String packageName = resolveInfo.activityInfo.packageName;
			context.grantUriPermission(packageName, intent.getData(), Intent.FLAG_GRANT_READ_URI_PERMISSION);
		}
	}

	/**
	 * Helper method for getting a shareable Uri using the FlexibleClient's built-in FileProvider.
	 *
	 * @param context Context object.
	 * @param file    File to be shared. Must be located inside one of the directories
	 *                named in shared_files.xml
	 */
	public static Uri getUriForFile(@NonNull Context context, @NonNull File file) {
		String authority = getAuthority(context);
		return FileProvider.getUriForFile(context, authority, file);
	}

	private static String getAuthority(@NonNull Context context) {
		return context.getPackageName() + ".file_provider";
	}

	/**
	 * Copy to the place where the FileProvider will grab it.
	 * Use a random name to avoid exposing the original file name.
	 */
	public static Uri getSharedUriFromFile(@NonNull Context context, @NonNull File file) throws IOException {
		File providerDir = new File(context.getFilesDir(), "shared_files");
		String providerFilename = UUID.randomUUID().toString().replace("-", "") + "." + FilenameUtils.getExtension(file.getAbsolutePath());
		File providerFile = new File(providerDir, providerFilename);
		FileUtils.copyFile(file, providerFile);
		return FileProviderUtils.getUriForFile(context,providerFile);
	}
}
