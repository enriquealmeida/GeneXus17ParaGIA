delimiters "$", "$"
import "PanelHtml_Events.stg"
import "PanelHtml_Properties.stg"
import "PanelHtml_Cell_Properties.stg"
import "PanelHtml_Grid.stg"
import "PanelHtml_Data.stg"
import "PanelHtml_ActionBar.stg"
import "Expressions.stg"

cellTypeToTemplatelMap ::= [
  "image"         : "g_cell_image",
  "data"          : "g_cell_data",
  "textblock"     : "g_cell_textblock",
  "grid"          : "g_cell_grid",
  "table"         : "g_cell_table",
  "allcontent"    : "g_cell_allcontent",
  "onecontent"    : "g_cell_onecontent",
  "tab"           : "g_cell_tab",
  "component"     : "g_cell_component",
  "contentplaceholder" : "g_cell_contentplaceholder",
  "action"        : "g_cell_action",
  "usercontrol"   : "g_cell_usercontrol",
  "group"         : "g_cell_group"
]

cellTypeToAlignmentMap ::= [
  default          : "g_table_cell_alignment"
]

tableTypeToTemplateMap ::= [
  "Tabular"   : "g_tabular_table",
  "Flex"      : "g_flex_table",
  "Absolute"  : "g_canvas",
  default     : "g_not_implemented"
]

actionType ::= [
  "check box"  : "toggle",
  "combo box"  : "combo",
  default      : "button"
]

allContentMap ::= [
  "Tab":	"g_tab_sections",
  "Inline":	"g_inline_sections",
  "Link":	"g_link_sections",
  default:	"g_panel_sections"
]

mapHAlign ::= [
	"Left" : "left",
	"Right":"right",
	"Center": "center",
	default: "left"
]

mapVAlign ::= [
	"Top" : "top",
	"Middle":"middle",
	"Bottom": "bottom",
	default: "top"
]

propertyMap ::= [
  "Visible" : "visible",
  "Enabled" : "enabled",
  "Class"   : "class",
  "Caption" : "caption",
  "ActivePage" : "activePage",
  default: key
]

textblockToTemplatelMap ::= [
  "HTML"         : "g_textblock_html",
  default        : "g_textblock_default"
]

g_page(page, gx)::=<<
  $g_layout_body(page)$
>>

g_head(page)::=<<
<head>
  <meta charset="utf-8"/>
  <title>$g_translate(page.Caption)$</title>
</head>
>>

g_bodyHeader(page)::=<<>>

g_cssfile(css)::=<<
$g_cssRef("pages",css)$
>>

g_themefile(css)::=<<
$g_cssRef("layout",css)$
>>

g_cssRef(dir,css)::=<<
<link href="/$dir$/$css.File$" rel="stylesheet" $g_cssfile_media(css.LayoutMedia)$/>

>>

g_cssfile_media(media)::=<%
$if(media)$
media="$media.Bounds:{bound | $if (media.Not)$not $endif$screen and $if (bound.HasMin)$(min-width:$bound.Min$px)$endif$$if (bound.HasMax)$$if (bound.HasMin)$ and $endif$(max-width:$bound.Max$px)$endif$};separator=", "$
"
$endif$
%>

g_layout_body(page)::= <<
$page:g_bodyHeader()$
$page.MasterPanel:g_start_masterpanel()$
<section class="main-content">
  $page.Layout:{layout| $g_layout(layout, page)$};separator="\r\n"$
</section>
$page.MasterPanel:g_end_masterpanel()$
>>

layoutHeaderMap ::= [
  "":		"g_empty_header",
  default:	"g_layout_header"
]

g_layout(layout, page) ::= <<
<gx-card
  $g_html_id(layout.LayoutId)$
  [showHeader]='showAsCard'
  [showBorder]='showAsCard'
  [showFooter]='showAsCard'
  $g_layout_condition(layout.LayoutId)$
  class="$layout.ActionBar.ApplicationBarsClass$"
  $g_form_caption_property(layout)$
>
  $if (page.ShowApplicationBars)$$(layoutHeaderMap.(page.Caption))(page.Caption, layout)$$endif$
  <div slot="body" $g_layout_condition(layout.LayoutId)$>
    $g_table(layout.Table, false)$
  </div>
  $layout.ActionBar:g_actionbar()$
  $if (layout.ActionGroups)$
  $layout.ActionGroups.ActionGroup:g_actionsheet()$
  $endif$
</gx-card>
>>

g_showlayout(show) ::= <%$if(show.ExprType)$*ngIf="$show:g_expression()$"$endif$%>

g_layout_condition(layoutId) ::= <%*ngIf="viewManager.view === '$layoutId$'"%>

g_layout_header(caption, layout) ::= <<
<span slot="header" $g_layout_condition(layout.LayoutId)$>$g_translate(caption)$</span>
>>

g_empty_header(caption, layout) ::= <<>>

g_cell_textblock(cell) ::= <%
  $(textblockToTemplatelMap.(cell.Textblock.Format))(cell.Textblock)$
%>

g_textblock_default(data) ::= <<
<gx-textblock 
  #$data.ControlName$ 
  $g_class_property(data, data.Class)$
  $g_visible_property(data, data.Visible)$
  $g_enabled_property(data, data.Enabled)$
  $g_touch_event_binding(data)$
  $g_invisible_mode_attr(data)$
  $g_line_clamp_attribute(data)$
>$g_caption_property(data, data.Caption)$</gx-textblock>
>>

g_line_clamp_attribute(control) ::= <%$if (control.LineClamp)$line-clamp$endif$%>


g_textblock_html(data) ::= <<
<div
  #$data.ControlName$ 
  $g_class_property(data, data.Class)$
  $g_visible_property(data, data.Visible)$
  $g_assign_html_property_or_default({innerHTML}, data.UIElementContextExpression, data.UIElementControlName, data.CaptionProperty, {'}, data.Caption)$>
</div>
>>

g_cell_table(cell) ::= <%
  $g_table(cell.Table, false)$
%>

g_table(table, extraData) ::= <<
$if (table)$
  $(tableTypeToTemplateMap.(table.TableType))(table, extraData)$
$endif$
>>

g_tabular_table(table, extraData) ::= <<
<gx-table
  #$table.ControlName$
  $g_class_property(table, table.Class)$
  $g_system_class_property(table)$
  $g_visible_property(table, table.Visible)$
  areas-template="$table.AreasTemplate$"
  columns-template="$table.ColumnsTemplate$"
  rows-template="$table.RowsTemplate$"
  $html_att_style(table.StyleAttribute)$
  $g_touch_event_binding(table)$
  $g_invisible_mode_attr(table)$
  $g_background_image(table)$
$if(extraData)$
  $extraData$
$endif$
>
  $g_tabular_table_content(table)$
</gx-table>
>>

g_tabular_table_content(table) ::= <<
$if (table.RenderOnSightOptimization)$
<ng-container *visibleWith="$table.ControlName$">
  $table.Row: {row | $g_tabular_row(row, i0)$};separator="\r\n"$
</ng-container>
$else$
$table.Row: {row | $g_tabular_row(row, i0)$};separator="\r\n"$
$endif$
>>

g_tabular_row(row, index) ::= <<
$row.Cell: {cell | $g_tabular_cell(cell, index, i0)$};separator="\r\n"$
>>

g_tabular_cell(cell, rowIndex, cellIndex) ::= <<
$if(cell.CellType)$
<gx-table-cell 
  area="cell$rowIndex$$cellIndex$"
  $g_auto_grow_attribute(cell)$
  $(cellTypeToAlignmentMap.(cell.CellType))(cell)$
  $html_att_style(cell.StyleAttribute)$
  $html_table_cell_height(cell)$
>
  $(cellTypeToTemplatelMap.(cell.CellType))(cell)$
</gx-table-cell>
$endif$
>>

g_auto_grow_attribute(cell) ::= << overflow-mode="$if (cell.AutoGrow)$clip$else$$cell.AutoGrowMode$$endif$">>


g_table_cell_alignment(cell) ::= <%
  align="$(mapHAlign.(cell.HAlign))$" valign="$(mapVAlign.(cell.VAlign))$"
%>

g_flex_table(table, extraData) ::= <<
<div
  #$table.ControlName$
  class="$table.Class$"
  $html_att_style(table.StyleAttribute)$
$if(extraData)$
  $extraData$
$endif$
>
  $table.Row: {row | $g_flex_row(row)$};separator="\r\n"$
</div>
>>

g_flex_row(row) ::= <<
$row.Cell: {cell | $g_flex_cell(cell)$};separator="\r\n"$
>>

g_flex_cell(cell) ::= <<
$if(cell.CellType)$
<div class="flex-cell"
  $html_att_style(cell.StyleAttribute)$
>
  $(cellTypeToTemplatelMap.(cell.CellType))(cell)$
</div>
$endif$
>>

g_cell_component(cell)::=<<
<gx-table
  $g_class_property(cell.Component, cell.Component.Class)$
  $g_visible_property(cell.Component, cell.Component.Visible)$
  columns-template="var(--gx-table-components-column)"
  rows-template="var(--gx-table-components-row)"
  $g_invisible_mode_attr(cell.Component)$
>
  <gx-table-cell>
    <gx-component-host 
      id="$cell.Component.ControlName$"
      [parentOutlet]="outlet"
      $g_componentobject_property(cell.Component, cell.Component.ComponentUri)$
    >
    </gx-component-host>
  </gx-table-cell>
</gx-table>
>>

g_cell_contentplaceholder(cell)::=<<
<gx-table
  columns-template="var(--gx-table-components-column)"
  rows-template="var(--gx-table-components-row)"
>
    <ng-content></ng-content>
</gx-table>
>>

g_canvas(table, extraData)::=<<
<gx-canvas
  #$table.ControlName$
  $g_class_property(table, table.Class)$
  $g_visible_property(table, table.Visible)$
  class="$table.Class$"
  $html_att_style(table.StyleAttribute)$
$if(extraData)$
  $extraData$
$endif$
  $g_invisible_mode_attr(table)$
>
  $table.Row: {row | $g_canvas_row(row)$};separator="\r\n"$
</gx-canvas>
>>

g_canvas_row(row) ::= <<
$row.Cell: {cell | $g_canvas_cell(cell)$};separator="\r\n"$
>>

g_canvas_cell(cell) ::= <<
$if(cell.CellType)$
<gx-canvas-cell 
  $(cellTypeToAlignmentMap.(cell.CellType))(cell)$
  $html_att_style(cell.StyleAttribute)$
  $g_cell_properties(cell)$
>
  $(cellTypeToTemplatelMap.(cell.CellType))(cell)$
</gx-canvas-cell>
$endif$
>>

g_promptCall(data)::=<<
$if (data.IsPrompt)$
<button class="promptCall prompt-$data.Mode$" data-gx-action="$data.PromptCall$" />
$endif$
>>

g_cell_image(cell) ::= <%
  $g_image(cell.Image)$
%>

g_image(data) ::= <<
<gx-image
  [autoGrow]="$data.AutoGrow$"
  $g_html_id(data.ControlName)$
  $g_class_property(data, data.Class)$
  $g_enabled_property(data, data.Enabled)$
  $g_visible_property(data, data.Visible)$
  src="{{getImageSource('$data.Image$')}}"
  $html_att_value("alt", data.AlternateText)$
  $g_touch_event_binding(data)$
  $g_invisible_mode_attr(data)$
>
</gx-image>
>>

g_expression_or_null(binding) ::= <%
$if(binding)$
$if(binding.ExprType)$
$binding:g_expression()$
$else$
null
$endif$
$else$
null
$endif$
%>

g_cell_allcontent(cell) ::= <<
$(allContentMap.(cell.AllContent.Display))(cell.AllContent)$
>>

g_tab_sections(content)::=<<
<div class="gx-sections-container">
  <gx-tab>
    $first(page.Sections.Section):g_tab_sections_item(true);separator="\r\n"$
    $rest(page.Sections.Section):g_tab_sections_item();separator="\r\n"$
  </gx-tab>
</div>
>>

g_tab_sections_item(section, selected=false)::=<<
<gx-tab-caption
  slot="caption"
  $if(selected)$selected="true"$endif$
>
  $g_translate(section.Caption)$
</gx-tab-caption>
<gx-tab-page slot="page">
  $section:g_one_section()$
</gx-tab-page>
>>

g_inline_sections(content)::=<<
<div class="gx-sections-container">
  $page.Sections.Section:g_one_section()$
</div>
>>

g_one_section(section) ::= <<
<$section.FullName$
  $section.Parameters.Parameter:g_section_parameter();separator="\r\n"$
  sectionType='inline'>
</$section.FullName$>
>>


g_link_sections(content)::=<<
<div class="gx-sections-container">
  $page.Sections.Section:g_one_link_to_section();separator="\r\n"$
</div>
>>

g_one_link_to_section( section)::=<%
<gx-button (click)="navigateTo$section.FullName$()" data-has-action="">
  $g_translate(section.Caption)$
</gx-button>
%>

g_panel_sections(content)::=<<
<div class="gx-sections-container">
  $page.Sections.Section:{ section | $g_panel_sections_page(section)$ };separator="\r\n"$
</div>
>>

g_panel_sections_page(section) ::= <<
<$section.FullName$ class="section"
  $section.Parameters.Parameter:g_section_parameter();separator="\r\n"$
  sectionType='inline'
>
</$section.FullName$>
>>

g_section_parameter(p) ::= <<
[$gx.ToLower.(p.Name)$]="$p.expression:g_expression()$"
>>

g_cell_onecontent(content) ::= <<
<$content.OneContent.FullName$ 
  #$content.OneContent.ControlName$
  $content.OneContent.Parameters.Parameter:g_section_parameter();separator="\r\n"$ 
  sectionType='inline'>
</$content.OneContent.FullName$>
>>

g_cell_tab(cell) ::= <<
<gx-tab
  #$cell.Tab.ControlName$
  $g_class_property(cell.Tab, cell.Tab.Class)$
  $g_visible_property(cell.Tab, cell.Tab.Visible)$
  $g_enabled_property(cell.Tab, cell.Tab.Enabled)$
  $g_activepage_property(cell.Tab, {'1'})$
  $cell.Tab.ActivePageChangedAction:g_event_binding( {tabChange},  cell.Tab )$
  $html_att_style(cell.StyleAttribute)$
  $g_invisible_mode_attr(cell.Tab)$
>
    $first(cell.Tab.Item): g_tabPage(true)$
    $rest(cell.Tab.Item): g_tabPage(false)$
</gx-tab>
>>

g_tabPage(tabPage, selected) ::= <<
<gx-tab-caption 
  $g_class_property(tabPage, tabPage.Class)$
  $g_visible_property(tabPage, tabPage.Visible)$
  $g_enabled_property(tabPage, tabPage.Enabled)$
  (tabSelect) = "$tabPage.UIElementContextExpression:g_expression()$.$tabPage.UIElementControlName$.parent.select($tabPage.order$+1)"
  image-position="$tabPage.ImagePosition$"
  slot="caption"
  $if (selected)$
  [selected]="$tabPage.UIElementContextExpression:g_expression()$.$tabPage.UIElementControlName$.selected | default:true"
  $else$
  [selected]="$tabPage.UIElementContextExpression:g_expression()$.$tabPage.UIElementControlName$.selected"
  $endif$
>
  $if (tabPage.Image)$
  <img 
    src="{{getImageSource('$tabPage.Image$')}}" slot="main-image"
  />
  $endif$
  $if (tabPage.UnselectedImage)$
  <img 
    src="{{getImageSource('$tabPage.UnselectedImage$')}}" slot="disabled-image" 
  />
  $endif$
  $if (tabPage.Caption)$
  $g_caption_property(tabPage, tabPage.Caption)$
  $endif$
</gx-tab-caption>

<gx-tab-page slot="page">
  <ng-container *ngIf="$tabPage.UIElementContextExpression:g_expression()$.$tabPage.UIElementControlName$.active">
    $g_table(tabPage.Table, false)$
  </ng-container>
</gx-tab-page>

>>

g_cell_action(cell)::= <%
  $g_button(cell.Action)$
%>

g_button(action)::= <<
<gx-button
  #$action.ControlName$
  name="$action.ControlName$"
  $if (action.ActionElement)$(click)="$action.actionContext:g_event_set_action_context()$ callAction( this.$action.ActionElement$); \$event.stopPropagation()"$endif$
  $g_class_property(action, action.Class)$
  $g_visible_property(action, action.Visible)$
  $g_enabled_property(action, action.Enabled)$
  $g_invisible_mode_attr(action)$
  $g_dimensions(action)$
>
  $if (action.HasImage)$
  <img src="{{getImageSource('$action.image$')}}" slot="main-image" />
  $endif$
  $g_caption_property(action, action.Caption)$
</gx-button>
>>

g_cell_usercontrol(cell) ::= <%
  $g_usercontrol(cell.uc, false)$
%>

g_usercontrol(uc, dataBinding) ::= <<
<$uc.Selector$
  #$uc.ControlName$
  $g_visible_property(uc, uc.Visible)$
  $uc.RenderProperties: {property | $g_usercontrol_properties(uc, property)$};separator="\n"$
  $uc.RenderEvents: {event | $g_usercontrol_events(uc, event)$};separator="\n"$
$if (dataBinding)$
  [(databindingvalue)]="$dataBinding:g_expression()$"
$endif$
>
</$uc.Selector$>
>>

g_usercontrol_properties(uc, property) ::=<%
$g_assign_html_property_or_default(property, uc.UIElementContextExpression, uc.UIElementControlName, propertyMap.(property), { }, uc.RenderPropertiesValue.(property))$
%>

g_usercontrol_events(uc, event) ::=<%
($event.ComponentEventName$)="callAction(this.$event.HandlerName$, \$event)"
%>

g_cell_group(cell) ::= <%
$g_group(cell.Group)$
%>

g_group(grp) ::= <<
<gx-group
  caption="$grp.Caption$"
  #$grp.ControlName$
  $g_class_property(grp, grp.Class)$
  $g_visible_property(grp, grp.Visible)$
  $g_invisible_mode_attr(grp)$
>
$g_table(grp.Table, false)$
</gx-group>
>>

att_gx_viewtype(viewType)::= <<
data-gx-viewtype="$viewType$"
>>

html_class(class)::= <<
class="$class$"
>>

grid_binding(binding)::= <<
, binding:'$binding$'
>>

data_source(data)::= <%
$if (data.CustomProperties)$
$data.CustomProperties.ControlValues: control_values()$$data.CustomProperties.service: service_url()$$data.CustomProperties.serviceInputs: service_inputs()$
$endif$
%>

control_values(values)::= <<
, controlValues: '$values$'
>>

service_url(url)::=<<
, serviceUrl: '$url$'
>>

service_inputs(params)::=<<
, params: '$params$'
>>

data_enabled(data)::=<<
$if(data.Readonly)$disabled$endif$
>>

g_not_implemented(control, extraData) ::= <<
<gx-message>Not yet implemented</gx-message>
>>

g_invisible_mode_attr(control) ::= <<$html_att_value("invisible-mode", control.InvisibleMode)$>>

g_background_image(control) ::= <<$html_css_image_value("[style.background-image]", control.Background)$>>

g_dimensions(control) ::= <<
$if (control.HasWidth)$
[style.width.px]="'$control.Width$'"
$endif$
$if (control.HasHeight)$
[style.height.px]="'$control.Height$'"
$endif$
>>

g_start_masterpanel(master_panel_name) ::= <<
<$master_panel_name$>
>>

g_end_masterpanel(master_panel_name) ::= <<
</$master_panel_name$>
>>
