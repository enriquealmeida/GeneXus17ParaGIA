delimiters "$", "$"

import "Types.stg"
import "Expressions.stg"

g_bc_service(page, gx)::=<<
import { Injectable } from '@angular/core';
import { HttpClient } from "@angular/common/http"

import { EndpointConnector } from 'app/gx/base/endpoint.connector';
import { Settings } from 'app/app.settings';
import { BusinessComponentService } from 'app/gx/base/business-component';
import { $first(page.GxObject.Structure.Levels).LevelName$Data } from './$gx.ToLower.(page.GxObject.ComponentName)$.dt';
$page.Imports:g_imports();separator="\r\n"$

$first(page.GxObject.Structure.Levels):g_bc_level()$

>>

g_bc_level(level) ::=<<

@Injectable()
export class $level.LevelName$Service extends BusinessComponentService<$level.LevelName$Data>{

  constructor(protected http: HttpClient) {
    super( http);
  }

  $g_bc_initializeMethod(level)$
  $g_bc_getMethod(level)$
  $g_bc_deleteMethod(level)$
  $g_bc_postMethod(level)$
  $g_bc_putMethod(level)$

}
>>


g_bc_initializeMethod(level) ::=<<
async initialize(): Promise<$level.LevelName$Data> {
  try {
    return await EndpointConnector.getDataForType<$level.LevelName$Data>(this.http, Settings.SERVICE_API_ENDPOINT + '$page.GxObject.ServicePath$/_default', $level.LevelName$Data)
  }
  catch (error) {
    this.handleError(error);
  }
}

>>

g_bc_getMethod(level) ::=<<
async get( $g_bc_parameters(level)$): Promise<$level.LevelName$Data> {
  try {
    return await EndpointConnector.getDataForType<$level.LevelName$Data>(this.http, Settings.SERVICE_API_ENDPOINT + '$page.GxObject.ServicePath$/'$g_bc_request_parameters(level)$, $level.LevelName$Data)
  }
  catch (error) {
    this.handleError(error);
  }
}

>>

g_bc_deleteMethod(level) ::=<<
async delete( $level.Name$:$level.LevelName$Data): Promise<$level.LevelName$Data> {
  try {
    var response = await this.http.delete(Settings.SERVICE_API_ENDPOINT + '$page.GxObject.ServicePath$/'$g_bc_parameters_from_data(level)$).toPromise();
    return response as $level.LevelName$Data;
  }
  catch (error) {
    this.handleError(error);
  }
}

>>

g_bc_postMethod(level) ::=<<
async post( $level.Name$:$level.LevelName$Data): Promise<$level.LevelName$Data> {
  try {
    var response = await this.http.post(Settings.SERVICE_API_ENDPOINT + '$page.GxObject.ServicePath$/'$g_bc_parameters_from_data(level)$, JSON.stringify($level.Name$), { headers: this.getHeaders('post')}).toPromise();
    return response as $level.LevelName$Data;
  }
  catch (error) {
    this.handleError(error);
  }
}

>>

g_bc_putMethod(level) ::=<<
async put( $level.Name$:$level.LevelName$Data): Promise<$level.LevelName$Data> {
  try {
    var response = await this.http.put(Settings.SERVICE_API_ENDPOINT + '$page.GxObject.ServicePath$/'$g_bc_parameters_from_data(level)$, JSON.stringify($level.Name$), { headers: this.getHeaders('put')}).toPromise();
    return response as $level.LevelName$Data;
  }
  catch (error) {
    this.handleError(error);
  }
}

>>

g_bc_parameters(level) ::=<%
$level.Key:{ att | $att.Name$:$g_type_name(att.GeneratorType)$ }; separator=", "$
%>

g_bc_request_parameters(level) ::=<<
 + $level.Key:{ att | $g_bc_request_parameter(att)$ };separator="+ ',' + "$
>>

g_bc_request_parameter(att)::=<%
$att.Name$
%>

g_bc_parameters_from_data(level) ::=<%
$level.Key:{att| + $level.Name$.$att.Name$};separator="+ ',' + "$
%>
