delimiters "$", "$"

import "TypeConversions.stg"
import "TypeImports.stg"

g_component_name(generatorType) ::= <%
$gx.GetTypeComponent.(generatorType)$
%>

g_type_name(generatorType) ::= <%
$gx.GetTypeName.(generatorType)$
%>

g_type_name_or_alias(generatorType) ::= <%
$if (gx.GetTypeAlias.(generatorType))$
  $gx.GetTypeAlias.(generatorType)$
$else$
  $gx.GetTypeName.(generatorType)$
$endif$
%>

g_type_ctor(generatorType) ::= <%
$gx.GetTypeCtor.(generatorType)$
%>

g_type_location(generatorType) ::= <%
$gx.GetTypeLocation.(generatorType)$
%>

g_declare_item_att(item) ::=<<
$g_declare_item_decorator_att(item)$$g_declare_item(item)$
>>

g_declare_item_var(item) ::=<<
$g_declare_item_decorator_var(item)$$g_declare_item(item)$
>>

g_declare_item(item) ::=<%
$declare_item(item)$
%>

g_init_state_item(item) ::= <<
$if(item.IsStateMember)$
$g_init_item_with_ctor(item)$
$endif$
>>

g_init_component_item(item) ::= <<
$if(!item.IsStateMember)$
$g_init_item_with_ctor(item)$
$endif$
>>

g_init_item(item) ::=<<
this.$item.Name$ = $g_type_ctor(item.GeneratorType)$;

>>

g_init_item_with_ctor(item) ::= <%
$init_item_with_ctor(item)$
%>

g_item_ctor(item) ::= <%
$if (item.Ctor)$
  $item.Ctor$
$else$
  $g_type_ctor(item.GeneratorType)$
$endif$
%>

g_properties_definitions(item) ::=<%
$properties_definitions(item)$
%>

g_variable_definitions( v) ::=<%
$if (v.GeneratorType)$
$if (v.IsParameter)$
@Input()
$endif$
let $g_declare_item(v)$
$endif$
%>

g_dataprovider_type_name(data) ::= <%
$if (data.IsCollection)$
    $data.ItemGeneratorType:g_type_name()$
$else$
    $data.GeneratorType:g_type_name()$
$endif$
%>
