<%@ Template Language="C#" TargetLanguage="GX" Description="Selection and Grid Tab Ab Form" %>
<%@ Include Name="Constants.cs" %>
<%@ Include Name="WebFormScript.cs" %>
<%@ Include Name="SearchButton.cs" %>
<%@ Assembly Name="Artech.Patterns.WorkWith" %>
<%@ Assembly Name="Artech.Genexus.Common" %>
<%@ Import Namespace="Artech.Patterns.WorkWith" %>
<%@ Import Namespace="Artech.Patterns.WorkWith.Helpers" %>
<%@ Import Namespace="Artech.Genexus.Common.CustomTypes" %>
<%@ Import Namespace="Artech.Patterns.WorkWithDevices.Copy" %>
<%@ Property Name="Object" Type="Artech.Architecture.Common.Objects.KBObject" %>
<%@ Property Name="Part" Type="Artech.Architecture.Common.Objects.KBObjectPart" %>
<%@ Property Name="Instance" Type="Artech.Patterns.WorkWith.WorkWithInstance" %>
<%@ Property Name="GridObject" Type="Artech.Patterns.WorkWith.IGridObject" %>
<%@ Property Name="Element" Type="Artech.Packages.Patterns.Objects.PatternInstanceElement" %>
<%@ Property Name="IsTabTemplate" Type="System.Boolean" %>
<%@ Property Name="Template" Type="Artech.Genexus.Common.Parts.DefaultFormHelper.FormTemplate" %>

<Part type="<%= PartType.WebForm %>">
	<Source><![CDATA[<%

	WorkWithSettings settings = Instance.Settings;
	Transaction transaction = Instance.Transaction.Transaction;
	bool hasFilters = (GridObject.Filter != null && GridObject.Filter.Attributes.Count > 0);
	int outOfGridActionsCount = GridObject.Actions.StandaloneActions.Count;
	bool hasOutOfGridActions = outOfGridActionsCount > 0;
	bool hasAdvancedBar = (hasFilters && GridObject.Filter.Attributes.Count > 1) || GridObject.Orders.NeedsChoice;
	bool isSelection = GridObject is SelectionElement;
	
	string actionGroupThemeClass = null;
	string gridTheme = settings.Theme.Grid;
	string gridTableClass = Constants.AdvancedContainerFluidClass;
	// Dummy vars
	bool needCurrentPage = false;
	ResponsiveSizes mainTableSizes = Artech.Patterns.WorkWith.Helpers.GridAbstractForm.MainTableResponsiveSizes(hasAdvancedBar, Template, IsTabTemplate);
	ResponsiveSizes gridTableSizes = Artech.Patterns.WorkWith.Helpers.GridAbstractForm.GridTableResponsiveSizes(false, false, false, hasAdvancedBar, Template);
	ResponsiveSizes tableTopSearchSizes = Artech.Patterns.WorkWith.Helpers.GridAbstractForm.TableTopResponsiveSizes(hasAdvancedBar, IsTabTemplate, Template);	
	string mainTableClass = "BodyContainer";//hasAdvancedBar ? Constants.AdvancedContainerFluidClass : Constants.ContainerClass;	
	
	var layout = Artech.Patterns.WorkWith.Helpers.TemplateManagment.CalculateTemplate(transaction);

	bool showCurrentPage = settings.Grid.ShowCurrentPage;
	string cantRowsPerPage = "";
	string pagingMode = "<default>";
	if (isSelection)
	{
		cantRowsPerPage = ((SelectionElement)GridObject).Page;
		string showCurrentPageInstance = ((SelectionElement)GridObject).ShowCurrentPage;
		if (showCurrentPageInstance == "true")
			showCurrentPage = true;
		else
		{
			if (showCurrentPageInstance == "false")
				showCurrentPage = false;
		}
		pagingMode = ((SelectionElement)GridObject).PagingMode;
		if (pagingMode == "<default>")
			pagingMode = Instance.Settings.Grid.PagingMode;
		Object.Description = ((SelectionElement)GridObject).Description;
	}
	
	
%>
<%= WebMultiForm.BeginMultiForm(1) %>
	<%-- Main form --%>
	<%= WebMultiForm.BeginLayoutForm(1) %>
		<%= WebLayout.BeginLayout() %>
			<%= WebLayout.BeginResponsiveTable(mainTableSizes, Constants.MainTable, isSelection ? mainTableClass : Constants.GridTabMainTableClass) %>
				
			<%
			if (hasOutOfGridActions || GridObject.Description != String.Empty || hasFilters)
			{
			%>
				<%= WebLayout.BeginTableRow() %>
					<%= WebLayout.BeginTableCell() %>
						<%= WebLayout.BeginResponsiveTable(tableTopSearchSizes, "TableTop", "TableTopSearch") %>
							<%= WebLayout.BeginTableRow() %>						
								<%
								if (GridObject.Description != String.Empty)
								{
								%>
									<%= WebLayout.BeginTableCell() %>
										<%= WebLayout.TextBlock("TitleText", settings.Theme.Subtitle, GridObject.Description) %>
									<%= WebLayout.EndTableCell() %>
								<%
								}
								if (hasOutOfGridActions)
								{
								%>
									<%= WebLayout.BeginTableCell(null, isSelection ? Constants.ActionsCellClass : Constants.ViewGridActionsCellClass, null, null, "Right", null) %>
										<%= GridObject.Actions.ToActionGroupBlock() %>
									<%= WebLayout.EndTableCell() %>
								<%
								}
								if (hasFilters)
								{
									Dictionary<string, object> filterAttProps = new Dictionary<string, object>();
									// TO DO: Cambiar valor "None" LayoutDataItemElement.LabelPositionValue.None
									filterAttProps[Artech.Patterns.WorkWithDevices.Copy.InstanceAttributes.LayoutDataItem.LabelPosition] = "None";
									filterAttProps[Artech.Patterns.WorkWithDevices.Copy.InstanceAttributes.LayoutDataItem.InviteMessage] = GridObject.Filter.Attributes[0].Description;
								%>
									<%= WebLayout.BeginTableCell(null, "WWFilterCell", null, null, null, null) %> 
										<%= WebLayout.Variable(GridObject.Filter.Attributes[0].Name, GridObject.Filter.Attributes[0].IsDateType ? "DateFilterSearchAttribute" : Constants.FilterAttributeClass, null, null, filterAttProps) %>
									<%= WebLayout.EndTableCell() %>							
								<%
								}
								%>

								<%	
								if (hasAdvancedBar)
								{
								%>							
									<%= WebLayout.BeginTableCell(null, Constants.ToggleCellClass, null, null, "Right", null) %>
										<%= WebLayout.Button(Constants.ToggleButton, "HideFiltersButton", Constants.BtnHideFiltersCaption, "'Toggle'") %>
									<%= WebLayout.EndTableCell() %>
								<%
								}
								%>

							<%= WebLayout.EndTableRow() %>
						<%= WebLayout.EndResponsiveTable() %>
					<%= WebLayout.EndTableCell() %>
				<%= WebLayout.EndTableRow() %>
			<%
			}
			%>
						
			<%	
			if (IsTabTemplate)
			{		
				actionGroupThemeClass  	= "WWViewActions";
				gridTheme				= "ViewGrid";
				gridTableClass			= null;
			}
			%>				
				<%= WebLayout.BeginTableRow() %>

				<%
				// Advanced bar, for orders and filters
				if (hasAdvancedBar)
				{
					uint rows = (uint)((GridObject.Filter.Attributes.Count - 1) + (GridObject.Orders.NeedsChoice ? 1 : 0));
					ResponsiveSizes advancedBarTableSizes = Artech.Patterns.WorkWith.Helpers.GridAbstractForm.AdvancedBarTableResponsiveSizes(rows, Template);
				%>
					<%= WebLayout.BeginTableCell(null, (isSelection) ? Constants.AdvancedBarCellClass : "") %>
						<%= WebLayout.BeginResponsiveTable(advancedBarTableSizes, (isSelection) ? Constants.AdvancedContainerTable : Constants.ViewAdvancedContainerTable, (isSelection) ? Constants.AdvancedBarContainerVisibleClass : Constants.ViewAdvancedBarContainerVisibleClass) %>
						
											
							<%= WebLayout.BeginTableRow() %>
								<%= WebLayout.BeginTableCell(null, null, null, null, "Right", null) %>
									<%= WebLayout.Button("BtnToggleOnTable", "HideFiltersButton", Constants.BtnHideFiltersCaption, "'Toggle'") %>
								<%= WebLayout.EndTableCell() %>
							<%= WebLayout.EndTableRow() %>
												
						
						<%
							Dictionary<string, object> advancedLabelProperties = new Dictionary<string, object>();
							advancedLabelProperties[Artech.Genexus.Common.Properties.HTMLSPAN.Format] = Artech.Genexus.Common.Properties.HTMLSPAN.Format_Values.Html;
							// Orders
							if (GridObject.Orders.NeedsChoice)
							{
						%>
							<%= WebLayout.BeginTableRow() %>
								<%= WebLayout.BeginTableCell() %>
									<%= WebLayout.BeginResponsiveTable(Artech.Patterns.WorkWith.Helpers.AbstractForm.SimpleResponsiveSizesHelper(2, 1), Constants.OrderByContainerTable, Constants.AdvancedBarContainerItemClass) %>
										<%= WebLayout.BeginTableRow() %>
											<%= WebLayout.BeginTableCell() %>
												<%= WebLayout.TextBlock("LblOrderBy", Constants.OrderByLabelClass, settings.Labels.OrderedBy, advancedLabelProperties) %>
											<%= WebLayout.EndTableCell() %>
										<%= WebLayout.EndTableRow() %>
										<%= WebLayout.BeginTableRow() %>
											<%= WebLayout.BeginTableCell() %>
												<%= WebLayout.BeginResponsiveTable(Artech.Patterns.WorkWith.Helpers.GridAbstractForm.OrdersTableResponsiveSizes((uint)GridObject.Orders.Count), Constants.OrderByContainerTable2, Constants.OrdersTableClass) %>
													<%= WebLayout.BeginTableRow() %>
														<%
														int i = 1;
														foreach (OrderElement orderElement in GridObject.Orders)
														{
															string className = (i == 1) ? Constants.OrderItemSelectedClass : Constants.OrderItemClass;
														%>
															<%= WebLayout.BeginTableCell(null, Constants.OrdersCellClass) %>
																<%= WebLayout.TextBlock("OrderBy" + (i++).ToString(), className, orderElement.Name) %>
															<%= WebLayout.EndTableCell() %>
															<%
														}
														%>
													<%= WebLayout.EndTableRow() %>
												<%= WebLayout.EndResponsiveTable() %>
											<%= WebLayout.EndTableCell() %>
										<%= WebLayout.EndTableRow() %>
									<%= WebLayout.EndResponsiveTable() %>
								<%= WebLayout.EndTableCell() %>
							<%= WebLayout.EndTableRow() %>
		<%
		}	
		// Filters
		if (hasFilters && GridObject.Filter.Attributes.Count > 1)
		{
			for (int i = 1; i < GridObject.Filter.Attributes.Count; i++)
			{
				FilterAttributeElement filterVar = GridObject.Filter.Attributes[i];
				Dictionary<string, object> filterAttProps = new Dictionary<string, object>();
				// TO DO: Cambiar valor "None" LayoutDataItemElement.LabelPositionValue.None
				filterAttProps[Artech.Patterns.WorkWithDevices.Copy.InstanceAttributes.LayoutDataItem.LabelPosition] = "None";
				
				if (filterVar.IsDateType)
					filterAttProps[Artech.Genexus.Common.Properties.HTMLATT.DisplayFlat] = true;

		%>
							<%= WebLayout.BeginTableRow() %>
								<%= WebLayout.BeginTableCell() %>
									<%= WebLayout.BeginResponsiveTable(Artech.Patterns.WorkWith.Helpers.AbstractForm.SimpleResponsiveSizesHelper(2, 1), String.Format("{0}FilterContainer", filterVar.Name), Constants.AdvancedBarContainerItemClass) %>
										
										<%=WebLayout.BeginTableRow() %>
											<%= WebLayout.BeginTableCell() %>
												<%= WebLayout.TextBlock(String.Format("Lbl{0}Filter", filterVar.Name), filterVar.IsDateType ? Constants.DateFilterLabelClass : Constants.FilterLabelClass, filterVar.Description, advancedLabelProperties) %>
											<%= WebLayout.EndTableCell() %>
										<%=WebLayout.EndTableRow() %>
										
										<%= WebLayout.BeginTableRow() %>
											<%= WebLayout.BeginTableCell(null, Constants.FilterCellClass) %>
												<%= WebLayout.Variable(filterVar.Name, Constants.FilterComboAttributeClass, null, null, filterAttProps) %>
											<%= WebLayout.EndTableCell() %>
										<%= WebLayout.EndTableRow() %>
									<%= WebLayout.EndResponsiveTable() %>
								<%= WebLayout.EndTableCell() %>
							<%= WebLayout.EndTableRow() %>
		<%
			}
		}
		%>				<%= WebLayout.EndResponsiveTable() %>
					<%= WebLayout.EndTableCell() %>


					<%
					}
					string gridCellClass = null;
					if (hasAdvancedBar)
						gridCellClass = Constants.GridCellClass;
					else
					{
						gridCellClass = Constants.ViewGridCellAdvancedClass;
						if (!isSelection)
							gridCellClass = Constants.ViewGridCellClass;
					}
					Dictionary<string, object> gridCustomProperties = new Dictionary<string, object>();	

					if (cantRowsPerPage != "")
					{
						gridCustomProperties.Add(Properties.HTMLSFL.Rows, cantRowsPerPage);
		
						if (pagingMode == "Infinite scrolling")
							gridCustomProperties.Add(Properties.HTMLSFL.Paging, Properties.HTMLSFL.Paging_Values.InfiniteScrolling);	
						else
							gridCustomProperties.Add(Properties.HTMLSFL.Paging, Properties.HTMLSFL.Paging_Values.OnePageAtATime);	
	
					}	
					%>

					<%= WebLayout.BeginTableCell(Constants.GridCellName, gridCellClass) %>
						
						<%= WebLayout.BeginResponsiveTable(gridTableSizes, Constants.GridTable, gridTableClass) %>
							<%= WebLayout.BeginTableRow() %>
								<%= WebLayout.BeginTableCell() %>
									<%= WebLayout.ErrorViewer("ErrorViewer") %>
								<%= WebLayout.EndTableCell() %>
							<%= WebLayout.EndTableRow() %>


							<%= WebLayout.BeginTableRow() %>
								<%= WebLayout.BeginTableCell() %>								
									<%= WebLayout.BeginSimpleGrid(Constants.GridName, gridTheme, null, GridObject.Orders.Condition, gridCustomProperties) %>

										<%
										if (GridObject.Actions.MultiRowActions.Count > 0)
										{
											// Checkbox is first column.
										%>
										<%= WebLayout.SimpleGridVariable("Selected", null, "") %>
										<%
										}

										// Then, grid attributes and variables.
										if (GridObject.Attributes != null)
										{
											foreach (IAttributesItem gridItem in GridObject.Attributes)
											{
												AttributeElement att = gridItem as AttributeElement;
										%>
												<%= WebFormScript.GridColumn(gridItem, true, (att != null) ? att.IsDescriptionAttribute : false) %>
										<%
											}
										}

										foreach (ActionElement inGridAction in GridObject.Actions.GridActions)
										{
											// InGrid actions go next.
											if (inGridAction != GridObject.Actions.Display && inGridAction != GridObject.Actions.Update && inGridAction != GridObject.Actions.Delete)
											{
										%>
												<%= inGridAction.ToAbstractMarkup() %>
										<%
											}
										}
	
										if (GridObject.Actions.Display != null)
										{
										%>
											<%= GridObject.Actions.Display.ToAbstractMarkup() %>
										<%
										}
										if (GridObject.Actions.Update != null)
										{
										%>
											<%= GridObject.Actions.Update.ToAbstractMarkup() %>
										<%
										}
										if (GridObject.Actions.Delete != null)
										{
										%>
											<%= GridObject.Actions.Delete.ToAbstractMarkup() %>
										<%
										}
										%>
									<%= WebLayout.EndSimpleGrid() %>
								<%= WebLayout.EndTableCell() %>
							<%= WebLayout.EndTableRow() %>
							
							<%
							if (isSelection && showCurrentPage)
							{
							%>
								<%= WebLayout.BeginTableRow("24", "WWPagingFooterRow") %>
									<%= WebLayout.BeginTableCell("WWPagingFooterCell", "WWPagingFooterCell", null, null, "Center", null)%>
										<%= WebLayout.TextBlock("GridPageCount", "TextActionAttribute", "Page Count") %>
									<%= WebLayout.EndTableCell() %>
								<%= WebLayout.EndTableRow() %>				
							<%
							}
							%>
							
						<%= WebLayout.EndResponsiveTable() %>					
					<%= WebLayout.EndTableCell() %>
				<%= WebLayout.EndTableRow() %>

<%-- "Hidden" attributes - sometimes necessary for GX to infer the correct navigation scheme. --%>
<%
	foreach (ParameterElement parameter in GridObject.Parameters)
	{
		if (!Variables.IsVariableName(parameter.Name) && 
			GridObject.Attributes != null &&
			GridObject.Attributes.FindAttribute(parameter.Name) == null &&
			parameter.AttributeExistsInModel(Object.Model))
		{
			// Always use edits (they are hidden).
%>
				<%= WebLayout.BeginTableRow() %>
					<%= WebLayout.BeginTableCell() %>
						<%= WebFormScript.HiddenAttribute(parameter.Name, true) %>
					<%= WebLayout.EndTableCell() %>
				<%= WebLayout.EndTableRow() %>
<%
		}
	}
%>
			<%= WebLayout.EndResponsiveTable() %>

<%-- Action group --%>
			<%= WebLayout.BeginActionGroups() %>
<%
	if (hasOutOfGridActions)
	{
		if (outOfGridActionsCount > 1)
		{
%>		
				<%= GridObject.Actions.ToActionGroupMenu(2, actionGroupThemeClass) %>
				
<%		
		}
		else
		{
%>				
				<%= GridObject.Actions.ToActionGroup(actionGroupThemeClass) %>
<%
		}
	}
%>
			<%= WebLayout.EndActionGroups() %>
		<%= WebLayout.EndLayout() %>
	<%= WebMultiForm.EndLayoutForm() %>
<%= WebMultiForm.EndMultiForm() %>]]>
	</Source>
</Part>