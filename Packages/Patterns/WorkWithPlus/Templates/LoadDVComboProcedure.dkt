<%@ Template Language="C#" TargetLanguage="GX" Description="Audit Procedure" %>
<%@ Include Name="Constants.cs" %>
<%@ Assembly Name="DVelop.Patterns.WorkWithPlus" %>
<%@ Import Namespace="DVelop.Patterns.WorkWithPlus" %>
<%@ Import Namespace="DVelop.Patterns.WorkWithPlus.Helpers" %>
<%@ Import Namespace="Artech.Common.Helpers.Strings" %>
<%@ Import Namespace="Artech.Genexus.Common.Objects" %>
<%@ Import Namespace="Artech.Genexus.Common.Parts" %>
<%@ Property Name="Object" Type="Artech.Architecture.Common.Objects.KBObject" %>
<%@ Property Name="Part" Type="Artech.Architecture.Common.Objects.KBObjectPart" %>
<%@ Property Name="Instance" Type="Artech.Packages.Patterns.Objects.PatternInstance" %>
<%@ Property Name="Element" Type="Artech.Packages.Patterns.Objects.PatternInstanceElement" %>
<%@ SubTemplate Name="SubCheckSecurity" File="SubCheckSecurity.dkt" MergeProperties="True"%>
<%@ SubTemplate Name="SubLoadContext" File="SubLoadContext.dkt" MergeProperties="True"%>

<%
	WorkWithPlusInstance wwInstance = WorkWithPlusInstance.Load(Instance);
	WorkWithPlusSettings settings = wwInstance.Settings;
	
	bool addSecurityEndIf = false;
	string mainIndentation = "";
	SettingsSecurityElement securityElement = wwInstance.Settings.Security;
	List<IWorkWithPlusInstanceElement> atts = LoadDVComboProcedureHelper.GetAttributesWithDVCombo(wwInstance, true);
	bool isTrnInstanceAndIncludeObjName = (wwInstance.ComboInfo.IncludeObjName && wwInstance.IsTransactionInstance());
	if (securityElement.IsTypeAdvanced() && !isTrnInstanceAndIncludeObjName)
	{
		IGeneratedObject obj;
		if (wwInstance.IsTransactionInstance())
		{
			obj = wwInstance.Transaction;
		}
		else if (!wwInstance.IsTransactionBasedInstance())
		{
			obj = wwInstance.WPRoot;
		}
		else
		{
			obj = WorkWithPlusInstance.GetParentIGeneratedObject(atts[0]);
			if (obj is ITabElement)
			{
				obj = (IGeneratedObject)((IWorkWithPlusInstanceElement)obj).Parent.Parent;
			}
		}
		string secFuntionKey =  obj.GetSecurityFunctionKey();
		if (secFuntionKey != null && secFuntionKey.Trim().Length > 0)
		{
			addSecurityEndIf = true;
			mainIndentation = "	";
%>
<%@ CallSubTemplate SubCheckSecurity Settings='settings' SecurityFunction='secFuntionKey' IndentLevel='0' DoNotRedirect='true' %>

If &IsAuthorized

<%
		}
	}
%>
<%@ CallSubTemplate SubLoadContext Settings='settings' IndentLevel='addSecurityEndIf ? 1 : 0' IndentLevelChar='"\t"' %>

<%
	SettingsTemplateElement template = wwInstance.GetAppropiateTemplate();
	if (wwInstance.ComboInfo.HasDynamicLoad)
	{
%>

<%= mainIndentation %>&MaxItems = <%= (template.DynamicLoadMaxItems - 1).ToString() %>
<%
	}
	
%>
<%= mainIndentation %>Do Case
<%
	bool secIsAdvancedOrGAM = securityElement.IsAdvancedOrGAM();
	foreach (IItemWithControlInfo att in atts)
	{
		string objName = "", secCheck = "";
		if (wwInstance.ComboInfo.IncludeObjName)
		{
			IGeneratedObject iGenObj = WorkWithPlusInstance.GetParentIGeneratedObject(att);
			objName = iGenObj.ObjectName;
			objName = objName.Substring(objName.LastIndexOf('.') + 1) + "_";
			if (secIsAdvancedOrGAM && isTrnInstanceAndIncludeObjName)
			{
				secCheck = WorkWithPlusInstance.GetObjectSecurityFunctionKey(iGenObj, wwInstance);
				if (secCheck != "")
				{
					secCheck = " AND " + securityElement.GetAdvancedSecurity().CheckByFunctionKeyName + "(!'" + secCheck + "')";
				}
			}
		}
		string attName = (att is IGridItem ? att.GetComboControlName().TrimStart('&') : att.GetComboControlName().Substring(6));
%>
<%= mainIndentation %>	Case &ComboName = !'<%= objName + attName %>'<%= secCheck %><%= att is AttributeElement && ((AttributeElement)att).AutoDVelopComboTable != null ? " //Generated by 'Auto DVelop Combo' (" + ((AttributeElement)att).AutoDVelopComboTable + ")": "" %>
<%
		if (secIsAdvancedOrGAM && (att is IAttributesItem && ((IAttributesItem)att).HasShowSecurityCheck() || att is FilterAttributeGeneralElement && ((FilterAttributeGeneralElement)att).SecFuntionKey != ""))
		{
%>
<%= mainIndentation %>		If <%= securityElement.GetAdvancedSecurity().CheckByFunctionKeyName %>(!'<%= att is IAttributesItem ? ((IAttributesItem)att).ShowSecFuntionKey.Trim() : ((FilterAttributeGeneralElement)att).SecFuntionKey.Trim() %>')
<%= mainIndentation %>			Do 'LoadComboItems_<%= objName + attName %>'
<%= mainIndentation %>		EndIf
<%
		}
		else
		{
%>
<%= mainIndentation %>		Do 'LoadComboItems_<%= objName + attName %>'
<%
		}
	}
%>
<%= mainIndentation %>EndCase
<%
	if (addSecurityEndIf)
	{
%>

EndIf
<%
	}

	foreach (IItemWithControlInfo attItem in atts)
	{
		string objName = "";
		if (wwInstance.ComboInfo.IncludeObjName)
		{
			objName = "." + WorkWithPlusInstance.GetParentIGeneratedObject(attItem).ObjectName;
			objName = objName.Substring(objName.LastIndexOf('.') + 1) + "_";
		}
		string comboName = (attItem is IGridItem ? attItem.GetComboControlName().TrimStart('&') : attItem.GetComboControlName().Substring(6));
%>
	
Sub 'LoadComboItems_<%= objName + comboName %>'
<% 
		string indent = "";
		bool isTrnInstanceAttItem = (wwInstance.IsTransactionInstance() && (!wwInstance.ComboInfo.IncludeObjName || WorkWithPlusInstance.ParentIsTransaction(attItem)));
		bool isFilterDynWithDsc = attItem.ControlLoadDynamically && attItem is FilterAttributeGeneralElement && (attItem.ControlAllowMultipleSelection || LoadDVComboProcedureHelper.HasDescription(attItem));
		if (isTrnInstanceAttItem && attItem.ControlLoadDynamically)
		{
			indent = "\t";
%>
	If &IsDynamicCall
<%
		}
		else if (isFilterDynWithDsc && attItem.ControlInputDS != AttributeElement.ControlInputDSValue.DataProvider)
		{
			indent = "\t";
%>
	If &TrnMode <> !'GET_DSC'<%= attItem.ControlAllowMultipleSelection || attItem.Style != "Regular" ? " AND &TrnMode <> !'GET_DSC_TEXT'" : "" %>
<%
		}
		bool getDscAdded = false;
		if (wwInstance.ComboInfo.HasDynamicGridItemWithDsc
			&& attItem.ControlLoadDynamically
			&& WorkWithPlusInstance.IsInGrid(attItem) && attItem.ControlInputDS == "Attributes"
			&& attItem.ControlInputDescription != null 
			&& attItem.ControlInputDescription.Name != attItem.ControlInputValue.Name)
		{
			getDscAdded = true;
%>
<%= indent %>	If &TrnMode = !'GET_DSC'
<%= indent %>		&ValuesCollection.FromJson(&SearchTxt)
<%= indent %>		&DscsCollection = new()
<%= indent %>		For &ValueItem in &ValuesCollection
<%= Indentation.Indent(TableAttributeElement.GetAssignVarFromStringValue("&" + attItem.ControlInputValue.Name + "_Filter", attItem.ControlInputValue.Type, TableAttributeElement.IsBasedOnEnumerated(attItem.ControlInputValue), "&ValueItem"), indent.Length + 3) %>
<%= indent %>			For Each<%= attItem is AttributeElement && ((AttributeElement)attItem).AutoDVelopComboTrnLevel != null ? " " + ((AttributeElement)attItem).AutoDVelopComboTrnLevel : "" %>
<%= indent %>				Where <%= attItem.ControlInputValue.Name %> = &<%= attItem.ControlInputValue.Name %>_Filter
<%
						if (attItem.Conditions.Trim() != "")
						{
%>
<%= indent %>				Where <%= attItem.Conditions.TrimEnd(' ', ';') %>
<%
						}
						if (attItem.Style == "Regular")
						{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&DscsCollection.Add({0})", attItem.ControlInputDescription, false, wwInstance), indent.Length + 4) %>
<%
						}
						else
						{
							int styleAtts = DVelop.Patterns.WorkWithPlus.Custom.DVComboStylesCustomType.GetNumberOfAttributes(settings, attItem.Style);
%>
<%= indent %>				&ComboTitles = new()
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.ControlInputDescription, false, wwInstance), indent.Length + 4) %>
<%
							if (styleAtts >= 2)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc2, false, wwInstance), indent.Length + 4) %>
<%
							}
							if (styleAtts >= 3)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc3, false, wwInstance), indent.Length + 4) %>
<%
							}
%>
<%= indent %>				&DscsCollection.Add(&ComboTitles.ToJson())
<%
						}
%>
<%= indent %>				Exit
<%= indent %>			When none
<%= indent %>				&DscsCollection.Add('')
<%= indent %>			EndFor
<%= indent %>		EndFor
<%= indent %>		&Combo_DataJson = &DscsCollection.ToJson()
<%= indent %>	Else
<%
			indent += "\t";
		}
		Artech.Genexus.Common.eDBType dpItemType, dpTitleType;
		Artech.Genexus.Common.eDBType ? dpDsc2Type, dpDsc3Type;
		bool isDPDefault;
%>
<%= Indentation.Indent(LoadDVComboProcedureHelper.GetComboOptionsLoadCode(wwInstance, attItem, out isDPDefault, out dpItemType, out dpTitleType, out dpDsc2Type, out dpDsc3Type), indent.Length) %>
<%
		if (isFilterDynWithDsc && attItem.ControlInputDS == AttributeElement.ControlInputDSValue.DataProvider)
		{
			indent = "\t";
%>
	If &TrnMode <> !'GET_DSC'<%= attItem.ControlAllowMultipleSelection || attItem.Style != "Regular" ? " AND &TrnMode <> !'GET_DSC_TEXT'" : "" %>
<%
		}
		if (wwInstance.ComboInfo.HasDynamicLoad && attItem.ControlInputDS != "Fixed values")
		{
%>
<%= indent %>	&Combo_DataJson = &Combo_Data.ToJson()
<%
		}
		if (getDscAdded)
		{
%>
<%= indent %>EndIf
<%
			indent = indent.Substring(1);
		}
		if (isTrnInstanceAttItem || isFilterDynWithDsc)
		{
			if (!WorkWithPlusInstance.IsInGrid(attItem))
			{
			indent = "";
			if (attItem.ControlLoadDynamically)
			{
				indent = "\t";
%>
	Else
<%
			}
			if (isTrnInstanceAttItem && attItem is TrnTableAttributeElement)
			{
%>
<%= indent %>	If &TrnMode <> TrnMode.Insert<%= !attItem.ControlLoadDynamically && ((TrnTableAttributeElement)attItem).Prompt != null ? " AND &TrnMode <> !'NEW'" : "" %>
<%
				bool isDynAndIsContextAtt = attItem.ControlLoadDynamically && attItem.ControlInputDS == "Attributes"  && attItem.ControlInputDescription != null
												&& wwInstance.Transaction.UseTransactionContextMerged() && DVelop.Patterns.WorkWithPlus.Object_Utilities.TransactionUtilities.IsContextAttribute(wwInstance.Transaction.Transaction, attItem.Name);
				if (isDynAndIsContextAtt)
				{
%>
<%= indent %>		If &TrnMode <> !'GET'
<%
					indent += "\t";
				}
%>
<%= indent %>		For Each <%= wwInstance.Transaction.Transaction.Name %>
<%
				foreach (Artech.Genexus.Common.Parts.TransactionAttribute trnAtt in wwInstance.Transaction.Transaction.Structure.Root.PrimaryKey)
				{
%>
<%= indent %>			Where <%= trnAtt.Name %> = &<%= trnAtt.Name %>
<%
				}
				if (attItem is TrnTableAttributeElement && attItem.ControlInputCatValue != null && LoadDVComboProcedureHelper.ControlInputCatValueIsPartOfKey(wwInstance.Transaction.Transaction, attItem.ControlInputCatValue))
				{
%>

<%= indent %>			If not <%= attItem.ControlInputValue.Name %>.IsEmpty()
<%= indent %>				&ComboKeys = new()
<%= indent %>				&ComboKeys.Add(<%= TableAttributeElement.GetIAttributeItemStringValue(attItem.ControlInputCatValue, false) %>)
<%= indent %>				&ComboKeys.Add(<%= TableAttributeElement.GetIAttributeItemStringValue(attItem.ControlInputValue, false) %>)
<%= indent %>				&SelectedValue = &ComboKeys.ToJson()
<%= indent %>			EndIf
<%
				}
				else
				{
%>

<%= indent %>			&SelectedValue = <%= TableAttributeElement.GetIAttributeItemStringValue(attItem.Name, attItem.eDBType, true) %>
<%
				}
				bool auxSuffixNeeded = false;
				if (attItem.ControlLoadDynamically)
				{
					if (attItem.ControlInputDS == "Attributes" && (attItem.ControlInputDescription != null || attItem.Style != "Regular"))
					{
						if (attItem.Style == "Regular" || attItem.ControlInputValue.Name != attItem.Name)
						{
							if (attItem.ControlInputValue.Name == attItem.Name)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&SelectedText = {0}", attItem.ControlInputDescription, true, wwInstance), indent.Length + 3) %>
<%
							}
							else
							{
								if (((AttributeElement)attItem).AutoDVelopComboTable != null && attItem.Conditions != "")
								{
									foreach (string condAttName in attItem.ConditionDynAtts.Attributes)
									{
%>
<%= indent %>			&Cond_Aux_<%= condAttName %> = <%= condAttName %>
<%
									}
								}
								Artech.Genexus.Common.Parts.TransactionAttribute trnAtt = wwInstance.Transaction.Transaction.Structure.Root.GetAttribute(attItem.ControlInputValue.Name);
								auxSuffixNeeded = (trnAtt != null && trnAtt.IsKey);
								if (!attItem.ControlAllowMultipleSelection)
								{
%>
<%= indent %>			&<%= attItem.ControlInputValue.Name + (auxSuffixNeeded ? "Aux" : "") %> = <%= attItem.Name %>
<%
								}
							}
						}
						else
						{
							int styleAtts = DVelop.Patterns.WorkWithPlus.Custom.DVComboStylesCustomType.GetNumberOfAttributes(settings, attItem.Style);
%>
<%= indent %>			&ComboTitles = new()
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.ControlInputDescription, false, wwInstance), indent.Length + 3) %>
<%
							if (styleAtts >= 2)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc2, false, wwInstance), indent.Length + 3) %>
<%
							}
							if (styleAtts >= 3)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc3, false, wwInstance), indent.Length + 3) %>
<%
							}
%>
<%= indent %>			&SelectedText = &ComboTitles.ToJson()
<%
						}
					}
					else
					{
%>
<%= indent %>			&SelectedText = &SelectedValue
<%
					}
					if (attItem.ControlInputDS == AttributeElement.ControlInputDSValue.DataProvider && attItem.ControlInputDPDescription != "")
					{
%>
<%= Indentation.Indent(LoadDVComboProcedureHelper.GetLoadDPDescription(attItem, comboName, isDPDefault, dpItemType, dpTitleType, dpDsc2Type, dpDsc3Type), indent.Length + 3) %>
<%
					}
				}
%>
<%= indent %>		EndFor
<%
				if (!attItem.ControlLoadDynamically && attItem.ControlInputDS == AttributeElement.ControlInputDSValue.DataProvider && attItem.ControlInputDPDescription != "")
				{
%>
<%= indent %>		If &TrnMode = !'GET_DSC'
<%= Indentation.Indent(LoadDVComboProcedureHelper.GetLoadDPDescription(attItem, comboName, isDPDefault, dpItemType, dpTitleType, dpDsc2Type, dpDsc3Type), indent.Length + 3) %>
<%= indent %>		EndIf
<%
				}
				if (isDynAndIsContextAtt)
				{
					indent = indent.Substring(1);
%>
<%= indent %>		Else
<%= indent %>			<%= TableAttributeElement.GetAssignVarFromStringValue("&" + attItem.ControlInputValue.Name + (auxSuffixNeeded ? "Aux" : ""), attItem.ControlInputValue.Type, TableAttributeElement.IsBasedOnEnumerated(attItem.ControlInputValue), "&SearchTxt") %>
<%
					if (((AttributeElement)attItem).AutoDVelopComboTable != null && attItem.ControlInputValue.Name != attItem.Name && attItem.Conditions != "")
					{
						foreach (string condAttName in attItem.ConditionDynAtts.Attributes)
						{
%>
<%= indent %>			&Cond_Aux_<%= condAttName %> = &Cond_<%= condAttName %>
<%
						}
					}
					if (attItem.ControlInputValue.Name != attItem.Name)
					{
%>
<%= indent %>		EndIf
<%
					}
				}
				if (isDynAndIsContextAtt || attItem.ControlLoadDynamically && attItem.ControlInputDS == "Attributes" && attItem.ControlInputDescription != null)
				{
					if (attItem.ControlInputValue.Name != attItem.Name || isDynAndIsContextAtt)
					{
						if (attItem.ControlInputValue.Name == attItem.Name)
						{
							indent += "\t";
						}
						if (attItem.ControlAllowMultipleSelection)
						{
%>
<%= indent %>		&SelectedValueCol.FromJson(&SelectedValue)
<%= indent %>		For &SelectedValue in &SelectedValueCol
<%= indent %>			<%= TableAttributeElement.GetAssignVarFromStringValue("&" + attItem.ControlInputValue.Name + (auxSuffixNeeded ? "Aux" : ""), attItem.ControlInputValue.Type, TableAttributeElement.IsBasedOnEnumerated(attItem.ControlInputValue), "&SelectedValue") %>
<%
							indent += "\t";
						}
%>
<%= indent %>		For Each<%= attItem is AttributeElement && ((AttributeElement)attItem).AutoDVelopComboTrnLevel != null ? " " + ((AttributeElement)attItem).AutoDVelopComboTrnLevel : "" %>
<%= indent %>			Where <%= attItem.ControlInputValue.Name %> = &<%= attItem.ControlInputValue.Name + (auxSuffixNeeded ? "Aux" : "") %>
<%
						if (((AttributeElement)attItem).AutoDVelopComboTable != null && attItem.Conditions != "")
						{
%>
<%= indent %>			Where <%= attItem.ControlInputValue.Name != attItem.Name ? attItem.Conditions.Replace("&Cond_", "&Cond_Aux_") : attItem.Conditions %>
<%
						}
						if (attItem.Style == "Regular")
						{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&SelectedText = {0}", attItem.ControlInputDescription, false, wwInstance), indent.Length + 3) %>
<%
						}
						else
						{
							int styleAtts = DVelop.Patterns.WorkWithPlus.Custom.DVComboStylesCustomType.GetNumberOfAttributes(settings, attItem.Style);
%>
<%= indent %>			&ComboTitles = new()
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.ControlInputDescription, false, wwInstance), indent.Length + 3) %>
<%
							if (styleAtts >= 2)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc2, false, wwInstance), indent.Length + 3) %>
<%
							}
							if (styleAtts >= 3)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc3, false, wwInstance), indent.Length + 3) %>
<%
							}
%>
<%= indent %>			&SelectedText = &ComboTitles.ToJson()
<%
						}
						if (attItem.ControlAllowMultipleSelection)
						{
%>
<%= indent %>			&SelectedTextCol.Add(&SelectedText)
<%
						}
%>
<%= indent %>			Exit
<%= indent %>		EndFor
<%
						if (attItem.ControlAllowMultipleSelection)
						{
							indent = indent.Substring(1);
%>
<%= indent %>		EndFor
<%= indent %>		&SelectedValue = &SelectedValueCol.ToJson()
<%= indent %>		&SelectedText = &SelectedTextCol.ToJson()
<%
						}
						if (attItem.ControlInputValue.Name == attItem.Name)
						{
							indent = indent.Substring(1);
%>
<%= indent %>		EndIf
<%
						}
					}
				}
				Artech.Genexus.Common.Parts.TransactionAttribute trnAttItem = wwInstance.Transaction.Transaction.Structure.Root.GetAttribute(attItem.Name);
				if (trnAttItem != null && trnAttItem.IsKey)
				{
%>
<%= indent %>	Else
<%= indent %>		If <%= !attItem.ControlLoadDynamically && ((TrnTableAttributeElement)attItem).Prompt != null ? "&TrnMode = TrnMode.Insert AND " : "" %>Not &<%= attItem.Name %>.IsEmpty()
<%= indent %>			&SelectedValue = <%= TableAttributeElement.GetIAttributeItemStringValue("&" + attItem.Name, attItem.eDBType, false) %>
<%
					if (attItem.ControlLoadDynamically)
					{
					if (attItem.ControlInputDescription != null)
					{
%>
<%= indent %>			For Each<%= attItem is AttributeElement && ((AttributeElement)attItem).AutoDVelopComboTrnLevel != null ? " " + ((AttributeElement)attItem).AutoDVelopComboTrnLevel : "" %>
<%= indent %>				Where <%= attItem.ControlInputValue.Name %> = &<%= attItem.Name %>
<%
						if (((AttributeElement)attItem).AutoDVelopComboTable != null && attItem.Conditions != "")
						{
%>
<%= indent %>				Where <%= attItem.ControlInputValue.Name != attItem.Name ? attItem.Conditions.Replace("&Cond_", "&Cond_Aux_") : attItem.Conditions %>
<%
						}
						if (attItem.Style == "Regular")
						{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&SelectedText = {0}", attItem.ControlInputDescription, false, wwInstance), indent.Length + 4) %>
<%
						}
						else
						{
							int styleAtts = DVelop.Patterns.WorkWithPlus.Custom.DVComboStylesCustomType.GetNumberOfAttributes(settings, attItem.Style);
%>
<%= indent %>				&ComboTitles = new()
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.ControlInputDescription, false, wwInstance), indent.Length + 4) %>
<%
							if (styleAtts >= 2)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc2, false, wwInstance), indent.Length + 4) %>
<%
							}
							if (styleAtts >= 3)
							{
%>
<%= Indentation.Indent(TableAttributeElement.GetIAttributeItemStringValueDescription("&ComboTitles.Add({0})", attItem.StyleDsc3, false, wwInstance), indent.Length + 4) %>
<%
							}
%>
<%= indent %>				&SelectedText = &ComboTitles.ToJson()
<%
						}
%>
<%= indent %>				Exit
<%= indent %>			EndFor
<%
					}
					else
					{
%>
<%= indent %>			&SelectedText = &SelectedValue
<%
					}
					}
%>
<%= indent %>		EndIf
<%
				}
%>
<%= indent %>	EndIf
<%
			}
			else
			{
%>
<%= Indentation.Indent(LoadDVComboProcedureHelper.GetComboOptionsLoadVariableInitialValueCode(attItem), attItem.ControlLoadDynamically ? 1 : 0) %>
<%
				if (isTrnInstanceAttItem && attItem.ControlAllowMultipleSelection)
				{
%>
<%= indent %>	&SelectedValue = &SelectedValueCol.ToJson()
<%
					if (attItem.ControlLoadDynamically)
					{
%>
<%= indent %>	&SelectedText = &SelectedTextCol.ToJson()
<%
					}
				}
			}
			}
			if (attItem.ControlLoadDynamically)
			{
%>
	EndIf
<%
			}
		}
%>

EndSub

<%
	}
%>
