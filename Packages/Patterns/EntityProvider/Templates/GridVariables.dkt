<%@ Template Language="C#" TargetLanguage="GX" Description="Selection and Grid Tab Variables" %>
<%@ Include Name="Constants.cs" %>
<%@ Assembly Name="Concepto.Patterns.EntityProvider" %>
<%@ Import Namespace="Concepto.Patterns.EntityProvider" %>
<%@ Import Namespace="Concepto.Patterns.EntityProvider.Helpers" %>
<%@ Property Name="Object" Type="Artech.Architecture.Common.Objects.KBObject" %>
<%@ Property Name="Part" Type="Artech.Architecture.Common.Objects.KBObjectPart" %>
<%@ Property Name="Instance" Type="Concepto.Patterns.EntityProvider.EntityProviderInstance" %>
<%@ Property Name="GridObject" Type="Concepto.Patterns.EntityProvider.IGridObject" %>
<%@ SubTemplate Name="SubStandardVariables" File="SubStandardVariables.dkt" MergeProperties="True"%>

<Part type="<%= PartType.Variables %>">
<%
	EntityProviderSettings settings = Instance.Settings;
	VariablesWrapper variables = new VariablesWrapper();
%>

<%@ CallSubTemplate SubStandardVariables Settings='settings' %>

<%
	bool needGridState = settings.Grid.SaveGridState; //Add an implicit Reference to Genexus\Common\GridState
	bool needTrnContext = (settings.Template.UseTransactionContext);

	// Variables for parameters.
	foreach (ParameterElement parameter in GridObject.Parameters)
	{
%>
	<%= parameter.DefineVariable(variables) %>
<%
	}

	// Grid state and transaction context variables.
	if (needGridState || needTrnContext)
	{
%>
	<%= variables.Extended("Session", null, "WebSession") %>
	<%= variables.Extended("HTTPRequest", null, "HttpRequest") %>
<%
		if (needGridState)
		{
			Guid GridStateGuid = new Guid("84f0bcb7-d38f-4a22-a227-43e417263ac3");
			EntityKey sdtGridStateKey = Object.Model.Objects.GetKey(GridStateGuid);
			bool needLegacyGridState = GridObject is SelectionElement && sdtGridStateKey != null && Object.Parts.HasDirtyDefaults();
			if (needLegacyGridState)
			{
%>
	<%= variables.Sdt("GridState", "GridState") %>
	<%= variables.Sdt("GridStateFilterValue", "GridState.FilterValue") %>
	<%= variables.Basic("GridPageCount", null, eDBType.NUMERIC, 8, 0, true) %>
	<%= variables.Sdt("CoreGridState", "GridState, GeneXus.Common") %>
<%		
			}
			else
			{
%>
	<%= variables.Sdt("GridState", "GridState, GeneXus.Common") %>
<%			}
		}
		
		if (needTrnContext)
		{
%>
	<%= variables.Sdt("TrnContext", "TransactionContext") %>
	<%= variables.Sdt("TrnContextAtt", "TransactionContext.Attribute") %>
<%
		}
	}

	// Variables included in the grid.
	if (GridObject.Attributes != null)
	{
		foreach (VariableElement var in GridObject.Attributes.Variables)
		{
%>
	<%= variables.BasedOnDomain(var.Name, var.Domain) %>
<%
		}
	}

	// Variable for order choice.
	if (GridObject.Orders.NeedsChoice)
	{
		Dictionary<string, object> controlProperties = new Dictionary<string, object>();
		controlProperties["ControlType"] = "Combo Box";
		controlProperties["ControlValues"] = GridObject.Orders.ComboValues;
	
%>
	<%= variables.Basic(OrdersElement.OrderVariable, null, eDBType.NUMERIC, 4, 0, false, controlProperties) %>
<%	
	}

	// Variables for filter.
	if (GridObject.Filter != null)
	{
%>
	<%= GridObject.Filter.DefineVariables(variables) %>
<%
	}

	// Variables for multi-row actions.
	if (GridObject.Actions.MultiRowActions.Count > 0)
	{
%>
	<%= variables.Basic("Selected", null, eDBType.Boolean) %>
	<%= variables.Sdt("SelectedRows", settings.Objects.GridSdtName(GridObject)) %>
	<%= variables.Sdt("SelectedRow", settings.Objects.GridSdtItemName(GridObject)) %>
<%
	}
	
	// Variables for exporting to Excel.
	if (GridObject.Actions != null)
	{
		foreach (ActionElement action in GridObject.Actions)
		{
%>
	<%= action.DefineVariables(Instance.Model, variables) %>
<%		
		}

		if (GridObject.Actions.Export != null)
		{
%>
	<%= variables.BasedOnDomain("ExcelFilename", GenexusType.DomainUrl(Object.Model)) %>
	<%= variables.Basic("ErrorMessage", null, eDBType.VARCHAR, 512) %>
<%
		}
	}
	
	// Helper variables
	if (Instance.UseAbstractForm)
	{
%>
	<%= variables.Basic(Constants.AdvancedLabelTemplateVariable, null, eDBType.CHARACTER) %>
<%
	}
	
%>
</Part>
