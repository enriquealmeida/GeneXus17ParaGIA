group JsonCSharpWeb;

delimiters "$", "$"

json_map()::=<<
private static Hashtable mapper;
public override string JsonMap(string value)
{
	if (mapper == null)
	{
		mapper = new Hashtable();
$level.OrderedMapping:{item| 
$if (item.HasJsonName)$
		$json_mappingItem(item)$
$endif$}$
	}
	return (string)mapper[value]; ;
}
>>

json_mappingItem(item)::=<<
mapper["$item.JsonName$"] = "$item.NormalizedName$";
>>

to_json(level)::=<<
public override void ToJSON()
{
	ToJSON(true) ;
	return;
}

public override void ToJSON(bool includeState)
{
$level.OrderedMapping:{item|	$add_orderedMapping(level,item)$};separator="\r\n"$
	return;
}
>>

add_orderedMapping(level, item)::=<%
$if (item.IsLevel)$
	$add_collection_prop(level,item)$
$else$
	$add_item_prop(level,item)$
$endif$
%>

add_collection_prop(level,item)::=<<
	if ($if(item.IsJsonNoPropertyWhenNull || item.IsJsonNullValueWhenNull)$$internal_property(level,item)$$else$$public_property(item)$$endif$ != null)
	{
		AddObjectProperty("$item.JsonName$", $if(item.IsJsonNoPropertyWhenNull || item.IsJsonNullValueWhenNull)$$internal_property(level,item)$$else$$public_property(item)$$endif$, false);
	}
>>

add_item_prop(level,item)::=<%
$if(item.IsCollection || item.CustomType)$
$add_collection_prop(level,item)$
$elseif (item.IsDateTime)$
	$datetime_prop(level,item)$
$elseif (item.IsDate)$
	$date_prop(level,item)$
$elseif (item.TooLongForJavascript)$
	$too_long_prop(level,item)$
$else$
	$default_prop(level,item)$
$endif$
%>

default_prop(level,item)::=<<
$if (item.IsJsonNoPropertyWhenNull || item.IsJsonNullValueWhenNull)$
	if ($json_serialization_condition(item)$)
	{	
		$add_single_prop(level,item)$
	}
$else$
	$add_single_prop(level,item)$
$endif$
>>

add_single_prop(level,item)::=<<
AddObjectProperty("$item.JsonName$", $public_property(item)$, false);$if (item.IncludeGXI)$
AddObjectProperty("$item.JsonName$_GXI", $public_property(item)$_gxi, false);
$endif$
>>

too_long_prop(level,item)::=<<
$if (item.IsJsonNoPropertyWhenNull || item.IsJsonNullValueWhenNull)$
	if ($json_serialization_condition(item)$)
	{	
		$add_too_long_prop(level,item)$
	}
$else$
	$add_too_long_prop(level,item)$
$endif$
>>

add_too_long_prop(level,item)::=<<
AddObjectProperty("$item.JsonName$", StringUtil.LTrim( StringUtil.Str( (decimal)$public_property(item)$, $item.Length$, $item.Decimals$)), false);
>>

datetime_prop(level,item)::=<<
$if (item.IsJsonNoPropertyWhenNull || item.IsJsonNullValueWhenNull)$
	if ($json_serialization_condition(item)$)
	{	
	$add_datetime_prop(level,item)$
	}
$else$
$add_datetime_prop(level,item)$
$endif$
>>

add_datetime_prop(level,item)::=<<
	datetime_STZ = $public_property(item)$;
	sDateCnv = "";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Year(datetime_STZ)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("0000", 1, 4-StringUtil.Len( sNumToPad)) + sNumToPad;
	sDateCnv = sDateCnv + "-";
	sNumToPad = StringUtil.Trim( StringUtil.Str((decimal)(DateTimeUtil.Month(datetime_STZ)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("00", 1, 2-StringUtil.Len(sNumToPad)) + sNumToPad;
	sDateCnv = sDateCnv + "-";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Day(datetime_STZ)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("00", 1, 2-StringUtil.Len(sNumToPad)) + sNumToPad;
	sDateCnv = sDateCnv + "T";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Hour(datetime_STZ)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("00", 1, 2-StringUtil.Len(sNumToPad)) + sNumToPad;
	sDateCnv = sDateCnv + ":";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Minute(datetime_STZ)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("00", 1, 2-StringUtil.Len(sNumToPad)) + sNumToPad;
	sDateCnv = sDateCnv + ":";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Second(datetime_STZ)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("00", 1, 2-StringUtil.Len(sNumToPad)) + sNumToPad;
	AddObjectProperty("$item.JsonName$", sDateCnv, false);
$if (item.IsJsonNullValueWhenNull)$
$else_date_null(item)$
$endif$
>>

date_prop(level,item)::=<<
$if (item.IsJsonNoPropertyWhenNull || item.IsJsonNullValueWhenNull)$
	if ($json_serialization_condition(item)$)
	{	
	$add_date_prop(level,item)$
	}
$else$
$add_date_prop(level,item)$
$endif$
>>

add_date_prop(level,item)::=<<
	sDateCnv = "";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Year($public_property(item)$)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("0000", 1, 4-StringUtil.Len(sNumToPad)) + sNumToPad;
	sDateCnv = sDateCnv + "-";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Month($public_property(item)$)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("00", 1, 2-StringUtil.Len(sNumToPad)) + sNumToPad;
	sDateCnv = sDateCnv + "-";
	sNumToPad = StringUtil.Trim(StringUtil.Str((decimal)(DateTimeUtil.Day($public_property(item)$)), 10, 0));
	sDateCnv = sDateCnv + StringUtil.Substring("00", 1, 2-StringUtil.Len(sNumToPad)) + sNumToPad;
	AddObjectProperty("$item.JsonName$", sDateCnv, false);
$if (item.IsJsonNullValueWhenNull)$
$else_date_null(item)$
$endif$
>>

else_date_null(item)::=<<
}
else
{
$if (IsNetCore)$
	AddObjectProperty("$item.JsonName$", null, true, true);
$else$
	AddObjectProperty("$item.JsonName$", Jayrock.Json.JNull.Value, true, true);
$endif$
>>

json_serialization_condition(item)::=<<
ShouldSerialize$public_property(item)$_Json()
>>