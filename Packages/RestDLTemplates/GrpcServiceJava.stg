group ApiDocYaml;

delimiters "$", "$"

init(hostinfo, entities,  apis, sdts, gx)::=<<
$header(hostinfo, entities, apis, sdts, gx)$
>>

header(hostinfo, entities,  apis, sdts, gx)::=<<
$apis:{api| $api_impl( hostinfo, api, gx )$};separator="\n"$
>>

api_impl(hostinfo, api, gx)::=<<
package $hostinfo.package$$api.ModulePoint$;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.BindableService;
import io.grpc.stub.StreamObserver;
import com.google.protobuf.*;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.genexus.*;
import com.genexus.internet.*;
import $hostinfo.package$.*;
import $hostinfo.package$$api.ModulePoint$.grpc.*;

/**
 * GRPC Server for $api.Name$.
 */
public class $gx.ToLower.(api.Name)$grpcserver {

  private static final Logger logger = Logger.getLogger($gx.ToLower.(api.Name)$grpcserver.class.getName());
  
  private static final int DEFAULT_PORT = 50051;
  private final int port;
  private Server server=null;

  public $gx.ToLower.(api.Name)$grpcserver(int port) throws IOException {
     this.port = port;
  }

  public void start() throws IOException {
  
    server = ServerBuilder.forPort(DEFAULT_PORT).addService(new $gx.ToLower.(api.Name)$grpcservice()).build().start();

    logger.info("Server started, listening on " + port);
    
	Runtime.getRuntime().addShutdownHook(new Thread() {
    
	@Override
      public void run() {
        // Use stderr here since the logger may have been reset by its JVM shutdown hook.
        System.err.println("*** shutting down gRPC server since JVM is shutting down");
        try 
		{
          $gx.ToLower.(api.Name)$grpcserver.this.stop();
        } 
		catch (InterruptedException e)
		{
          e.printStackTrace(System.err);
        }
        System.err.println("*** server shut down");
      }
    });
  }

  /** Stop serving requests and shutdown resources. */
  public void stop() throws InterruptedException {
    if (server != null) {
      server.shutdown().awaitTermination(30, TimeUnit.SECONDS);
    }
  }

  /**
   * Await termination on the main thread since the grpc library uses daemon threads.
   */
  private void blockUntilShutdown() throws InterruptedException {
    if (server != null) {
      server.awaitTermination();
    }
  }

  /* Main entry point */
  public static void main(String[] args) throws Exception {
    $gx.ToLower.(api.Name)$grpcserver server = new $gx.ToLower.(api.Name)$grpcserver(DEFAULT_PORT);
	Application.init(GXcfg.class);
    server.start();
    server.blockUntilShutdown();
  }

  /**
   * Implementation of $api.Name$ gRPC service.
   *
   * <p>See $api.Name$.proto for details of the methods.
   */
  private static class $gx.ToLower.(api.Name)$grpcservice extends $api.Name$Grpc.$api.Name$ImplBase 
  {
 

    $gx.ToLower.(api.Name)$grpcservice() 
	{

    }
    
	/* Entry Points for api object */

	$api.EntryPointMethods:{mth|$gen_mthimpl(api, mth, gx)$};separator="\n"$

	}
 }
>>

gen_mthimpl(api,mth,gx)::=<<
@Override
public void $gx.ToLowerFirst.(mth.GrpcAlphaName)$( $if (mth.HasInParameters)$$gx.ToProper.(mth.GrpcName)$Request$else$Empty$endif$ request, StreamObserver<$gx.ToProper.(mth.GrpcName)$Reply> responseObserver) {
	$gx.ToProper.(mth.GrpcName)$Reply reply = $gx.ToProper.(mth.GrpcName)$Reply.newBuilder().build();
	reply = new $gx.ToLower.(api.Name)$_service_grpc(-1).$mth.GrpcName$(request, reply);
	responseObserver.onNext(reply);
	responseObserver.onCompleted();
}	

>>

