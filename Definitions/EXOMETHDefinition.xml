<?xml version='1.0' encoding='iso-8859-1'?>
<Content version='148254 $'>
	<Object id='EXOMETH' inheritance='EXOITEM '>
		<Group>
			<Name>ExternalObjectMethod</Name>
			<Type>Main</Type>
			<Children>
				<Prop>
					<Id>IntName</Id>
					<Name>Internal Name</Name>
					<Type>Text</Type>
				</Prop>
				<Prop>
					<Id>ExoItemDesc</Id>
					<Name>Description</Name>
					<Type>Text</Type>
				</Prop>
				<Prop>
					<Id>ExoItemType</Id>
					<Name>Type</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.GenexusType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Metadata>
						<Value name='customReadOnlyResolver'>Artech.Genexus.Common.Resolvers.Readonly.ExoItemTypeReadonlyResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExoItemTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoItemLength</Id>
					<Name>Length</Name>
					<Type>Integer</Type>
					<Default>8</Default>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExoItemLengthDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoItemDecimals</Id>
					<Name>Decimals</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExoItemDecimalsDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoItemSigned</Id>
					<Name>Signed</Name>
					<Type>Boolean</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExoItemSignedDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoItemIsCollection</Id>
					<Name>Collection</Name>
					<Type>Boolean</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExoItemCollectionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>ExoItemBasedOn</Id>
					<Name>Based on</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.BasedOnReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.BasedOnValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.BasedOnExoItemAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationName'>basedon</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoTypeRef</Id>
					<Name>ExternalObjectType</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExternalObjectTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagNoCacheDefault'></Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type="Don't serialize"/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>DataTypeString</Id>
					<Name>DataTypeString</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DataTypeStringDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagDeklarit'></Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Group hidden='1'>
					<Id>EXOInfoCSHARP</Id>
					<Name>.NET Framework Information</Name>
					<Description>.NET Framework Information</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or ((context(ExoType) == 0) or ((value(ExoTypeRef) == 5) or (context(ExoType) == 5)))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>ExoType</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ExoTypeRef</PropName>
															<Value>5</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>ExoType</PropName>
															<Value>5</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop hidden='1'>
							<Id>ExoNameCSHARP</Id>
							<Name>.Net External Name</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalNameCSHARP</Value>
								<Value name='FlagDisplayName'>.NET Framework External Name</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemExtTypeCSHARP</Id>
							<Name>.Net External Type</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalTypeCSHARP</Value>
								<Value name='FlagDisplayName'>.NET Framework External Type</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group hidden='1'>
					<Id>EXOInfoNETCORE</Id>
					<Name>.NET Information</Name>
					<Description>.NET Information</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or ((context(ExoType) == 0) or ((value(ExoTypeRef) == 5) or (context(ExoType) == 5)))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>ExoType</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ExoTypeRef</PropName>
															<Value>5</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>ExoType</PropName>
															<Value>5</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop hidden='1'>
							<Id>ExoNameNETCORE</Id>
							<Name>.Net Core External Name</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExternalObjectNetCoreNameDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='ConstantName'>ExternalNameNETCORE</Value>
								<Value name='FlagDisplayName'>.NET External Name</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemExtTypeNETCORE</Id>
							<Name>.Net Core External Type</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExternalObjectNetCoreTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='ConstantName'>ExternalTypeNETCORE</Value>
								<Value name='FlagDisplayName'>.NET External Type</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group hidden='1'>
					<Id>EXOInfoJAVA</Id>
					<Name>Java Information</Name>
					<Description>Java Information</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or ((context(ExoType) == 0) or ((value(ExoTypeRef) == 5) or (context(ExoType) == 5)))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>ExoType</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ExoTypeRef</PropName>
															<Value>5</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>ExoType</PropName>
															<Value>5</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop hidden='1'>
							<Id>ExoNameJAVA</Id>
							<Name>Java External Name</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalNameJAVA</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemExtTypeJAVA</Id>
							<Name>Java External Type</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalTypeJAVA</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoMethodThrows</Id>
							<Name>Java Method Throws Exceptions</Name>
							<Type>Combo</Type>
							<Default>NO</Default>
							<Values>
								<Value id='NO' desc='No'/>
								<Value id='YES' desc='Yes'/>
							</Values>
						</Prop>
					</Children>
				</Group>
				<Group hidden='1'>
					<Id>EXOInfoRuby</Id>
					<Name>Ruby Information</Name>
					<Description>Ruby Information</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or (context(ExoType) == 0)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ExoType</PropName>
											<Value>0</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagCategories'>Deprecated</Value>
					</Metadata>
					<Children>
						<Prop hidden='1'>
							<Id>ExoNameRuby</Id>
							<Name>Ruby External Name</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalNameRuby</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemExtTypeRuby</Id>
							<Name>Ruby External Type</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalTypeRuby</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group hidden='1'>
					<Id>EXOInfoIOS</Id>
					<Name>iOS Information</Name>
					<Description>iOS Information</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or (context(ExoType) == 0)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ExoType</PropName>
											<Value>0</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop hidden='1'>
							<Id>ExoNameIOS</Id>
							<Name>iOS External Name</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalNameIOS</Value>
								<Value name='FlagDisplayName'>iOS External Name</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemExtTypeIOS</Id>
							<Name>iOS External Type</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalTypeIOS</Value>
								<Value name='FlagDisplayName'>iOS External Type</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group hidden='1'>
					<Id>EXOInfoANDROID</Id>
					<Name>Android Information</Name>
					<Description>Android Information</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or (context(ExoType) == 0)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ExoType</PropName>
											<Value>0</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop hidden='1'>
							<Id>ExoNameANDROID</Id>
							<Name>Android External Name</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalNameAndroid</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemExtTypeANDROID</Id>
							<Name>Android External Type</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalTypeANDROID</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group hidden='1'>
					<Id>EXOInfoJS</Id>
					<Name>Javascript Information</Name>
					<Description>Javascript Information</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or (context(ExoType) == 0)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ExoType</PropName>
											<Value>0</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop hidden='1'>
							<Id>ExoNameJS</Id>
							<Name>Javascript External Name</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExternalObjectJSNameDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='ConstantName'>ExternalNameJS</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>ExoItemExtTypeBeanJAVA</Id>
					<Name>External Type</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 4) or (context(ExoType) == 4)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>4</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ExoType</PropName>
											<Value>4</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Group hidden='1'>
					<Id>EXOReturnvalueXMLInfo</Id>
					<Name>XML Return Element Info</Name>
					<Description>XML Method Return Info</Description>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop hidden='1'>
							<Id>ExoMethodReturnParmName</Id>
							<Name>XML Return Element Name</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(ExoTypeRef) == 2</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>2</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoMethodReturnParmNamespace</Id>
							<Name>XML Return Element Namespace</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(ExoTypeRef) == 2</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>2</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificable'>IfApply</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemExtType</Id>
							<Name>Soap Type</Name>
							<Type>Text</Type>
							<Metadata>
								<Value name='ConstantName'>ExternalType</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemWRAPPEDCOLLECTION</Id>
							<Name>Collection Serialization</Name>
							<Description>Collection Serialization</Description>
							<Type>Combo</Type>
							<Default>idXmlCollectionWrapped</Default>
							<Values>
								<Value id='idXmlCollectionWrapped' desc='Wrapped'/>
								<Value id='idXmlCollectionSequence' desc='Sequence'/>
							</Values>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>value(ExoItemIsCollection) == false</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoItemIsCollection</PropName>
											<Value>false</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationName'>CollectionSerialization</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ExoItemCollectionItemName</Id>
							<Name>Collection Item Name</Name>
							<Description>Collection Item Name</Description>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>value(ExoItemIsCollection) == false</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoItemIsCollection</PropName>
											<Value>false</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationName'>CollectionItemName</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>ExoMethodProtocol</Id>
					<Name>Protocol</Name>
					<Type>Combo</Type>
					<Default>idSoap11</Default>
					<Values>
						<Value id='idSoap11' desc='SOAP 1.1'/>
						<Value id='idSoap12' desc='SOAP 1.2'/>
					</Values>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodStyle</Id>
					<Name>Style</Name>
					<Type>Combo</Type>
					<Default>idDocument</Default>
					<Values>
						<Value id='idDocument' desc='Document'/>
						<Value id='idRPC' desc='RPC'/>
					</Values>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodInputUse</Id>
					<Name>Use</Name>
					<Type>Combo</Type>
					<Default>idLiteral</Default>
					<Values>
						<Value id='idLiteral' desc='Literal'/>
						<Value id='idEncoded' desc='Encoded'/>
					</Values>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodMtom</Id>
					<Name>EnableMTOM</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodAddress</Id>
					<Name>Address</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodPortTypeName</Id>
					<Name>PortTypeName</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodPortTypeNamespace</Id>
					<Name>PortTypeNamespace</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodAction</Id>
					<Name>Action</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>ExoName</Id>
					<Name>XML Name</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ConstantName'>XmlName</Value>
						<Value name='FlagSpecificationName'>XmlName</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodRequestNamespace</Id>
					<Name>Request Namespace</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodResponseElementName</Id>
					<Name>Response XML Name</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodResponseNamespace</Id>
					<Name>Response Namespace</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(ExoTypeRef) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodExternalName</Id>
					<Name>External Name</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 1) or ((value(ExoTypeRef) == 4) or ((context(ExoType) == 4) or ((value(ExoTypeRef) == 5) or (context(ExoType) == 5))))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>1</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ExoTypeRef</PropName>
													<Value>4</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>ExoType</PropName>
															<Value>4</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ExoTypeRef</PropName>
																	<Value>5</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>ExoType</PropName>
																	<Value>5</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ExoExternalNameDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodIsFactory</Id>
					<Name>Is Factory</Name>
					<Type>Boolean</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or (value(ExoTypeRef) == 5)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>5</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>value(ExoTypeRef) != 5</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>ExoTypeRef</PropName>
									<Value>5</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExoMethodIsFactoryDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customVisibleResolver'>Artech.Genexus.Common.Resolvers.Visible.ExoMethodIsFactoryVisibleResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoMethodIsStatic</Id>
					<Name>Is Static</Name>
					<Type>Boolean</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or (value(ExoTypeRef) == 5)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>5</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.ExternalObjectIsStaticMethodDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customReadOnlyResolver'>Artech.Genexus.Common.Resolvers.Readonly.ExternalObjectIsStaticMethodReadonlyResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>ExoExternalMember</Id>
					<Name>External Member Type</Name>
					<Type>Combo</Type>
					<Default>idExoExternalMemberDefault</Default>
					<Values>
						<Value id='idExoExternalMemberDefault' desc='Default'/>
						<Value id='idExoExternalMemberStatic' desc='Static'/>
						<Value id='idExoExternalMemberInstance' desc='Instance'/>
					</Values>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(value(ExoTypeRef) == 0) or (value(ExoTypeRef) == 5)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ExoTypeRef</PropName>
											<Value>5</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
			</Children>
		</Group>
	</Object>
</Content>
