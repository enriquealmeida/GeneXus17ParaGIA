<SyntaxLanguage Key="Events" LanguageDefinitionVersion="4.0" Secure="True" WordContainsAdditionalCharacters="@_"
				SyntaxLanguageTypeName="Artech.FrameworkDE.Text.GenericOutlinerParser, Artech.FrameworkDE"
				xmlns="http://ActiproSoftware/SyntaxEditor/4.0/LanguageDefinition">

	<!-- String Properties -->
	<Properties>
		<Property Key="Creator" Value="Artech" />
		<Property Key="Copyright" Value="Copyright (c) 2001-2007 Artech. All rights reserved." />
	</Properties>

	<!-- Triggers -->
	<Triggers>
		<AutoReplaceTrigger Key="AutoReplaceTrigger">
			<AutoReplaceTriggerActivators>
				<AutoReplaceTriggerActivator Character=" " />
				<AutoReplaceTriggerActivator Character="&#x9;" />
				<AutoReplaceTriggerActivator Character="&#xD;" />
				<AutoReplaceTriggerActivator Character="." />
				<AutoReplaceTriggerActivator Character="," />
				<AutoReplaceTriggerActivator Character=":" />
				<AutoReplaceTriggerActivator Character=";" />
				<AutoReplaceTriggerActivator Character="=" />
				<AutoReplaceTriggerActivator Character="(" />
				<AutoReplaceTriggerActivator Character=")" />
				<AutoReplaceTriggerActivator Character="[" />
				<AutoReplaceTriggerActivator Character="]" />
				<AutoReplaceTriggerActivator Character="{" />
				<AutoReplaceTriggerActivator Character="}" />
			</AutoReplaceTriggerActivators>
			<AutoReplaceTriggerValidStates>
				<AutoReplaceTriggerValidState State="DefaultState" />
			</AutoReplaceTriggerValidStates>
		</AutoReplaceTrigger>
		<KeyPressTrigger Key="MemberListTrigger" Character=".">
			<KeyPressTriggerValidStates>
				<KeyPressTriggerValidState State="DefaultState" />
			</KeyPressTriggerValidStates>
		</KeyPressTrigger>
		<KeyPressTrigger Key="OpenBracketInfoTipListTrigger" Character="(">
			<KeyPressTriggerValidStates>
				<KeyPressTriggerValidState State="DefaultState" />
			</KeyPressTriggerValidStates>
		</KeyPressTrigger>
		<KeyPressTrigger Key="ParamSeparatorInfoTipListTrigger" Character=",">
			<KeyPressTriggerValidStates>
				<KeyPressTriggerValidState State="DefaultState" />
			</KeyPressTriggerValidStates>
		</KeyPressTrigger>
		<KeyPressTrigger Key="VariablesListTrigger" Character="&amp;">
			<KeyPressTriggerValidStates>
				<KeyPressTriggerValidState State="DefaultState" />
			</KeyPressTriggerValidStates>
		</KeyPressTrigger>
		<KeyPressTrigger Key="PreffixedObjectListTrigger" Character=":">
			<KeyPressTriggerValidStates>
				<KeyPressTriggerValidState State="DefaultState" />
			</KeyPressTriggerValidStates>
		</KeyPressTrigger>
	</Triggers>

	<!-- Highlighting Styles -->
	<Styles>
		<!-- Override Built-In Styles -->
		<Style Key="BracketHighlightingStyle"/>
		<Style Key="CollapsibleTextStyle"/>
		<Style Key="CodeSnippetFieldStyle"/>
		<Style Key="CodeSnippetDependentFieldStyle"/>
		<!-- Highlighting Styles -->
		<Style Key="ReservedWordStyle"/>
		<Style Key="KeyWordStyle"/>
		<Style Key="DefWordStyle"/>
		<Style Key="FcnReservedWordStyle"/>
		<Style Key="FcnSomeGenReservedWordStyle"/>
		<Style Key="DeprecatedWordStyle"/>
		<Style Key="VariableReplaceStyle"/>
		<Style Key="VariableStyle"/>
		<Style Key="OperatorStyle"/>
		<Style Key="NumberStyle"/>
		<Style Key="StringDelimiterStyle"/>
		<Style Key="StringDefaultStyle"/>
		<Style Key="CommentDelimiterStyle"/>
		<Style Key="CommentURLStyle"/>
		<Style Key="CommentDefaultStyle"/>
	</Styles>

	<!-- Macros -->
	<Macros>
		<!-- URL -->
		<Macro Key="URLMacro" Value="https?:// [\w\-]+ (\. [\w\-]+)* (/ [\w\-./?%=]*)?" />
	</Macros>

	<!-- States -->
	<States>
		<!-- Code -->
		<State Key="DefaultState">
			<!-- Patterns Groups -->
			<PatternGroups>
				<ExplicitPatternGroup TokenKey="NewOperatorToken" LookBehind="=(({WhitespaceMacro})|/\*.*\*/|//.*\n|\n)*" PatternValue="New" LookAhead="{NonWordMacro}|$"/>
				<ExplicitPatternGroup TokenKey="NewOperatorToken" PatternValue="New" LookAhead="(({WhitespaceMacro})|/\*.*\*/|//.*\n|\n)*\("/>

				<!-- ### Events ### -->
				<ExplicitPatternGroup Key="OpenEventPatternGroup" TokenKey="OpenEventToken" PatternValue="Event"
						LookBehind="{NonWordMacro}|^"
						LookAhead="{NonWordMacro}|$"
						EndBracket="CloseEventPatternGroup"
						CaseSensitivity="AutoCorrect"
						Style="DefWordStyle" />
				<ExplicitPatternGroup Key="CloseEventPatternGroup" TokenKey="CloseEventToken" PatternValue="EndEvent"
						LookBehind="{NonWordMacro}|^"
						LookAhead="{NonWordMacro}|$"
						StartBracket="OpenEventPatternGroup"
						CaseSensitivity="AutoCorrect"
						Style="DefWordStyle" />
				<!-- Standard events -->
				<ExplicitPatternGroup TokenKey="EventNameToken"
						LookBehind="Event({WhitespaceMacro})"
						LookAhead="{NonWordMacro}|$"
						StartsWith="[a-zA-Z]"
						CaseSensitivity="AutoCorrect"
						Style="DefWordStyle" >
					<ExplicitPatterns>
						Load Refresh Start ClientStart
					</ExplicitPatterns>
					<ExplicitPattern Value="After Trn"/>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="ForClauseToken" PatternValue="For"
						LookBehind="Event({WhitespaceMacro})Synchronize({WhitespaceMacro})"
						CaseSensitivity="AutoCorrect"
						Style="DefWordStyle" />

				<!-- ### Subroutines ### -->
				<ExplicitPatternGroup Key="OpenSubPatternGroup" TokenKey="OpenSubToken" PatternValue="Sub"
						LookBehind="{NonWordMacro}|^"
						LookAhead="{NonWordMacro}|$"
						EndBracket="CloseSubPatternGroup"
						CaseSensitivity="AutoCorrect"
						Style="DefWordStyle" />
				<ExplicitPatternGroup Key="CloseSubPatternGroup" TokenKey="CloseSubToken" PatternValue="EndSub"
						LookBehind="{NonWordMacro}|^"
						LookAhead="{NonWordMacro}|$"
						StartBracket="OpenSubPatternGroup"
						CaseSensitivity="AutoCorrect"
						Style="DefWordStyle" />

				<!-- Whitespace -->
				<RegexPatternGroup TokenKey="WhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<!-- Line Terminators -->
				<RegexPatternGroup TokenKey="LineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
				<!-- Brackets -->
				<ExplicitPatternGroup Key="OpenParenthesisPatternGroup" TokenKey="OpenParenthesisToken" PatternValue="(" EndBracket="CloseParenthesisPatternGroup" />
				<ExplicitPatternGroup Key="CloseParenthesisPatternGroup" TokenKey="CloseParenthesisToken" PatternValue=")" StartBracket="OpenParenthesisPatternGroup" />
				<ExplicitPatternGroup Key="OpenCurlyBracePatternGroup" TokenKey="OpenCurlyBraceToken" PatternValue="{" EndBracket="CloseCurlyBracePatternGroup" />
				<ExplicitPatternGroup Key="CloseCurlyBracePatternGroup" TokenKey="CloseCurlyBraceToken" PatternValue="}" StartBracket="OpenCurlyBracePatternGroup" />
				<ExplicitPatternGroup Key="OpenSquareBracePatternGroup" TokenKey="OpenSquareBraceToken" PatternValue="[" EndBracket="CloseSquareBracePatternGroup" />
				<ExplicitPatternGroup Key="CloseSquareBracePatternGroup" TokenKey="CloseSquareBraceToken" PatternValue="]" StartBracket="OpenSquareBracePatternGroup" />
				<!-- Punctuation -->
				<ExplicitPatternGroup TokenKey="PunctuationToken">
					<ExplicitPatterns>
						. , : ;
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Reserved Words -->
				<ExplicitPatternGroup Key="OpenIfPatternGroup" TokenKey="OpenIfToken" Style="KeyWordStyle" PatternValue="If" LookAhead="{NonWordMacro}|$" EndBracket="CloseIfPatternGroup"/>
				<ExplicitPatternGroup TokenKey="ElseToken" Style="KeyWordStyle" PatternValue="Else" LookAhead="{NonWordMacro}|$"/>
				<ExplicitPatternGroup Key="CloseIfPatternGroup" TokenKey="CloseIfToken" Style="KeyWordStyle" PatternValue="Endif" LookAhead="{NonWordMacro}|$" StartBracket="OpenIfPatternGroup"/>
				<ExplicitPatternGroup Key="OpenDoWhilePatternGroup" TokenKey="OpenDoWhileToken" Style="KeyWordStyle" PatternValue="Do while" LookAhead="{NonWordMacro}|$" EndBracket="CloseDoWhilePatternGroup"/>
				<ExplicitPatternGroup Key="CloseDoWhilePatternGroup" TokenKey="CloseDoWhileToken" Style="KeyWordStyle" PatternValue="Enddo" LookAhead="{NonWordMacro}|$" StartBracket="OpenDoWhilePatternGroup"/>
				<ExplicitPatternGroup Key="OpenDoCasePatternGroup" TokenKey="OpenDoCaseToken" Style="KeyWordStyle" PatternValue="Do case" LookAhead="{NonWordMacro}|$" EndBracket="CloseDoCasePatternGroup"/>
				<ExplicitPatternGroup TokenKey="CaseToken" Style="KeyWordStyle" PatternValue="Case" LookAhead="{NonWordMacro}|$"/>
				<ExplicitPatternGroup TokenKey="OtherwiseToken" Style="KeyWordStyle" PatternValue="Otherwise" LookAhead="{NonWordMacro}|$"/>
				<ExplicitPatternGroup Key="CloseDoCasePatternGroup" TokenKey="CloseDoCaseToken" Style="KeyWordStyle" PatternValue="Endcase" LookAhead="{NonWordMacro}|$" StartBracket="OpenDoCasePatternGroup"/>
				<ExplicitPatternGroup Key="OpenForPatternGroup" TokenKey="OpenForToken" Style="KeyWordStyle" LookAhead="{NonWordMacro}|$" EndBracket="CloseForPatternGroup">
					<ExplicitPattern Value="For each Selected line"/>
					<ExplicitPattern Value="For each line"/>
					<ExplicitPattern Value="For each"/>
					<ExplicitPattern Value="For"/>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenKey="WhenNoneToken" Style="KeyWordStyle" PatternValue="[Ww][Hh][Ee][Nn]({WhitespaceMacro})+[Nn][Oo][Nn][Ee]" LookAhead="{NonWordMacro}|$"/>
				<ExplicitPatternGroup Key="CloseForPatternGroup" TokenKey="CloseForToken" Style="KeyWordStyle" PatternValue="Endfor" LookAhead="{NonWordMacro}|$" StartBracket="OpenForPatternGroup"/>
				<ExplicitPatternGroup Key="OpenXforPatternGroup" TokenKey="OpenXforToken" Style="KeyWordStyle" PatternValue="Xfor" LookAhead="{NonWordMacro}|$" EndBracket="CloseXforPatternGroup"/>
				<ExplicitPatternGroup Key="CloseXforPatternGroup" TokenKey="CloseXforToken" Style="KeyWordStyle" PatternValue="Xendfor" LookAhead="{NonWordMacro}|$" StartBracket="OpenXforPatternGroup"/>
				<ExplicitPatternGroup Key="OpenNewPatternGroup" TokenKey="OpenNewToken" Style="KeyWordStyle" PatternValue="New" LookAhead="{WhitespaceMacro}|/[/*]|$" EndBracket="CloseNewPatternGroup"/>
				<ExplicitPatternGroup Key="CloseNewPatternGroup" TokenKey="CloseNewToken" Style="KeyWordStyle" PatternValue="Endnew" LookAhead="{NonWordMacro}|$" StartBracket="OpenNewPatternGroup"/>
				<ExplicitPatternGroup Key="OpenXnewPatternGroup" TokenKey="OpenXnewToken" Style="KeyWordStyle" PatternValue="Xnew" LookAhead="{NonWordMacro}|$" EndBracket="CloseXnewPatternGroup"/>
				<ExplicitPatternGroup Key="CloseXnewPatternGroup" TokenKey="CloseXnewToken" Style="KeyWordStyle" PatternValue="Xendnew" LookAhead="{NonWordMacro}|$" StartBracket="OpenXnewPatternGroup"/>
				<ExplicitPatternGroup TokenKey="WhereToken" Style="KeyWordStyle" PatternValue="Where" LookAhead="{NonWordMacro}|$"/>
				<ExplicitPatternGroup TokenKey="KeyWordToken"
						LookBehind="{WhitespaceMacro}|^"
						LookAhead="{NonWordMacro}|$"
						StartsWith="[a-zA-Z]"
						Style="KeyWordStyle">
					<ExplicitPatterns>
						do using in to step delete on msg call submit true false confirm
						order option distinct return when duplicate commit rollback case exit by vb dbase
						cobol java sql inout out eject noskip lineno prncmd print detail pl mt mb cp keep given load
						unique
					</ExplicitPatterns>
					<ExplicitPattern Value="defined by"/>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup Key="FcnWordTokenGroup" TokenKey="FcnWordToken" Style="FcnReservedWordStyle" LookAhead="\(|$" StartsWith="[a-zA-Z]" >
					<!--Dynamicaly added-->
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="FcnNpWordToken" Style="FcnSomeGenReservedWordStyle" LookAhead="{NonWordMacro}|$" StartsWith="[a-zA-Z]" >
					<ExplicitPatterns>
						SetCookie GetCookie BrowserID BrowserVersion RemoteAddr OpenDocument PrintDocument WriteRegKey ReadRegKey ReturnOnClick
						DFROpen DFRNext DFRGTxt DFRGNum DFRGDate DFRClose
						DFWOpen DFWNext DFWPTxt DFWPNum DFWPDate DFWClose Exists
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="DeprecatedWordToken" Style="DeprecatedWordStyle" LookAhead="{NonWordMacro}|$" StartsWith="[a-zA-Z]" >
					<ExplicitPatterns>
						Allownulls Define Nocheck Same Udf XToD Set
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup Key="OpenCompositePatternGroup" TokenKey="OpenCompositeToken" Style="KeyWordStyle" PatternValue="Composite" LookAhead="{NonWordMacro}|$" EndBracket="CloseCompositePatternGroup" CaseSensitivity="AutoCorrect"/>
				<ExplicitPatternGroup Key="CloseCompositePatternGroup" TokenKey="CloseCompositeToken" Style="KeyWordStyle" PatternValue="EndComposite" LookAhead="{NonWordMacro}|$" StartBracket="OpenCompositePatternGroup" CaseSensitivity="AutoCorrect"/>
				<!-- Identifier -->
				<RegexPatternGroup TokenKey="VariableReplaceToken" Style="VariableReplaceStyle" PatternValue="(\$)({WordMacro})*(\$)" />
				<RegexPatternGroup TokenKey="VariableToken" Style="VariableStyle" PatternValue="(&amp;)({WordMacro})*" />
				<RegexPatternGroup TokenKey="IdentifierToken" PatternValue="(_ | {AlphaMacro})({WordMacro})*" />
				<!-- Operators -->
				<ExplicitPatternGroup TokenKey="OperatorToken" Style="OperatorStyle">
					<ExplicitPatterns>
						=
						+= -= *= /=
						&gt; &lt; &lt;&gt; &gt;= &lt;=
						+ - * / ^
						and or not like
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Numbers -->
				<RegexPatternGroup TokenKey="RealNumberToken" Style="NumberStyle" LookAhead="{NonWordMacro}|$">
					<RegexPattern Value="{DigitMacro}* \. {DigitMacro}+ ([Ee] [\+\-]? {DigitMacro}+)? [FfDdMm]?" />
					<RegexPattern Value="{DigitMacro}+ [Ee] [\+\-]? {DigitMacro}+ [FfDdMm]" />
				</RegexPatternGroup>
				<RegexPatternGroup TokenKey="IntegerNumberToken" Style="NumberStyle" PatternValue="{DigitMacro}+ (([Uu]? [Ll]?) | ([Ll]? [Uu]?))" LookAhead="{NonWordMacro}|$" />
				<RegexPatternGroup TokenKey="HexIntegerNumberToken" Style="NumberStyle" PatternValue="0 [xX] {HexDigitMacro}+ (([Uu]? [Ll]?) | ([Ll]? [Uu]?))" LookAhead="{NonWordMacro}|$" />
			</PatternGroups>
			<!-- Child States -->
			<ChildStates>
				<ChildState Key="CharacterState" />
				<ChildState Key="StringState" />
				<ChildState Key="MultiLineCommentState" />
				<ChildState Key="CommentState" />
			</ChildStates>
		</State>

		<!-- Characters -->
		<State Key="CharacterState" TokenKey="CharacterDefaultToken" Style="StringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="CharacterStartToken" Style="StringDelimiterStyle" PatternValue="'" />
					<RegexPatternGroup Type="EndScope" TokenKey="CharacterEndToken" Style="StringDelimiterStyle" PatternValue="['\n]" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\x {HexDigitMacro}{1,4}" />
				<RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\u {HexDigitMacro}{4,4}" />
				<RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\U {HexDigitMacro}{8,8}" />
				<RegexPatternGroup TokenKey="CharacterEscapedCharacterToken" PatternValue="\\." />
				<RegexPatternGroup TokenKey="CharacterWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="CharacterWordToken" PatternValue="\w+" />
				<RegexPatternGroup TokenKey="CharacterDefaultToken" PatternValue="[^'\n]" />
			</PatternGroups>
		</State>

		<!-- Strings -->
		<State Key="StringState" TokenKey="StringDefaultToken" Style="StringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<RegexPatternGroup Type="StartScope" TokenKey="StringStartToken" Style="StringDelimiterStyle" PatternValue="!?\&quot;" />
					<RegexPatternGroup Type="EndScope" TokenKey="StringEndToken" Style="StringDelimiterStyle" PatternValue="[\&quot;\n]" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\x {HexDigitMacro}{1,4}" />
				<RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\u {HexDigitMacro}{4,4}" />
				<RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\U {HexDigitMacro}{8,8}" />
				<RegexPatternGroup TokenKey="StringEscapedCharacterToken" PatternValue="\\[^\&quot;]" />
				<RegexPatternGroup TokenKey="StringWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="StringWordToken" PatternValue="\w+" />
				<RegexPatternGroup TokenKey="StringDefaultToken" PatternValue="[^\&quot;\n]" />
			</PatternGroups>
		</State>

		<!-- Comments -->
		<State Key="CommentState" TokenKey="CommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="CommentStartToken" Style="CommentDelimiterStyle" PatternValue="//" />
					<RegexPatternGroup Type="EndScope" TokenKey="CommentEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="CommentDelimiterToken" Style="CommentDelimiterStyle" PatternValue="//" />
				<RegexPatternGroup TokenKey="CommentWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="CommentURLToken" Style="CommentURLStyle" PatternValue="{URLMacro}" />
				<RegexPatternGroup TokenKey="CommentLineTerminatorToken" PatternValue="{LineTerminatorMacro}" LookAhead="{LineTerminatorWhitespaceMacro}* // [^/]" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="CommentWordToken" PatternValue="\w+" />
				<RegexPatternGroup TokenKey="CommentDefaultToken" PatternValue="{NonLineTerminatorMacro}" />
			</PatternGroups>
		</State>

		<!-- MultiLine Comments -->
		<State Key="MultiLineCommentState" TokenKey="MultiLineCommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope BracketHighlight="True">
					<ExplicitPatternGroup Type="StartScope" TokenKey="MultiLineCommentStartToken" Style="CommentDelimiterStyle" PatternValue="/*" />
					<ExplicitPatternGroup Type="EndScope" TokenKey="MultiLineCommentEndToken" Style="CommentDelimiterStyle" PatternValue="*/" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="MultiLineCommentWhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="MultiLineCommentLineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
				<RegexPatternGroup TokenKey="MultiLineCommentURLToken" Style="CommentURLStyle" PatternValue="{URLMacro}" />
				<RegexPatternGroup TokenKey="MultiLineCommentWordToken" PatternValue="\w+" />
				<RegexPatternGroup TokenKey="MultiLineCommentDefaultToken" PatternValue="[^*]" />
			</PatternGroups>
		</State>

	</States>

</SyntaxLanguage>
