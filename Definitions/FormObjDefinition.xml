<?xml version='1.0' encoding='iso-8859-1'?>
<Content version='148254 $'>
	<Object id='FORMATT' inheritance='FORMOBJ '>
		<Group>
			<Name>Attribute</Name>
			<Type>Main</Type>
			<Metadata>
				<Value name='ParentResolver'>Artech.Genexus.Common.Resolvers.ControlParentResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
			</Metadata>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>52</Value>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>KBObjectKey</Id>
					<Name>KBObjectKey</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Readonly'>
							<Cond>(value(AttNumDim) == 0) and ((value(BaseAttType) != 254) and ((value(BaseAttType) != 252) and (value(BaseAttType) != 251)))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttNumDim</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>BaseAttType</PropName>
													<Value>254</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>BaseAttType</PropName>
															<Value>252</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>BaseAttType</PropName>
															<Value>251</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.OBJ_CTRL_NAME_DefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customVisibleResolver'>Artech.Genexus.Common.Resolvers.ControlNameVisibleResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>AttType</Id>
					<Name>AttType</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.EXT_ATT_TYPE_DefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>isVariable</Id>
					<Name>isVariable</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsVariableDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>isAttribute</Id>
					<Name>isAttribute</Name>
					<Type>Boolean</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsAttributeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Group hidden='1'>
					<Id>AttEditFlags</Id>
					<Name>EditFlags</Name>
					<Description>EditFlags</Description>
					<Type>Group</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
					<Children>
						<Prop hidden='1'>
							<Id>AttEditNameProtected</Id>
							<Name>AttEditNameProtected</Name>
							<Description>AttEditNameProtected</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsStandardVariable</Id>
							<Name>IsStandardVariable</Name>
							<Description>Is standard variable</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>idIsAutoDefinedVariable</Id>
							<Name>IsAutoDefinedVariable</Name>
							<Description>Is autodefined variable</Description>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>AttEditDisableArrays</Id>
							<Name>AttEditDisableArrays</Name>
							<Description>AttEditDisableArrays</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>AttEditNewVariable</Id>
							<Name>AttEditNewVariable</Name>
							<Description>AttEditNewVariable</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>AttEditDontAssign</Id>
							<Name>AttEditDontAssign</Name>
							<Description>AttEditDontAssign</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>idIsSDControl</Id>
					<Name>IsSmartDeviceControl</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Readonly'/>
						<Option type='Not Show'/>
						<Option type="Don't serialize"/>
					</Options>
				</Prop>
				<Prop>
					<Id>AttID</Id>
					<Name>Attribute</Name>
					<Description>Attribute</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.AttributeVariableReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) != 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>PROP_SDT_ITEM_OBJECT</Id>
					<Name>SdtItemObject</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Common.Properties.IPropertyBag, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(AttID)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>AttID</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(ColAttId)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>ColAttId</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(FieldSpecifier)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>FieldSpecifier</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.SdtItemObjectDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagOnlyDefault'></Value>
					</Metadata>
					<Options>
						<Option type='Readonly'/>
						<Option type='Not Show'/>
						<Option type="Don't serialize"/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>AttNumDim</Id>
					<Name>Dimensions</Name>
					<Description>Dimensions</Description>
					<Type>Combo</Type>
					<Values>
						<Value id='0' desc='Scalar'/>
						<Value id='1' desc='Vector'/>
						<Value id='2' desc='Matrix'/>
					</Values>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(Type)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Type</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(IDEnumDefinedValues)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>IDEnumDefinedValues</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>(context(OBJ_TYPE) != id_OTYPE_ATT) and ((context(OBJ_DATATYPE) != DT_BLOB) and ((context(OBJ_DATATYPE) != DT_OBJECT) and (context(IsEnumerated) != -1)))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>OBJ_TYPE</PropName>
											<Value>id_OTYPE_ATT</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>OBJ_DATATYPE</PropName>
													<Value>DT_BLOB</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>OBJ_DATATYPE</PropName>
															<Value>DT_OBJECT</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>IsEnumerated</PropName>
															<Value>-1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>context(AttCollection) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttCollection</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>context(VarDimsProtected) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>VarDimsProtected</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>context(AttEditReadonly) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttEditReadonly</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>value(IsStandardVariable) == true</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>IsStandardVariable</PropName>
									<Value>true</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Invalid'>
							<Value>1</Value>
							<Cond>context(AttCollection) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttCollection</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Invalid'>
							<Value>2</Value>
							<Cond>context(AttCollection) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttCollection</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'/>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DimensionsDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagDeklarit'></Value>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
					<Options>
						<Option type="Don't serialize"/>
					</Options>
				</Prop>
				<Prop>
					<Id>RowIndex</Id>
					<Name>RowIndex</Name>
					<Description>RowIndex</Description>
					<Type>Custom</Type>
					<Default>1</Default>
					<CustomType>Artech.Genexus.Common.CustomTypes.IndexExpression, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Required'>
							<Cond>value(AttNumDim) != 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>AttNumDim</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>value(AttNumDim) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>AttNumDim</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ColIndex</Id>
					<Name>ColIndex</Name>
					<Description>ColIndex</Description>
					<Type>Custom</Type>
					<Default>1</Default>
					<CustomType>Artech.Genexus.Common.CustomTypes.IndexExpression, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Required'>
							<Cond>value(AttNumDim) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>AttNumDim</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>value(AttNumDim) != 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>AttNumDim</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>BaseAttType</Id>
					<Name>BaseAttType</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BaseAttTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>PROP_EXT_BASE_ATT_COLLECTION</Id>
					<Name>PROP_EXT_BASE_ATT_COLLECTION</Name>
					<Type>Boolean</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BaseAttCollectionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FieldSpecifier</Id>
					<Name>FieldSpecifier</Name>
					<Description>Field Specifier</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.SDTItemType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(AttID)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>AttID</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>(value(BaseAttType) == 254) or ((value(BaseAttType) == 252) or ((value(BaseAttType) == 251) or ((value(BaseAttType) == 256) or (value(PROP_EXT_BASE_ATT_COLLECTION) == true))))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>BaseAttType</PropName>
											<Value>254</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>BaseAttType</PropName>
													<Value>252</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>BaseAttType</PropName>
															<Value>251</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>BaseAttType</PropName>
																	<Value>256</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>PROP_EXT_BASE_ATT_COLLECTION</PropName>
																	<Value>true</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagOnlyDefault'>IfNotApply</Value>
					</Metadata>
					<Options>
						<Option type='Required'/>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>RowCount</Id>
					<Name>RowCount</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinROW_COUNTDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ColCount</Id>
					<Name>ColCount</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='FlagSpecificable'></Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinCOL_COUNTDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Tooltip</Id>
					<Name>Tooltiptext</Name>
					<Description>Text used as Tooltip</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(FormType) != Text</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>FormType</PropName>
									<Value>Text</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>AttText</Id>
					<Name>Text</Name>
					<Description>Text</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>((value(ControlType) == 6) or ((value(ControlType) == 7) or ((value(ControlType) == 0) or ((value(ControlType) == 4) or ((value(ControlType) == 8) or (value(ControlType) == 12)))))) and (context(UserMode) == 0)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>6</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>0</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>8</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>12</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Group>
					<Id>ControlInfoGroup</Id>
					<Name>Control Info</Name>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Not Show'>
							<Cond>(context(UserMode) != 1) or (value(FormType) == Text)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop>
							<Id>ControlType</Id>
							<Name>ControlType</Name>
							<Type>Combo Int</Type>
							<Default>2</Default>
							<Values>
								<Value id='0' desc='Combo Box'/>
								<Value id='1' desc='Radio Button'/>
								<Value id='2' desc='Edit'/>
								<Value id='3' desc='Check Box'/>
								<Value id='4' desc='Dynamic Combo Box'/>
								<Value id='6' desc='List Box'/>
								<Value id='7' desc='Dynamic List Box'/>
								<Value id='20' desc='Image'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(IsEnumerated)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IsEnumerated</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(IDEnumDefinedValues)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IDEnumDefinedValues</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>2</Value>
									<Cond>context(IsEnumerated) == -1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>IsEnumerated</PropName>
											<Value>-1</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>2</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='CustomAttribute'>Artech.Genexus.Common.Resolvers.Attributes.ControlTypeSettingsAttribute(SupportUserControl=false), Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinControlTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlTypeValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='TypeConverter'>Artech.Genexus.Common.Converters.ControlTypeTypeConverter, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='UITypeEditor'>Artech.Packages.Genexus.UI.TypeEditors.ControlTypeUITypeEditor, Artech.Packages.GenexusUI, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControl</Id>
							<Name>IsUserControl</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControlWithFixedValues</Id>
							<Name>IsUserControlWithFixedValue</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='FlagSerializeToMetadata'>false</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlWithFixedValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControlWithDynamicValues</Id>
							<Name>IsUserControlWithDynamicValue</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='FlagSerializeToMetadata'>false</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlWithDynamicValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControlWithCustomValues</Id>
							<Name>IsUserControlWithCustomValues</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='FlagSerializeToMetadata'>false</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlWithCustomValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataSourceFrom</Id>
							<Name>Data Source From</Name>
							<Type>Combo</Type>
							<Default>Values</Default>
							<Values>
								<Value id='Values' desc='Values'/>
								<Value id='Attributes' desc='Attributes'/>
								<Value id='DataProvider' desc='Data Provider'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(IsUserControlWithFixedValues) == true) or ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControlWithFixedValues</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>Attributes</Value>
									<Cond>(value(IsUserControlWithDynamicValues) == false) and ((value(ControlType) != 4) and (value(ControlType) != 7))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithDynamicValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>4</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>DataProvider</Value>
									<Cond>(value(IsUserControlWithDynamicValues) == false) and ((value(ControlType) != 4) and (value(ControlType) != 7))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithDynamicValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>4</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>Values</Value>
									<Cond>(value(IsUserControlWithFixedValues) == false) or ((value(ControlType) == 4) or (value(ControlType) == 7))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithFixedValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>4</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Attributes</Value>
									<Cond>(value(ControlType) == 4) or (value(ControlType) == 7)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>4</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>7</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='TypeConverter'>Artech.Genexus.Common.Converters.DataSourceFromTypeConverter, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.DataSourceFromValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DataSourceFromDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataProvider</Id>
							<Name>Data Provider</Name>
							<Type>Custom</Type>
							<CustomType>Artech.Architecture.Common.Objects.KBObjectReference, Artech.Architecture.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(DataSourceFrom) == DataProvider) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>DataSourceFrom</PropName>
													<Value>DataProvider</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='CustomAttribute'>Artech.Architecture.Common.Objects.KBObjectReferenceSettingsAttribute(AllowedType=2a9e9aba-d2de-4801-ae7f-5e3819222daf),Artech.Architecture.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataProviderParameters</Id>
							<Name>Parameters</Name>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.ObjectParametersType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(DataSourceFrom) == DataProvider) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>DataSourceFrom</PropName>
													<Value>DataProvider</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlValues</Id>
							<Name>Values</Name>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.CT_GXTXVAL_type, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(ControlType) == 0) or ((value(ControlType) == 6) or (value(ControlType) == 1))) and ((context(UserMode) == 1) and (value(AttType) != 7))) or (value(IsUserControl) == true)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>0</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>6</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>1</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>NotEqual</Operator>
																	<PropName>AttType</PropName>
																	<Value>7</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControl</PropName>
													<Value>true</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(IsUserControlWithFixedValues) == false) and (value(IsUserControl) == true)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithFixedValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControl</PropName>
													<Value>true</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(IsUserControlWithFixedValues) == true) and (value(DataSourceFrom) != Values)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithFixedValues</PropName>
													<Value>true</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>DataSourceFrom</PropName>
													<Value>Values</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Readonly'>
									<Cond>context(IsEnumerated) == -1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>IsEnumerated</PropName>
											<Value>-1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlValuesValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagOnlyDefault'>IfReadonly</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>InputType</Id>
							<Name>InputType</Name>
							<Description>Enter and show data as values or as descriptions</Description>
							<Type>Combo Int</Type>
							<Default>0</Default>
							<Values>
								<Value id='0' desc='Values'/>
								<Value id='1' desc='Descriptions'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((context(idATTISFORMULA) != -1) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>idATTISFORMULA</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.InputTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>EditAutocomplete</Id>
							<Name>Suggest</Name>
							<Description>Offer suggestions while editing</Description>
							<Type>Combo Int</Type>
							<Default>0</Default>
							<Values>
								<Value id='0' desc='No'/>
								<Value id='1' desc='OnRequest'/>
								<Value id='2' desc='Incremental'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(InputType)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>InputType</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(ControlItemDescription)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>ControlItemDescription</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((context(idATTISFORMULA) != -1) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>idATTISFORMULA</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.SuggestDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.SuggestValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customApplyResolver'>Artech.Genexus.Common.Resolvers.SuggestApplyResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Dyn Default'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlItemValues</Id>
							<Name>ItemValues</Name>
							<Description>Load Values from this attribute</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.AttributeVariableReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(DataSourceFrom) == Attributes) and ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) or ((value(ControlType) == 2) and ((value(EditAutocomplete) != 0) or (value(InputType) != 0)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>DataSourceFrom</PropName>
																	<Value>Attributes</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>IsUserControlWithDynamicValues</PropName>
																			<Value>true</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>4</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>7</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>2</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>EditAutocomplete</PropName>
																			<Value>0</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>InputType</PropName>
																			<Value>0</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ItemValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagHideVariables'>true</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DPItemValuesFieldSpecifier</Id>
							<Name>ItemValues</Name>
							<Description>Load Values from dataprovider using this field specifier</Description>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(DataSourceFrom) == DataProvider) and ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>DataSourceFrom</PropName>
															<Value>DataProvider</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemValuesValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DPItemDescriptionFieldSpecifier</Id>
							<Name>ItemDescriptions</Name>
							<Description>Load Descriptions from dataprovider using this field specifier</Description>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(DataSourceFrom) == DataProvider) and ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>DataSourceFrom</PropName>
															<Value>DataProvider</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemDescriptionsDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemDescriptionsValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlItemDescription</Id>
							<Name>ItemDescriptions</Name>
							<Description>Load Descriptions from this attribute</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.AttributeVariableReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(DataSourceFrom) == Attributes) and ((value(ControlType) == 4) or ((value(ControlType) == 7) or (value(IsUserControlWithDynamicValues) == true)))) or ((value(ControlType) == 2) and (value(InputType) != 0))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>DataSourceFrom</PropName>
																	<Value>Attributes</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>7</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>IsUserControlWithDynamicValues</PropName>
																					<Value>true</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>2</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>NotEqual</Operator>
																	<PropName>InputType</PropName>
																	<Value>0</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagHideVariables'>true</Value>
								<Value name='FlagCanBeNone'>true</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>FilterOperator</Id>
							<Name>FilterOperator</Name>
							<Description>How the suggestions relate to the edit contents</Description>
							<Type>Combo Int</Type>
							<Default>0</Default>
							<Values>
								<Value id='0' desc='Begins with'/>
								<Value id='1' desc='Contains'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(EditAutocomplete) != 0) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>EditAutocomplete</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Dyn Default'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>MaxItems</Id>
							<Name>SuggestMaxItems</Name>
							<Description>Maximum number of items in the suggestion list</Description>
							<Type>Integer</Type>
							<Default>5</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(EditAutocomplete) != 0) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>EditAutocomplete</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlSortDescription</Id>
							<Name>SortDescriptions</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((((value(IsUserControlWithFixedValues) == true) or (value(IsUserControlWithDynamicValues) == true)) and ((value(DataSourceFrom) == Values) or ((value(DataSourceFrom) == Attributes) or (value(DataSourceFrom) == DataProvider)))) or ((value(ControlType) == 4) or ((value(ControlType) == 7) or ((value(ControlType) == 2) and (value(EditAutocomplete) != 0))))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>IsUserControlWithFixedValues</PropName>
																			<Value>true</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>IsUserControlWithDynamicValues</PropName>
																			<Value>true</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>DataSourceFrom</PropName>
																			<Value>Values</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>Attributes</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>DataProvider</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>4</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>2</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>and</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>EditAutocomplete</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>-1</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>CaseSensitive</Id>
							<Name>CaseSensitive</Name>
							<Description>Whether to consider case when filtering suggestions</Description>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(EditAutocomplete) != 0) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>EditAutocomplete</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlDirection</Id>
							<Name>RadioDirection</Name>
							<Type>Combo Int</Type>
							<Default>1</Default>
							<Values>
								<Value id='0' desc='Horizontal'/>
								<Value id='1' desc='Vertical'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 1) and ((context(UserMode) == 1) and ((value(IsUserControl) == false) and (false)))</Cond>
									<Condition>
										<Expression>
											<Type>Constant</Type>
											<Value>false</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>1</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlTitle</Id>
							<Name>ControlTitle</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(ControlType) == 3) or ((value(ControlType) == 1) and (true))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>3</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>HTMLATT</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(IsUserControl) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>IsUserControl</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlCheckValue</Id>
							<Name>CheckedValue</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(IDEnumDefinedValues)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IDEnumDefinedValues</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 3) and ((value(IsUserControl) == false) and (true))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLSFLCOL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>HTMLATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>or</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>ATT</ObjectName>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</FirstPart>
																					<Operator>and</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>3</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFC</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>FORMATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>and</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>Comparison</Type>
																									<Operator>Equal</Operator>
																									<PropName>ControlType</PropName>
																									<Value>3</Value>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>UserMode</PropName>
																			<Value>1</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Required'>
									<Cond>(value(ControlType) == 3) and (context(IsEnumerated) != -1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>IsEnumerated</PropName>
													<Value>-1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.CheckedValueDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.CheckedUncheckedValueValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlUnCheckValue</Id>
							<Name>UncheckedValue</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(IDEnumDefinedValues)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IDEnumDefinedValues</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 3) and ((value(IsUserControl) == false) and (true))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLSFLCOL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>HTMLATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>or</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>ATT</ObjectName>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</FirstPart>
																					<Operator>and</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>3</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFC</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>FORMATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>and</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>Comparison</Type>
																									<Operator>Equal</Operator>
																									<PropName>ControlType</PropName>
																									<Value>3</Value>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>UserMode</PropName>
																			<Value>1</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Required'>
									<Cond>(value(ControlType) == 3) and (context(IsEnumerated) != -1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>IsEnumerated</PropName>
													<Value>-1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.UncheckedValueDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.CheckedUncheckedValueValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlWhere</Id>
							<Name>Conditions</Name>
							<Description>Filter conditions</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.ConditionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((((value(ControlType) == 4) or ((value(ControlType) == 7) or (value(IsUserControlWithDynamicValues) == true))) and (value(DataSourceFrom) == Attributes)) or ((value(ControlType) == 2) and ((value(EditAutocomplete) != 0) or (value(InputType) != 0))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>HTMLSFL</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLSFLFS</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>FORMSFL</ObjectName>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>NotEqual</Operator>
																	<PropName source='context'>GxObjClass</PropName>
																	<Value>0</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>4</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>7</Value>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>IsUserControlWithDynamicValues</PropName>
																							<Value>true</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>DataSourceFrom</PropName>
																			<Value>Attributes</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>2</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>EditAutocomplete</PropName>
																					<Value>0</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>InputType</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(IsUserControlWithDynamicValues) == false) and (value(IsUserControl) == true)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithDynamicValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControl</PropName>
													<Value>true</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagIndexable'>true</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlWhereDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlRestrictedBy</Id>
							<Name>InstantiatedAttributes</Name>
							<Description>Additional restrictions by instantiated attributes list</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.ParseAttributesList, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(DataSourceFrom) == Attributes) and ((value(ControlType) == 4) or (value(ControlType) == 7))) or ((value(ControlType) == 2) and ((value(EditAutocomplete) != 0) or (value(InputType) != 0)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>DataSourceFrom</PropName>
																	<Value>Attributes</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>2</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>EditAutocomplete</PropName>
																			<Value>0</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>InputType</PropName>
																			<Value>0</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlRestrictedByDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>count</Id>
							<Name>Count</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>(value(ControlType) == 2) or ((value(ControlType) == 3) or ((value(ControlType) == 1) or (value(ControlType) == 20)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>3</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>20</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(IsUserControl) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>IsUserControl</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Readonly'>
									<Cond>value(IsStandardVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>IsStandardVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop hidden='1'>
							<Id>AddEmptyItem</Id>
							<Name>EmptyItem</Name>
							<Description>Adds an item for 'none/all' selection</Description>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(IsUserControlWithDynamicValues) == true) and ((value(DataSourceFrom) == Values) or ((value(DataSourceFrom) == Attributes) or (value(DataSourceFrom) == DataProvider)))) or ((value(ControlType) == 4) or ((value(ControlType) == 7) or ((value(ControlType) == 0) or ((value(ControlType) == 6) or (value(ControlType) == 1)))))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>DataSourceFrom</PropName>
																			<Value>Values</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>Attributes</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>DataProvider</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>4</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>0</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>6</Value>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>1</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>EmptyItemText</Id>
							<Name>EmptyItemText</Name>
							<Description>Text associated with the empty item</Description>
							<Type>Text</Type>
							<Default>GX_EmptyItemText</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or ((value(ControlType) == 7) or ((value(ControlType) == 0) or ((value(ControlType) == 6) or (value(ControlType) == 1)))))) and ((value(AddEmptyItem) == true) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControlWithDynamicValues</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>4</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>0</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>6</Value>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>1</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>AddEmptyItem</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagTranslatableString'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>AutoCorrection</Id>
							<Name>Auto correction</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(IsUserControl) == false) and ((value(AttType) == 5) or ((value(AttType) == 13) or (value(AttType) == 8))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>AttType</PropName>
																	<Value>5</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>AttType</PropName>
																			<Value>13</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>AttType</PropName>
																			<Value>8</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.AutoCorrectionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>AutoCapitalization</Id>
							<Name>Auto capitalization</Name>
							<Type>Combo</Type>
							<Default>FirstWord</Default>
							<Values>
								<Value id='None' desc='None'/>
								<Value id='FirstWord' desc='First word'/>
								<Value id='EachWord' desc='First letter of each word'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(IsUserControl) == false) and ((value(AttType) == 5) or ((value(AttType) == 13) or (value(AttType) == 8))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>AttType</PropName>
																	<Value>5</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>AttType</PropName>
																			<Value>13</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>AttType</PropName>
																			<Value>8</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customApplyResolver'>Artech.Genexus.Common.Resolvers.Apply.AutoCapitalizationApplyResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.AutoCapitalizationDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Not Show'>
							<Cond>value(FormType) == Text</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>FormType</PropName>
									<Value>Text</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop>
							<Id>EmptyAsNull</Id>
							<Name>EmptyAsNull</Name>
							<Type>Combo</Type>
							<Values>
								<Value id='No' desc='No Nulls'/>
								<Value id='Yes' desc='Empty as Null'/>
								<Value id='Blank' desc='Blank as Null'/>
								<Value id='Compatibility' desc='Compatible'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(Type)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>Type</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(HAS_DOMAIN)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>HAS_DOMAIN</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(OBJ_TYPE) != id_OTYPE_VAR) and ((context(OBJ_TYPE) != id_OTYPE_SDT) and (context(idATTISFORMULA) != -1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>OBJ_TYPE</PropName>
													<Value>id_OTYPE_VAR</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>OBJ_TYPE</PropName>
															<Value>id_OTYPE_SDT</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>idATTISFORMULA</PropName>
															<Value>-1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.EmptyAsNullDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.EmptyAsNullValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDeklarit'></Value>
								<Value name='FlagDisplayName'>Nulls in Forms</Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ReadOnly</Id>
							<Name>ReadOnly</Name>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Dependencies>
								<Depend type='Invalid'>
									<Value>0</Value>
									<Cond>((value(isAttribute) == true) and (context(GxObjClass) == 13)) or ((value(visible) == false) or ((value(AttType) == 7) and (not ((value(isAttribute) == true) and (context(GxObjClass) == 0)))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>isAttribute</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>GxObjClass</PropName>
															<Value>13</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>visible</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>AttType</PropName>
																	<Value>7</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>isAttribute</PropName>
																					<Value>true</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>and</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName source='context'>GxObjClass</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>-1</Value>
									<Cond>((value(isAttribute) == true) and (context(GxObjClass) == 13)) or ((value(visible) == false) or ((value(AttType) == 7) and (not ((value(isAttribute) == true) and (context(GxObjClass) == 0)))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>isAttribute</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>GxObjClass</PropName>
															<Value>13</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>visible</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>AttType</PropName>
																	<Value>7</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>isAttribute</PropName>
																					<Value>true</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>and</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName source='context'>GxObjClass</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Readonly'>
									<Cond>((value(isAttribute) == true) and (context(GxObjClass) == 13)) or ((value(visible) == false) or ((value(AttType) == 7) and (not ((value(isAttribute) == true) and (context(GxObjClass) == 0)))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>isAttribute</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>GxObjClass</PropName>
															<Value>13</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>visible</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>AttType</PropName>
																	<Value>7</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>isAttribute</PropName>
																					<Value>true</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>and</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName source='context'>GxObjClass</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((value(isVariable) == true) and (context(GxObjClass) == 0)) or (((value(AttType) == 7) and (not ((value(isAttribute) == true) and (context(GxObjClass) == 0)))) or (value(ControlType) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>isVariable</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>GxObjClass</PropName>
															<Value>0</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>AttType</PropName>
																	<Value>7</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>isAttribute</PropName>
																					<Value>true</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>and</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName source='context'>GxObjClass</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>IsPassword</Id>
							<Name>IsPassword</Name>
							<Description>IsPassword</Description>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(ControlType) == 2</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>2</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Options>
								<Option type='No Default'/>
							</Options>
						</Prop>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((value(idIsSDControl) == true) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>idIsSDControl</PropName>
																			<Value>true</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>HorizontalAlignment</Id>
							<Name>HorizontalAlignment</Name>
							<Description>HorizontalAlignment</Description>
							<Type>Combo</Type>
							<Default>left</Default>
							<Values>
								<Value id='left' desc='Left'/>
								<Value id='center' desc='Center'/>
								<Value id='right' desc='Right'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 45</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>45</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 3</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>3</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 7</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>7</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Readonly'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(not ((value(ControlType) == 2) or ((value(ControlType) == 0) or (value(ControlType) == 1)))) or (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>HTMLSFLATT</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMATT</ObjectName>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>2</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>0</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>1</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>not</Operator>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttAlignDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagOnlyDefault'>IfReadonly</Value>
								<Value name='FlagOldId'>Alignment</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Window</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(AttType) == 7) or (value(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BackColorText</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Custom</Type>
							<Default>Black</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(AttType) == 7) or (value(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ForeColorText</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Custom</Type>
							<Default>Lime</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>Fill</Id>
							<Name>Fill</Name>
							<Description>Fill</Description>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(AttType) == 7) or (value(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMWND</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>FORMBTN</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMATT</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFL</ObjectName>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>not</Operator>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(ControlType) == 3</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>3</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>BorderStyle</Id>
							<Name>BorderStyle</Name>
							<Description>BorderStyle</Description>
							<Type>Combo Int</Type>
							<Default>2</Default>
							<Values>
								<Value id='0' desc='None'/>
								<Value id='1' desc='Single'/>
								<Value id='2' desc='3D'/>
							</Values>
							<Dependencies>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BorderWidth</Id>
							<Name>BorderWidth</Name>
							<Description>BorderWidth</Description>
							<Type>Integer</Type>
							<Default>1</Default>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>not (value(BorderStyle) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>BorderStyle</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>border({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>Font</Id>
							<Name>Font</Name>
							<Description>Font</Description>
							<Type>Custom</Type>
							<Default>Microsoft Sans Serif,8,style=Bold</Default>
							<CustomType>System.Drawing.Font, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</CustomType>
							<Dependencies>
								<Depend type='Default'>
									<Value>Courier New,10</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Courier New,9</Value>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and (value(FormType) != Text)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinAttFontDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>{0}</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormAttWidthDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>(value(AutoResize) == true) and ((value(ControlType) != 6) and (value(ControlType) != 7))</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>AutoResize</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMSFL</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>FORMATT</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>ControlType</PropName>
																					<Value>6</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>and</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>ControlType</PropName>
																					<Value>7</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Readonly'>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormAttHeightDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
						<Prop>
							<Id>AutoResize</Id>
							<Name>AutoResize</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFC</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFL</ObjectName>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>0</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>PROP_RNT_CAPTION</Id>
					<Name>Caption</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(context(UserMode) == 0) and (value(ControlType) == 3)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>FORMATT</ObjectName>
														</Expression>
													</FirstPart>
													<Operator>not</Operator>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMBTN' inheritance='FORMOBJ '>
		<Group>
			<Name>Button</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>51</Value>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>Caption</Id>
					<Name>InternalCaption</Name>
					<Description>InternalCaption</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(CaptionExpression)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>CaptionExpression</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(Event)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Event</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BtnCaptionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='CustomAttribute'>Artech.Common.Properties.PropertyBindingAttribute(Property=CaptionExpression), Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagPropertyBind'>CaptionExpression</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>title([{0}])</Value>
						<Value name='FlagSpecificable'></Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>CaptionExpression</Id>
					<Name>Caption</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.TextExpressionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Default'>
							<Value>Button</Value>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.CaptionExpressionAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.CaptionExpressionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Event</Id>
					<Name>OnClickEvent</Name>
					<Description>{ Cancel | Help | Refresh | 'User Event' | ... }</Description>
					<Type>Custom</Type>
					<Default>Enter</Default>
					<CustomType>Artech.Genexus.Common.CustomTypes.GxEventReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Options>
						<Option type='Required'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Type</Id>
					<Name>Type</Name>
					<Description>Type</Description>
					<Type>Combo Int</Type>
					<Default>0</Default>
					<Values>
						<Value id='0' desc='Text'/>
						<Value id='1' desc='Image'/>
					</Values>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>Image</Id>
					<Name>Bitmap</Name>
					<Description>Image file location</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.LocalizableImageReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Readonly'>
							<Cond>value(Type) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>Type</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>Default</Id>
					<Name>Default</Name>
					<Description>Default button in form</Description>
					<Type>Boolean</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>Tooltip</Id>
					<Name>Tooltiptext</Name>
					<Description>Text used as Tooltip</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(FormType) != Text</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>FormType</PropName>
									<Value>Text</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>ImageWidth</Id>
					<Name>ImageWidth</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(Image)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Image</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ImageHeight</Id>
					<Name>ImageHeight</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(Image)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Image</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop hidden='1'>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Control</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>Fill</Id>
							<Name>Fill</Name>
							<Description>Fill</Description>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMWND</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>FORMBTN</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMATT</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFL</ObjectName>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>not</Operator>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BorderWidth</Id>
							<Name>BorderWidth</Name>
							<Description>BorderWidth</Description>
							<Type>Integer</Type>
							<Default>1</Default>
							<Dependencies>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>not (context(BorderStyle) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>BorderStyle</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>border({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>Font</Id>
							<Name>Font</Name>
							<Description>Font</Description>
							<Type>Custom</Type>
							<Default>Microsoft Sans Serif,8,style=Bold</Default>
							<CustomType>System.Drawing.Font, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</CustomType>
							<Dependencies>
								<Depend type='Default'>
									<Value>Courier New,10</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Microsoft Sans Serif,8</Value>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and (value(FormType) != Text)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinBtnFontDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>{0}</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>AutoResize</Id>
							<Name>AutoResize</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFC</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFL</ObjectName>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>0</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormButtonWidthDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormButtonHeightDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMGRP' inheritance='FORMOBJ '>
		<Group>
			<Name>Group</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>200</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>100</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
			</Children>
		</Group>
	</Object>
	<Object id='FORMIMG' inheritance='FORMOBJ '>
		<Group>
			<Name>Image</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>72</Value>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Image</Id>
					<Name>Bitmap</Name>
					<Description>Image file location</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.LocalizableImageReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
				</Prop>
				<Prop hidden='1'>
					<Id>ImageWidth</Id>
					<Name>ImageWidth</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(Image)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Image</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ImageHeight</Id>
					<Name>ImageHeight</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(Image)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Image</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>LockAspectRatio</Id>
					<Name>LockAspectRatio</Name>
					<Description>Forces the image to maintain its aspect ratio on resize</Description>
					<Type>Boolean</Type>
					<Default>true</Default>
					<Dependencies>
						<Depend type='Not Show'>
							<Cond>value(AutoResize) == true</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>AutoResize</PropName>
									<Value>true</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>Stretch</Id>
					<Name>Stretch</Name>
					<Description>Allow the image to change its original size</Description>
					<Type>Boolean</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group hidden='1'>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>AutoResize</Id>
							<Name>AutoResize</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFC</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFL</ObjectName>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>0</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormImageWidthDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormImageHeightDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMLINE' inheritance='FORMOBJ '>
		<Group>
			<Name>Line</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Orientation</Id>
							<Name>Orientation</Name>
							<Description>Orientation</Description>
							<Type>Combo Int</Type>
							<Default>0</Default>
							<Values>
								<Value id='0' desc='Horizontal'/>
								<Value id='1' desc='Vertical'/>
							</Values>
							<Metadata>
								<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.OrientationAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>LineWidth</Id>
							<Name>LineWidth</Name>
							<Description>LineWidth</Description>
							<Type>Integer</Type>
							<Default>1</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.LineWidthAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>border({0})</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ForeColorText</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Custom</Type>
							<Default>Lime</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(Orientation) == 1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>Orientation</PropName>
													<Value>1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>15</Value>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>120</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(Orientation) == 0</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>Orientation</PropName>
													<Value>0</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>1</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMOBJ'>
	</Object>
	<Object id='FORMRECT' inheritance='FORMOBJ '>
		<Group>
			<Name>Rect</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>BorderStyle</Id>
							<Name>BorderStyle</Name>
							<Description>BorderStyle</Description>
							<Type>Combo Int</Type>
							<Default>2</Default>
							<Values>
								<Value id='0' desc='None'/>
								<Value id='1' desc='Single'/>
								<Value id='2' desc='3D'/>
							</Values>
							<Dependencies>
								<Depend type='Default'>
									<Value>1</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BorderWidth</Id>
							<Name>BorderWidth</Name>
							<Description>BorderWidth</Description>
							<Type>Integer</Type>
							<Default>1</Default>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>not (value(BorderStyle) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>BorderStyle</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>border({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Transparent</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ForeColorText</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Custom</Type>
							<Default>Lime</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>15</Value>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>100</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>5</Value>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>70</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>PROP_RNT_CAPTION</Id>
					<Name>Caption</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMSFC' inheritance='FORMOBJ '>
		<Group>
			<Name>Column</Name>
			<Type>Main</Type>
			<Metadata>
				<Value name='ParentResolver'>Artech.Genexus.Common.Resolvers.ControlParentResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
			</Metadata>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>71</Value>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>KBObjectKey</Id>
					<Name>KBObjectKey</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Readonly'>
							<Cond>(value(AttNumDim) == 0) and ((value(BaseAttType) != 254) and ((value(BaseAttType) != 252) and (value(BaseAttType) != 251)))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>AttNumDim</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>BaseAttType</PropName>
													<Value>254</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>BaseAttType</PropName>
															<Value>252</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>BaseAttType</PropName>
															<Value>251</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.OBJ_CTRL_NAME_DefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>isVariable</Id>
					<Name>isVariable</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsVariableDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>isAttribute</Id>
					<Name>isAttribute</Name>
					<Type>Boolean</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsAttributeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Group hidden='1'>
					<Id>AttEditFlags</Id>
					<Name>EditFlags</Name>
					<Description>EditFlags</Description>
					<Type>Group</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
					<Children>
						<Prop hidden='1'>
							<Id>AttEditNameProtected</Id>
							<Name>AttEditNameProtected</Name>
							<Description>AttEditNameProtected</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsStandardVariable</Id>
							<Name>IsStandardVariable</Name>
							<Description>Is standard variable</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>idIsAutoDefinedVariable</Id>
							<Name>IsAutoDefinedVariable</Name>
							<Description>Is autodefined variable</Description>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>AttEditDisableArrays</Id>
							<Name>AttEditDisableArrays</Name>
							<Description>AttEditDisableArrays</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>AttEditNewVariable</Id>
							<Name>AttEditNewVariable</Name>
							<Description>AttEditNewVariable</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>AttEditDontAssign</Id>
							<Name>AttEditDontAssign</Name>
							<Description>AttEditDontAssign</Description>
							<Type>Boolean</Type>
							<Options>
								<Option type='Readonly'/>
								<Option type='Not Show'/>
								<Option type="Don't serialize"/>
							</Options>
						</Prop>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>idIsSDControl</Id>
					<Name>IsSmartDeviceControl</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Readonly'/>
						<Option type='Not Show'/>
						<Option type="Don't serialize"/>
					</Options>
				</Prop>
				<Prop>
					<Id>AttID</Id>
					<Name>Attribute</Name>
					<Description>Attribute</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.AttributeVariableReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) != 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>PROP_SDT_ITEM_OBJECT</Id>
					<Name>SdtItemObject</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Common.Properties.IPropertyBag, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(AttID)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>AttID</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(ColAttId)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>ColAttId</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(FieldSpecifier)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>FieldSpecifier</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.SdtItemObjectDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagOnlyDefault'></Value>
					</Metadata>
					<Options>
						<Option type='Readonly'/>
						<Option type='Not Show'/>
						<Option type="Don't serialize"/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>AttNumDim</Id>
					<Name>Dimensions</Name>
					<Description>Dimensions</Description>
					<Type>Combo</Type>
					<Values>
						<Value id='0' desc='Scalar'/>
						<Value id='1' desc='Vector'/>
						<Value id='2' desc='Matrix'/>
					</Values>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(Type)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Type</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(IDEnumDefinedValues)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>IDEnumDefinedValues</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>(context(OBJ_TYPE) != id_OTYPE_ATT) and ((context(OBJ_DATATYPE) != DT_BLOB) and ((context(OBJ_DATATYPE) != DT_OBJECT) and (context(IsEnumerated) != -1)))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>OBJ_TYPE</PropName>
											<Value>id_OTYPE_ATT</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>OBJ_DATATYPE</PropName>
													<Value>DT_BLOB</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>OBJ_DATATYPE</PropName>
															<Value>DT_OBJECT</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>IsEnumerated</PropName>
															<Value>-1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>context(AttCollection) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttCollection</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>context(VarDimsProtected) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>VarDimsProtected</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>context(AttEditReadonly) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttEditReadonly</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Readonly'>
							<Cond>value(IsStandardVariable) == true</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>IsStandardVariable</PropName>
									<Value>true</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Invalid'>
							<Value>1</Value>
							<Cond>context(AttCollection) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttCollection</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Invalid'>
							<Value>2</Value>
							<Cond>context(AttCollection) == -1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>AttCollection</PropName>
									<Value>-1</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'/>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DimensionsDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagDeklarit'></Value>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
					<Options>
						<Option type="Don't serialize"/>
					</Options>
				</Prop>
				<Prop>
					<Id>RowIndex</Id>
					<Name>RowIndex</Name>
					<Description>RowIndex</Description>
					<Type>Custom</Type>
					<Default>1</Default>
					<CustomType>Artech.Genexus.Common.CustomTypes.IndexExpression, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Required'>
							<Cond>value(AttNumDim) != 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>AttNumDim</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>value(AttNumDim) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>AttNumDim</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ColIndex</Id>
					<Name>ColIndex</Name>
					<Description>ColIndex</Description>
					<Type>Custom</Type>
					<Default>1</Default>
					<CustomType>Artech.Genexus.Common.CustomTypes.IndexExpression, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Required'>
							<Cond>value(AttNumDim) == 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName>AttNumDim</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>value(AttNumDim) != 2</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>AttNumDim</PropName>
									<Value>2</Value>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>RowCount</Id>
					<Name>RowCount</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinROW_COUNTDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ColCount</Id>
					<Name>ColCount</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='FlagSpecificable'></Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinCOL_COUNTDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Tooltip</Id>
					<Name>Tooltiptext</Name>
					<Description>Text used as Tooltip</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>value(FormType) != Text</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName>FormType</PropName>
									<Value>Text</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop hidden='1'>
					<Id>AttText</Id>
					<Name>Text</Name>
					<Description>Text</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>((value(ControlType) == 6) or ((value(ControlType) == 7) or ((value(ControlType) == 0) or ((value(ControlType) == 4) or ((value(ControlType) == 8) or (value(ControlType) == 12)))))) and (context(UserMode) == 0)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>6</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>0</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>8</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>12</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>ColTitle</Id>
					<Name>InternalTitle</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(AttID)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>AttID</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(ColTitleExpression)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>ColTitleExpression</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ColTitleDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='CustomAttribute'>Artech.Common.Properties.PropertyBindingAttribute(Property=ColTitleExpression), Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagPropertyBind'>ColTitleExpression</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>title([{0}])</Value>
						<Value name='FlagSpecificable'></Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>ColTitleExpression</Id>
					<Name>Title</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.TextExpressionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Metadata>
						<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.ColTitleExpressionAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ColTitleExpressionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>BaseAttType</Id>
					<Name>BaseAttType</Name>
					<Type>Integer</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BaseAttTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>PROP_EXT_BASE_ATT_COLLECTION</Id>
					<Name>PROP_EXT_BASE_ATT_COLLECTION</Name>
					<Type>Boolean</Type>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BaseAttCollectionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
						<Option type='Dyn Default'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FieldSpecifier</Id>
					<Name>FieldSpecifier</Name>
					<Description>Field Specifier</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.SDTItemType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(AttID)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>AttID</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>(value(BaseAttType) == 254) or ((value(BaseAttType) == 252) or ((value(BaseAttType) == 251) or ((value(BaseAttType) == 256) or (value(PROP_EXT_BASE_ATT_COLLECTION) == true))))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>BaseAttType</PropName>
											<Value>254</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>BaseAttType</PropName>
													<Value>252</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>BaseAttType</PropName>
															<Value>251</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>BaseAttType</PropName>
																	<Value>256</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>PROP_EXT_BASE_ATT_COLLECTION</PropName>
																	<Value>true</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagOnlyDefault'>IfNotApply</Value>
					</Metadata>
					<Options>
						<Option type='Required'/>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Group>
					<Id>ControlInfoGroup</Id>
					<Name>Control Info</Name>
					<Type>Group</Type>
					<Dependencies>
						<Depend type='Not Show'>
							<Cond>(context(UserMode) != 1) or (value(FormType) == Text)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</FirstPart>
									<Operator>or</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Children>
						<Prop>
							<Id>ControlType</Id>
							<Name>ControlType</Name>
							<Type>Combo Int</Type>
							<Default>2</Default>
							<Values>
								<Value id='0' desc='Combo Box'/>
								<Value id='1' desc='Radio Button'/>
								<Value id='2' desc='Edit'/>
								<Value id='3' desc='Check Box'/>
								<Value id='4' desc='Dynamic Combo Box'/>
								<Value id='6' desc='List Box'/>
								<Value id='7' desc='Dynamic List Box'/>
								<Value id='20' desc='Image'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(IsEnumerated)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IsEnumerated</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(IDEnumDefinedValues)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IDEnumDefinedValues</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>2</Value>
									<Cond>context(IsEnumerated) == -1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>IsEnumerated</PropName>
											<Value>-1</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>7</Value>
								</Depend>
								<Depend type='Invalid'>
									<Value>6</Value>
								</Depend>
								<Depend type='Invalid'>
									<Value>1</Value>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>2</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='CustomAttribute'>Artech.Genexus.Common.Resolvers.Attributes.ControlTypeSettingsAttribute(SupportUserControl=false), Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinColumnControlTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlTypeValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='TypeConverter'>Artech.Genexus.Common.Converters.ControlTypeTypeConverter, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='UITypeEditor'>Artech.Packages.Genexus.UI.TypeEditors.ControlTypeUITypeEditor, Artech.Packages.GenexusUI, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControl</Id>
							<Name>IsUserControl</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControlWithFixedValues</Id>
							<Name>IsUserControlWithFixedValue</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='FlagSerializeToMetadata'>false</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlWithFixedValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControlWithDynamicValues</Id>
							<Name>IsUserControlWithDynamicValue</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='FlagSerializeToMetadata'>false</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlWithDynamicValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>IsUserControlWithCustomValues</Id>
							<Name>IsUserControlWithCustomValues</Name>
							<Type>Boolean</Type>
							<Metadata>
								<Value name='FlagSerializeToMetadata'>false</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.IsUserControlWithCustomValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataSourceFrom</Id>
							<Name>Data Source From</Name>
							<Type>Combo</Type>
							<Default>Values</Default>
							<Values>
								<Value id='Values' desc='Values'/>
								<Value id='Attributes' desc='Attributes'/>
								<Value id='DataProvider' desc='Data Provider'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(IsUserControlWithFixedValues) == true) or ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControlWithFixedValues</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>Attributes</Value>
									<Cond>(value(IsUserControlWithDynamicValues) == false) and ((value(ControlType) != 4) and (value(ControlType) != 7))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithDynamicValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>4</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>DataProvider</Value>
									<Cond>(value(IsUserControlWithDynamicValues) == false) and ((value(ControlType) != 4) and (value(ControlType) != 7))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithDynamicValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>4</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>Values</Value>
									<Cond>(value(IsUserControlWithFixedValues) == false) or ((value(ControlType) == 4) or (value(ControlType) == 7))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithFixedValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>4</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>7</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Attributes</Value>
									<Cond>(value(ControlType) == 4) or (value(ControlType) == 7)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>4</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>7</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='TypeConverter'>Artech.Genexus.Common.Converters.DataSourceFromTypeConverter, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.DataSourceFromValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DataSourceFromDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataProvider</Id>
							<Name>Data Provider</Name>
							<Type>Custom</Type>
							<CustomType>Artech.Architecture.Common.Objects.KBObjectReference, Artech.Architecture.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(DataSourceFrom) == DataProvider) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>DataSourceFrom</PropName>
													<Value>DataProvider</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='CustomAttribute'>Artech.Architecture.Common.Objects.KBObjectReferenceSettingsAttribute(AllowedType=2a9e9aba-d2de-4801-ae7f-5e3819222daf),Artech.Architecture.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataProviderParameters</Id>
							<Name>Parameters</Name>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.ObjectParametersType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(DataSourceFrom) == DataProvider) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>DataSourceFrom</PropName>
													<Value>DataProvider</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlValues</Id>
							<Name>Values</Name>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.CT_GXTXVAL_type, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(ControlType) == 0) or ((value(ControlType) == 6) or (value(ControlType) == 1))) and ((context(UserMode) == 1) and (context(AttType) != 7))) or (value(IsUserControl) == true)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>0</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>6</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>1</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>NotEqual</Operator>
																	<PropName source='context'>AttType</PropName>
																	<Value>7</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControl</PropName>
													<Value>true</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(IsUserControlWithFixedValues) == false) and (value(IsUserControl) == true)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithFixedValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControl</PropName>
													<Value>true</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(IsUserControlWithFixedValues) == true) and (value(DataSourceFrom) != Values)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithFixedValues</PropName>
													<Value>true</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>DataSourceFrom</PropName>
													<Value>Values</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Readonly'>
									<Cond>context(IsEnumerated) == -1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>IsEnumerated</PropName>
											<Value>-1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlValuesValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagOnlyDefault'>IfReadonly</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>InputType</Id>
							<Name>InputType</Name>
							<Description>Enter and show data as values or as descriptions</Description>
							<Type>Combo Int</Type>
							<Default>0</Default>
							<Values>
								<Value id='0' desc='Values'/>
								<Value id='1' desc='Descriptions'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((context(idATTISFORMULA) != -1) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>idATTISFORMULA</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.InputTypeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>EditAutocomplete</Id>
							<Name>Suggest</Name>
							<Description>Offer suggestions while editing</Description>
							<Type>Combo Int</Type>
							<Default>0</Default>
							<Values>
								<Value id='0' desc='No'/>
								<Value id='1' desc='OnRequest'/>
								<Value id='2' desc='Incremental'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(InputType)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>InputType</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(ControlItemDescription)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>ControlItemDescription</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((context(idATTISFORMULA) != -1) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>idATTISFORMULA</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.SuggestDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.SuggestValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customApplyResolver'>Artech.Genexus.Common.Resolvers.SuggestApplyResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Dyn Default'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlItemValues</Id>
							<Name>ItemValues</Name>
							<Description>Load Values from this attribute</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.AttributeVariableReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(DataSourceFrom) == Attributes) and ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) or ((value(ControlType) == 2) and ((value(EditAutocomplete) != 0) or (value(InputType) != 0)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>DataSourceFrom</PropName>
																	<Value>Attributes</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>IsUserControlWithDynamicValues</PropName>
																			<Value>true</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>4</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>7</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>2</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>EditAutocomplete</PropName>
																			<Value>0</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>InputType</PropName>
																			<Value>0</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ItemValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagHideVariables'>true</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DPItemValuesFieldSpecifier</Id>
							<Name>ItemValues</Name>
							<Description>Load Values from dataprovider using this field specifier</Description>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(DataSourceFrom) == DataProvider) and ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>DataSourceFrom</PropName>
															<Value>DataProvider</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemValuesDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemValuesValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DPItemDescriptionFieldSpecifier</Id>
							<Name>ItemDescriptions</Name>
							<Description>Load Descriptions from dataprovider using this field specifier</Description>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(DataSourceFrom) == DataProvider) and ((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or (value(ControlType) == 7)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>DataSourceFrom</PropName>
															<Value>DataProvider</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemDescriptionsDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.DataProviderItemDescriptionsValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlItemDescription</Id>
							<Name>ItemDescriptions</Name>
							<Description>Load Descriptions from this attribute</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.AttributeVariableReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(DataSourceFrom) == Attributes) and ((value(ControlType) == 4) or ((value(ControlType) == 7) or (value(IsUserControlWithDynamicValues) == true)))) or ((value(ControlType) == 2) and (value(InputType) != 0))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>DataSourceFrom</PropName>
																	<Value>Attributes</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>7</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>IsUserControlWithDynamicValues</PropName>
																					<Value>true</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>2</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>NotEqual</Operator>
																	<PropName>InputType</PropName>
																	<Value>0</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagHideVariables'>true</Value>
								<Value name='FlagCanBeNone'>true</Value>
							</Metadata>
							<Options>
								<Option type='Required'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>FilterOperator</Id>
							<Name>FilterOperator</Name>
							<Description>How the suggestions relate to the edit contents</Description>
							<Type>Combo Int</Type>
							<Default>0</Default>
							<Values>
								<Value id='0' desc='Begins with'/>
								<Value id='1' desc='Contains'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(EditAutocomplete) != 0) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>EditAutocomplete</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
							<Options>
								<Option type='Dyn Default'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>MaxItems</Id>
							<Name>SuggestMaxItems</Name>
							<Description>Maximum number of items in the suggestion list</Description>
							<Type>Integer</Type>
							<Default>5</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(EditAutocomplete) != 0) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>EditAutocomplete</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlSortDescription</Id>
							<Name>SortDescriptions</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((((value(IsUserControlWithFixedValues) == true) or (value(IsUserControlWithDynamicValues) == true)) and ((value(DataSourceFrom) == Values) or ((value(DataSourceFrom) == Attributes) or (value(DataSourceFrom) == DataProvider)))) or ((value(ControlType) == 4) or ((value(ControlType) == 7) or ((value(ControlType) == 2) and (value(EditAutocomplete) != 0))))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>IsUserControlWithFixedValues</PropName>
																			<Value>true</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>IsUserControlWithDynamicValues</PropName>
																			<Value>true</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>DataSourceFrom</PropName>
																			<Value>Values</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>Attributes</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>DataProvider</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>4</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>2</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>and</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>EditAutocomplete</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>-1</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>CaseSensitive</Id>
							<Name>CaseSensitive</Name>
							<Description>Whether to consider case when filtering suggestions</Description>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(EditAutocomplete) != 0) and ((context(UserMode) == 1) and (value(IsUserControl) == false)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>EditAutocomplete</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>UserMode</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlDirection</Id>
							<Name>RadioDirection</Name>
							<Type>Combo Int</Type>
							<Default>1</Default>
							<Values>
								<Value id='0' desc='Horizontal'/>
								<Value id='1' desc='Vertical'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 1) and ((context(UserMode) == 1) and ((value(IsUserControl) == false) and (true)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControl</PropName>
																	<Value>false</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMATT</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>1</Value>
									<Cond>value(isVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>isVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlTitle</Id>
							<Name>ControlTitle</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(ControlType) == 3) or ((value(ControlType) == 1) and (true))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>3</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>HTMLATT</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(IsUserControl) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>IsUserControl</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlCheckValue</Id>
							<Name>CheckedValue</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(IDEnumDefinedValues)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IDEnumDefinedValues</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 3) and ((value(IsUserControl) == false) and (true))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLSFLCOL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>HTMLATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>or</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>ATT</ObjectName>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</FirstPart>
																					<Operator>and</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>3</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFC</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>FORMATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>and</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>Comparison</Type>
																									<Operator>Equal</Operator>
																									<PropName>ControlType</PropName>
																									<Value>3</Value>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>UserMode</PropName>
																			<Value>1</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Required'>
									<Cond>(value(ControlType) == 3) and (context(IsEnumerated) != -1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>IsEnumerated</PropName>
													<Value>-1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.CheckedValueDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.CheckedUncheckedValueValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlUnCheckValue</Id>
							<Name>UncheckedValue</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(IDEnumDefinedValues)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>IDEnumDefinedValues</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 3) and ((value(IsUserControl) == false) and (true))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLSFLCOL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>HTMLATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>or</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>ATT</ObjectName>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</FirstPart>
																					<Operator>and</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>3</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>not</Operator>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFC</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>BooleanExpression</Type>
																							<FirstPart>
																								<Expression>
																									<Type>IsObject</Type>
																									<ObjectName>FORMATT</ObjectName>
																								</Expression>
																							</FirstPart>
																							<Operator>and</Operator>
																							<SecondPart>
																								<Expression>
																									<Type>Comparison</Type>
																									<Operator>Equal</Operator>
																									<PropName>ControlType</PropName>
																									<Value>3</Value>
																								</Expression>
																							</SecondPart>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>UserMode</PropName>
																			<Value>1</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Required'>
									<Cond>(value(ControlType) == 3) and (context(IsEnumerated) != -1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>3</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>IsEnumerated</PropName>
													<Value>-1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.UncheckedValueDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.CheckedUncheckedValueValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlWhere</Id>
							<Name>Conditions</Name>
							<Description>Filter conditions</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.ConditionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((((value(ControlType) == 4) or ((value(ControlType) == 7) or (value(IsUserControlWithDynamicValues) == true))) and (value(DataSourceFrom) == Attributes)) or ((value(ControlType) == 2) and ((value(EditAutocomplete) != 0) or (value(InputType) != 0))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>HTMLSFL</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLSFLFS</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>FORMSFL</ObjectName>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>NotEqual</Operator>
																	<PropName source='context'>GxObjClass</PropName>
																	<Value>0</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>4</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>7</Value>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>IsUserControlWithDynamicValues</PropName>
																							<Value>true</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>DataSourceFrom</PropName>
																			<Value>Attributes</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>2</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>EditAutocomplete</PropName>
																					<Value>0</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>NotEqual</Operator>
																					<PropName>InputType</PropName>
																					<Value>0</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(value(IsUserControlWithDynamicValues) == false) and (value(IsUserControl) == true)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControlWithDynamicValues</PropName>
													<Value>false</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>IsUserControl</PropName>
													<Value>true</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagIndexable'>true</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlWhereDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ControlRestrictedBy</Id>
							<Name>InstantiatedAttributes</Name>
							<Description>Additional restrictions by instantiated attributes list</Description>
							<Type>Custom</Type>
							<CustomType>Artech.Genexus.Common.CustomTypes.ParseAttributesList, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(DataSourceFrom) == Attributes) and ((value(ControlType) == 4) or (value(ControlType) == 7))) or ((value(ControlType) == 2) and ((value(EditAutocomplete) != 0) or (value(InputType) != 0)))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>DataSourceFrom</PropName>
																	<Value>Attributes</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>2</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>EditAutocomplete</PropName>
																			<Value>0</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName>InputType</PropName>
																			<Value>0</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlRestrictedByDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>count</Id>
							<Name>Count</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>(value(ControlType) == 2) or ((value(ControlType) == 3) or ((value(ControlType) == 1) or (value(ControlType) == 20)))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>ControlType</PropName>
															<Value>3</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>1</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>20</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(IsUserControl) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>IsUserControl</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Readonly'>
									<Cond>value(IsStandardVariable) == true</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>IsStandardVariable</PropName>
											<Value>true</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop hidden='1'>
							<Id>AddEmptyItem</Id>
							<Name>EmptyItem</Name>
							<Description>Adds an item for 'none/all' selection</Description>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(((value(IsUserControlWithDynamicValues) == true) and ((value(DataSourceFrom) == Values) or ((value(DataSourceFrom) == Attributes) or (value(DataSourceFrom) == DataProvider)))) or ((value(ControlType) == 4) or ((value(ControlType) == 7) or ((value(ControlType) == 0) or ((value(ControlType) == 6) or (value(ControlType) == 1)))))) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>IsUserControlWithDynamicValues</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>DataSourceFrom</PropName>
																			<Value>Values</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>Attributes</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>DataSourceFrom</PropName>
																					<Value>DataProvider</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>4</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>0</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>6</Value>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>1</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>EmptyItemText</Id>
							<Name>EmptyItemText</Name>
							<Description>Text associated with the empty item</Description>
							<Type>Text</Type>
							<Default>GX_EmptyItemText</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>((value(IsUserControlWithDynamicValues) == true) or ((value(ControlType) == 4) or ((value(ControlType) == 7) or ((value(ControlType) == 0) or ((value(ControlType) == 6) or (value(ControlType) == 1)))))) and ((value(AddEmptyItem) == true) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControlWithDynamicValues</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>ControlType</PropName>
																	<Value>4</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName>ControlType</PropName>
																			<Value>7</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName>ControlType</PropName>
																					<Value>0</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>6</Value>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>Comparison</Type>
																							<Operator>Equal</Operator>
																							<PropName>ControlType</PropName>
																							<Value>1</Value>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>AddEmptyItem</PropName>
															<Value>true</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagTranslatableString'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>AutoCorrection</Id>
							<Name>Auto correction</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(IsUserControl) == false) and ((context(AttType) == 5) or ((context(AttType) == 13) or (context(AttType) == 8))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>AttType</PropName>
																	<Value>5</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>AttType</PropName>
																			<Value>13</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>AttType</PropName>
																			<Value>8</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.AutoCorrectionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>AutoCapitalization</Id>
							<Name>Auto capitalization</Name>
							<Type>Combo</Type>
							<Default>FirstWord</Default>
							<Values>
								<Value id='None' desc='None'/>
								<Value id='FirstWord' desc='First word'/>
								<Value id='EachWord' desc='First letter of each word'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(value(ControlType) == 2) and ((value(IsUserControl) == false) and ((context(AttType) == 5) or ((context(AttType) == 13) or (context(AttType) == 8))))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>ControlType</PropName>
													<Value>2</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>IsUserControl</PropName>
															<Value>false</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>AttType</PropName>
																	<Value>5</Value>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>AttType</PropName>
																			<Value>13</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>AttType</PropName>
																			<Value>8</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customApplyResolver'>Artech.Genexus.Common.Resolvers.Apply.AutoCapitalizationApplyResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.Default.AutoCapitalizationDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>IsPassword</Id>
							<Name>IsPassword</Name>
							<Description>IsPassword</Description>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(ControlType) == 2</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>2</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Options>
								<Option type='No Default'/>
							</Options>
						</Prop>
						<Prop>
							<Id>EmptyAsNull</Id>
							<Name>EmptyAsNull</Name>
							<Type>Combo</Type>
							<Values>
								<Value id='No' desc='No Nulls'/>
								<Value id='Yes' desc='Empty as Null'/>
								<Value id='Blank' desc='Blank as Null'/>
								<Value id='Compatibility' desc='Compatible'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(Type)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>Type</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='On Change'>
									<Cond>onChange(HAS_DOMAIN)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>HAS_DOMAIN</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(OBJ_TYPE) != id_OTYPE_VAR) and ((context(OBJ_TYPE) != id_OTYPE_SDT) and (context(idATTISFORMULA) != -1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>OBJ_TYPE</PropName>
													<Value>id_OTYPE_VAR</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>OBJ_TYPE</PropName>
															<Value>id_OTYPE_SDT</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>idATTISFORMULA</PropName>
															<Value>-1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.EmptyAsNullDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.EmptyAsNullValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDeklarit'></Value>
								<Value name='FlagDisplayName'>Nulls in Forms</Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>AutoResize</Id>
							<Name>AutoResize</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (true))</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormColumnAutoResizeDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagNoCacheDefault'>Never</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ColTitleColor</Id>
							<Name>TitleForeColor</Name>
							<Type>Color</Type>
							<Default>WindowText</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.TitleWinColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>tfore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ColTitleBackColor</Id>
							<Name>TitleBackColor</Name>
							<Type>Color</Type>
							<Default>Control</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.TitleBackWinColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>tback({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Window</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.LinesBackWinColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.LinesWinColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>TitleBackColorText</Id>
							<Name>TitleBackColor</Name>
							<Type>Custom</Type>
							<Default>Black</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.TitleBackTextColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>tback({0})</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagNoCacheDefault'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>TitleForeColorText</Id>
							<Name>TitleColor</Name>
							<Type>Custom</Type>
							<Default>Lime</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.TitleTextColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>tfore({0})</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagNoCacheDefault'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>LinesBackColorText</Id>
							<Name>LinesBackColor</Name>
							<Type>Custom</Type>
							<Default>Black</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.LinesBackTextColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagNoCacheDefault'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>LinesForeColorText</Id>
							<Name>LinesColor</Name>
							<Type>Custom</Type>
							<Default>Lime</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.LinesTextColorColumnDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagNoCacheDefault'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop hidden='1'>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Dependencies>
										<Depend type='Not Show'/>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop hidden='1'>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Dependencies>
										<Depend type='Not Show'/>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ColumnWidthDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoCacheDefault'>Never</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop hidden='1'>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Not Show'/>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
			</Children>
		</Group>
	</Object>
	<Object id='FORMSFL' inheritance='FORMOBJ '>
		<Group>
			<Name>Grid</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>GxObjClass</Id>
					<Name>GxObjClass</Name>
					<Type>Integer</Type>
					<Default>-1</Default>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ObjClsDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>70</Value>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Columns</Id>
					<Name>Columns</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.ColumnsReference, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) != 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>NotEqual</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
					<Options>
						<Option type='No Default'/>
					</Options>
				</Prop>
				<Prop>
					<Id>LineSelector</Id>
					<Name>LineSelector</Name>
					<Type>Boolean</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>Redraw</Id>
					<Name>Redraw</Name>
					<Type>Boolean</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>ControlBaseTable</Id>
					<Name>BaseTrn</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.BaseTableType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(context(UserMode) == 1) and (not (value(GxObjClass) == 0))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>GxObjClass</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>PROP_SFL_GRID_ORDER</Id>
					<Name>Order</Name>
					<Description>Grid order</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.OrderType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(context(UserMode) == 1) and (not (value(GxObjClass) == 0))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>GxObjClass</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
					<Options>
						<Option type='Dyn Default'/>
						<Option type='Dyn Valid'/>
					</Options>
				</Prop>
				<Prop>
					<Id>ControlWhere</Id>
					<Name>Conditions</Name>
					<Description>Filter conditions</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.ConditionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(AttID)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>AttID</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Apply'>
							<Cond>(context(UserMode) == 1) and ((value(GxObjClass) != 0) or ((((context(ControlType) == 4) or ((context(ControlType) == 7) or (context(IsUserControlWithDynamicValues) == -1))) and (context(DataSourceFrom) == Attributes)) or ((context(ControlType) == 2) and ((context(EditAutocomplete) != 0) or (context(InputType) != 0)))))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>HTMLSFLFS</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMSFL</ObjectName>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>GxObjClass</PropName>
															<Value>0</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>ControlType</PropName>
																			<Value>4</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName source='context'>ControlType</PropName>
																					<Value>7</Value>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>Comparison</Type>
																					<Operator>Equal</Operator>
																					<PropName source='context'>IsUserControlWithDynamicValues</PropName>
																					<Value>-1</Value>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>DataSourceFrom</PropName>
																	<Value>Attributes</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName source='context'>ControlType</PropName>
																	<Value>2</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName source='context'>EditAutocomplete</PropName>
																			<Value>0</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>NotEqual</Operator>
																			<PropName source='context'>InputType</PropName>
																			<Value>0</Value>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='Not Show'>
							<Cond>(context(IsUserControlWithDynamicValues) == 0) and (context(IsUserControl) == -1)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>IsUserControlWithDynamicValues</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>IsUserControl</PropName>
											<Value>-1</Value>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagIndexable'>true</Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.ControlWhereDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>ControlUnique</Id>
					<Name>Unique</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.UniqueType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(context(UserMode) == 1) and (not (value(GxObjClass) == 0))</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>GxObjClass</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>SdtColMember</Id>
					<Name>Collection</Name>
					<Description>Collection</Description>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.SDTLevelType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>(context(UserMode) != 0) and (value(FormType) != Text)</Cond>
							<Condition>
								<Expression>
									<Type>BooleanExpression</Type>
									<FirstPart>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</FirstPart>
									<Operator>and</Operator>
									<SecondPart>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>FORMSFL</ObjectName>
														</Expression>
													</FirstPart>
													<Operator>not</Operator>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</SecondPart>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Id>GridLoading</Id>
					<Name>Loading</Name>
					<Description>Loading</Description>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>LOADALL</Id>
							<Name>Load Records</Name>
							<Description>Load Records</Description>
							<Type>Combo</Type>
							<Default>NO</Default>
							<Values>
								<Value id='NO' desc='Load on request'/>
								<Value id='YES' desc='Load all records'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) != 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>LOAD</Id>
							<Name>Load at Startup</Name>
							<Description>Load at Startup</Description>
							<Type>Combo</Type>
							<Default>YES</Default>
							<Values>
								<Value id='YES' desc='Yes'/>
								<Value id='NO' desc='No'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) != 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>REFRESH</Id>
							<Name>Automatic Refresh</Name>
							<Description>Automatic Refresh</Description>
							<Type>Combo</Type>
							<Default>COND</Default>
							<Values>
								<Value id='COND' desc='Only when variables in conditions change'/>
								<Value id='ALL' desc='When any variable changes'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) != 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>WHENREFRESH</Id>
							<Name>When to Refresh</Name>
							<Description>When to Refresh</Description>
							<Type>Combo</Type>
							<Default>FOCUS</Default>
							<Values>
								<Value id='FOCUS' desc='When a grid receives focus'/>
								<Value id='CHANGE' desc='While variables are being modified'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) != 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>SUBFILE_ORDER</Id>
							<Name>Click to sort in grid</Name>
							<Description>Click to sort in grid</Description>
							<Type>Combo</Type>
							<Default>UMPV</Default>
							<Values>
								<Value id='UMPV' desc='Use Environment property value'/>
								<Value id='Y' desc='Enabled'/>
								<Value id='N' desc='Disabled'/>
							</Values>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) != 0) and (value(FormType) != Text)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Group>
							<Id>RTIMEOUT</Id>
							<Name>Refresh Timeout</Name>
							<Description>Refresh Timeout</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>REFRESH_TOUT</Id>
									<Name>Lapse</Name>
									<Description>Lapse</Description>
									<Type>Text</Type>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>context(UserMode) != 0</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
								</Prop>
								<Prop>
									<Id>REFRESH_TOUT_TRIG</Id>
									<Name>Triggers</Name>
									<Description>Triggers</Description>
									<Type>Combo</Type>
									<Default>ALL</Default>
									<Values>
										<Value id='ALL' desc='Always'/>
										<Value id='FOCUS' desc='Only when the object has the focus'/>
									</Values>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>context(UserMode) != 0</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>AutoResize</Id>
							<Name>AutoResize</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (true))</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>HorizontalScroll</Id>
							<Name>HorizontalScroll</Name>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) != 0) and (value(FormType) != Text)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Control</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>Fill</Id>
							<Name>Fill</Name>
							<Description>Fill</Description>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMWND</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>FORMBTN</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMATT</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFL</ObjectName>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>not</Operator>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>0</Value>
									<Cond>context(ControlType) == 3</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>3</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>BorderStyle</Id>
							<Name>BorderStyle</Name>
							<Description>BorderStyle</Description>
							<Type>Combo Int</Type>
							<Default>2</Default>
							<Values>
								<Value id='0' desc='None'/>
								<Value id='1' desc='Single'/>
								<Value id='2' desc='3D'/>
							</Values>
							<Dependencies>
								<Depend type='Default'>
									<Value>1</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(UserMode) == 1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BorderWidth</Id>
							<Name>BorderWidth</Name>
							<Description>BorderWidth</Description>
							<Type>Integer</Type>
							<Default>1</Default>
							<Dependencies>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>not (value(BorderStyle) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>BorderStyle</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>border({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Group>
							<Name>Title</Name>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>TitleFont</Id>
									<Name>TitleFont</Name>
									<Type>Custom</Type>
									<Default>Microsoft Sans Serif,8,style=Bold</Default>
									<CustomType>System.Drawing.Font, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</CustomType>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>(context(UserMode) == 1) and (value(FormType) != Text)</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>titlefont({0})</Value>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
								</Prop>
								<Prop>
									<Id>TitleBackColor</Id>
									<Name>TitleBackColor</Name>
									<Type>Color</Type>
									<Default>Control</Default>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>(context(UserMode) != 0) and (value(FormType) != Text)</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>tback({0})</Value>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
								</Prop>
								<Prop>
									<Id>TitleColor</Id>
									<Name>TitleColor</Name>
									<Type>Color</Type>
									<Default>WindowText</Default>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>(context(UserMode) != 0) and (value(FormType) != Text)</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>0</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>tfore({0})</Value>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
								</Prop>
								<Prop hidden='1'>
									<Id>TitleBackColorText</Id>
									<Name>TitleBackColor</Name>
									<Type>Custom</Type>
									<Default>Black</Default>
									<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>tback({0})</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagNoCacheDefault'></Value>
									</Metadata>
								</Prop>
								<Prop hidden='1'>
									<Id>TitleForeColorText</Id>
									<Name>TitleColor</Name>
									<Type>Custom</Type>
									<Default>Lime</Default>
									<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>tfore({0})</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagNoCacheDefault'></Value>
									</Metadata>
								</Prop>
							</Children>
						</Group>
						<Group>
							<Name>Lines</Name>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>LinesFont</Id>
									<Name>LinesFont</Name>
									<Type>Custom</Type>
									<Default>Courier New,9</Default>
									<CustomType>System.Drawing.Font, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</CustomType>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>(context(UserMode) == 1) and (value(FormType) != Text)</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>font({0})</Value>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
								</Prop>
								<Prop>
									<Id>LinesBackColor</Id>
									<Name>LinesBackColor</Name>
									<Type>Color</Type>
									<Default>Window</Default>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>(context(UserMode) == 1) and (value(FormType) != Text)</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
								</Prop>
								<Prop>
									<Id>LinesColor</Id>
									<Name>LinesColor</Name>
									<Type>Color</Type>
									<Default>WindowText</Default>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>(context(UserMode) == 1) and (value(FormType) != Text)</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='NoSys Color'/>
									</Options>
								</Prop>
								<Prop hidden='1'>
									<Id>LinesBackColorText</Id>
									<Name>LinesBackColor</Name>
									<Type>Custom</Type>
									<Default>Black</Default>
									<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagNoCacheDefault'></Value>
									</Metadata>
								</Prop>
								<Prop hidden='1'>
									<Id>LinesForeColorText</Id>
									<Name>LinesColor</Name>
									<Type>Custom</Type>
									<Default>Lime</Default>
									<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
									<Dependencies>
										<Depend type='Apply'>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagNoCacheDefault'></Value>
									</Metadata>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>(value(FormType) == Text) or ((value(AutoResize) == true) and (value(HorizontalScroll) == false))</Cond>
											<Condition>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>AutoResize</PropName>
																	<Value>true</Value>
																</Expression>
															</FirstPart>
															<Operator>and</Operator>
															<SecondPart>
																<Expression>
																	<Type>Comparison</Type>
																	<Operator>Equal</Operator>
																	<PropName>HorizontalScroll</PropName>
																	<Value>false</Value>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormGridWidthDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoCacheDefault'></Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Default'>
											<Value>4</Value>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>80</Value>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMTABCTRL' inheritance='FORMOBJ '>
		<Group>
			<Name>Tab</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>HideTabs</Id>
					<Name>HideTabs</Name>
					<Description>HideTabs</Description>
					<Type>Boolean</Type>
					<Default>false</Default>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>IdTabActivePage</Id>
					<Name>ActivePage</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
				</Prop>
				<Prop>
					<Id>IdPageCount</Id>
					<Name>PageCount</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagWebLayoutProperty'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>200</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>100</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMTABPAGE' inheritance='FORMOBJ '>
		<Group>
			<Name>Tab</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>Caption</Id>
					<Name>InternalCaption</Name>
					<Description>InternalCaption</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(CaptionExpression)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>CaptionExpression</PropName>
								</Expression>
							</Condition>
						</Depend>
						<Depend type='On Change'>
							<Cond>onChange(Event)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>Event</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BtnCaptionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='CustomAttribute'>Artech.Common.Properties.PropertyBindingAttribute(Property=CaptionExpression), Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagPropertyBind'>CaptionExpression</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>title([{0}])</Value>
						<Value name='FlagSpecificable'></Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>CaptionExpression</Id>
					<Name>Caption</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.TextExpressionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Default'>
							<Value>Tab</Value>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.CaptionExpressionAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Control</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMTBL' inheritance='FORMOBJ '>
		<Group>
			<Name>Group</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>200</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>100</Value>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
			</Children>
		</Group>
	</Object>
	<Object id='FORMTEXT' inheritance='FORMOBJ '>
		<Group>
			<Name>Text</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>50</Value>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>Text</Id>
					<Name>InternalCaption</Name>
					<Description>InternalCaption</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(CaptionExpression)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>CaptionExpression</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BtnCaptionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='CustomAttribute'>Artech.Common.Properties.PropertyBindingAttribute(Property=CaptionExpression), Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagPropertyBind'>CaptionExpression</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>CaptionExpression</Id>
					<Name>Caption</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.TextExpressionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Default'>
							<Value>Text</Value>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.CaptionExpressionAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Wrap</Id>
							<Name>Wrap</Name>
							<Description>Wrap</Description>
							<Type>Boolean</Type>
							<Default>false</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>Backstyle</Id>
							<Name>Backstyle</Name>
							<Description>Backstyle</Description>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) and (value(FormType) != Text)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Options>
								<Option type='No Default'/>
							</Options>
						</Prop>
						<Prop>
							<Id>HorizontalAlignment</Id>
							<Name>HorizontalAlignment</Name>
							<Description>HorizontalAlignment</Description>
							<Type>Combo</Type>
							<Default>left</Default>
							<Values>
								<Value id='left' desc='Left'/>
								<Value id='center' desc='Center'/>
								<Value id='right' desc='Right'/>
							</Values>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 45</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>45</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 3</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>3</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagOldId'>Alignment</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Transparent</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BackColorText</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Custom</Type>
							<Default>Black</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ForeColorText</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Custom</Type>
							<Default>Lime</Default>
							<CustomType>Artech.Genexus.Common.CustomTypes.TextColor, Artech.Genexus.Common</CustomType>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>BorderStyle</Id>
							<Name>BorderStyle</Name>
							<Description>BorderStyle</Description>
							<Type>Combo Int</Type>
							<Default>2</Default>
							<Values>
								<Value id='0' desc='None'/>
								<Value id='1' desc='Single'/>
								<Value id='2' desc='3D'/>
							</Values>
							<Dependencies>
								<Depend type='Default'>
									<Value>0</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 1</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>1</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BorderWidth</Id>
							<Name>BorderWidth</Name>
							<Description>BorderWidth</Description>
							<Type>Integer</Type>
							<Default>1</Default>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>not (value(BorderStyle) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>BorderStyle</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>border({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>Font</Id>
							<Name>Font</Name>
							<Description>Font</Description>
							<Type>Custom</Type>
							<Default>Microsoft Sans Serif,8,style=Bold</Default>
							<CustomType>System.Drawing.Font, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</CustomType>
							<Dependencies>
								<Depend type='Default'>
									<Value>Courier New,10</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and (value(FormType) != Text)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WinTextFontDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagSpecificationLit_iNameFormat'>{0}</Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>FontSize</Id>
							<Name>FontSize</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontName</Id>
							<Name>FontName</Name>
							<Type>Text</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontBold</Id>
							<Name>FontBold</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontItalic</Id>
							<Name>FontItalic</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontUnderline</Id>
							<Name>FontUnderline</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>FontStrikethru</Id>
							<Name>FontStrikethru</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(ControlType) == 11</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>ControlType</PropName>
											<Value>11</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>AutoResize</Id>
							<Name>AutoResize</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFC</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>FORMSFL</ObjectName>
																</Expression>
															</SecondPart>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Invalid'>
									<Value>0</Value>
									<Cond>value(FormType) == Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
						<Prop>
							<Id>Autosize</Id>
							<Name>Autosize</Name>
							<Description>Autosize</Description>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) and (value(FormType) != Text)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>NotEqual</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Options>
								<Option type='No Default'/>
							</Options>
						</Prop>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormTextWidthDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Readonly'>
											<Cond>value(AutoResize) == true</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>AutoResize</PropName>
													<Value>true</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.FormTextHeightDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
			</Children>
		</Group>
	</Object>
	<Object id='FORMWND' inheritance='FORMOBJ '>
		<Group>
			<Name>Window</Name>
			<Type>Main</Type>
			<Children>
				<Prop hidden='1'>
					<Id>HelpKeyword</Id>
					<Name>HelpKeyword</Name>
					<Type>Integer</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>49</Value>
						</Depend>
					</Dependencies>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FormType</Id>
					<Name>FormType</Name>
					<Type>Text</Type>
					<Metadata>
						<Value name='ShouldSerialize'>false</Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>Name</Id>
					<Name>Name</Name>
					<Description>Name</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Default'>
							<Value>Form</Value>
						</Depend>
						<Depend type='Readonly'/>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 1</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>1</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customValidResolver'>Artech.Genexus.Common.Resolvers.ControlNameValidResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagSpecificationLit_iNameFormat'>ctlname({0})</Value>
						<Value name='FlagSpecificationFormat'>normalizeControlName</Value>
						<Value name='FlagNoSpecify'></Value>
						<Value name='FlagOnlyDefault'>IfReadonly</Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>Tag</Id>
					<Name>Tag</Name>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='Apply'>
							<Cond>context(UserMode) == 0</Cond>
							<Condition>
								<Expression>
									<Type>Comparison</Type>
									<Operator>Equal</Operator>
									<PropName source='context'>UserMode</PropName>
									<Value>0</Value>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop hidden='1'>
					<Id>Title</Id>
					<Name>Internal Caption</Name>
					<Description>Internal Caption</Description>
					<Type>Text</Type>
					<Dependencies>
						<Depend type='On Change'>
							<Cond>onChange(CaptionExpression)</Cond>
							<Condition>
								<Expression>
									<Type>OnChange</Type>
									<PropName>CaptionExpression</PropName>
								</Expression>
							</Condition>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.BtnCaptionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='CustomAttribute'>Artech.Common.Properties.PropertyBindingAttribute(Property=CaptionExpression), Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagPropertyBind'>CaptionExpression</Value>
						<Value name='FlagTranslatableString'></Value>
					</Metadata>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop>
					<Id>CaptionExpression</Id>
					<Name>Caption</Name>
					<Type>Custom</Type>
					<CustomType>Artech.Genexus.Common.CustomTypes.TextExpressionType, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</CustomType>
					<Dependencies>
						<Depend type='Default'>
							<Value>Form</Value>
						</Depend>
					</Dependencies>
					<Metadata>
						<Value name='AfterSetValueHandler'>Artech.Genexus.Common.Resolvers.Handlers.CaptionExpressionAfterSetValueHandler, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.WndCaptionExpressionDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
						<Value name='FlagNoSpecify'></Value>
					</Metadata>
				</Prop>
				<Prop>
					<Id>WindowState</Id>
					<Name>WindowState</Name>
					<Description>Initial Window State</Description>
					<Type>Combo Int</Type>
					<Values>
						<Value id='0' desc='Normal    (0)'/>
						<Value id='1' desc='Minimized (1)'/>
						<Value id='2' desc='Maximized (2)'/>
					</Values>
				</Prop>
				<Group>
					<Name>Behavior</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>Enabled</Id>
							<Name>Enabled</Name>
							<Type>Boolean</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) == 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>visible</Id>
							<Name>visible</Name>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 0) or (((context(idIsSDControl) == -1) and (true)) and (context(UserMode) == 1))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>0</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>IsObject</Type>
																	<ObjectName>HTMLSFLCOL</ObjectName>
																</Expression>
															</FirstPart>
															<Operator>or</Operator>
															<SecondPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>Comparison</Type>
																			<Operator>Equal</Operator>
																			<PropName source='context'>idIsSDControl</PropName>
																			<Value>-1</Value>
																		</Expression>
																	</FirstPart>
																	<Operator>and</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>HTMLTBLRCELL</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>not</Operator>
																		</Expression>
																	</SecondPart>
																</Expression>
															</SecondPart>
														</Expression>
													</FirstPart>
													<Operator>and</Operator>
													<SecondPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>UserMode</PropName>
															<Value>1</Value>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagWebLayoutProperty'>Override</Value>
								<Value name='CustomAttribute'>Artech.Common.Properties.RuntimePropertiesAttribute, Artech.Common.Properties, PublicKeyToken=6f5bf81c27b6b8aa</Value>
								<Value name='FlagDisplayName'>Visible</Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Appearance</Name>
					<Type>Group</Type>
					<Children>
						<Prop>
							<Id>BackColor</Id>
							<Name>BackColor</Name>
							<Description>BackColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>Control</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>back({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>ForeColor</Id>
							<Name>ForeColor</Name>
							<Description>ForeColor</Description>
							<Type>Color</Type>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Default'>
									<Value>WindowText</Value>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>((context(IsAbstractLayoutControl) == -1) or (false)) and (context(UserMode) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>Equal</Operator>
															<PropName source='context'>IsAbstractLayoutControl</PropName>
															<Value>-1</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>IsObject</Type>
															<ObjectName>HTMLSFLCOL</ObjectName>
														</Expression>
													</SecondPart>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>fore({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
								<Value name='FlagWebLayoutProperty'></Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>Fill</Id>
							<Name>Fill</Name>
							<Description>Fill</Description>
							<Type>Boolean</Type>
							<Default>true</Default>
							<Dependencies>
								<Depend type='On Change'>
									<Cond>onChange(AttID)</Cond>
									<Condition>
										<Expression>
											<Type>OnChange</Type>
											<PropName>AttID</PropName>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>(context(AttType) == 7) or (context(AttType) == 14)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>7</Value>
												</Expression>
											</FirstPart>
											<Operator>or</Operator>
											<SecondPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AttType</PropName>
													<Value>14</Value>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'/>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 93</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>93</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 92</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>92</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 102</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>102</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 103</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>103</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 104</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>104</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Not Show'>
									<Cond>context(AttType) == 105</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>Equal</Operator>
											<PropName source='context'>AttType</PropName>
											<Value>105</Value>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>(context(UserMode) == 1) and ((value(FormType) != Text) or (false))</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>and</Operator>
											<SecondPart>
												<Expression>
													<Type>BooleanExpression</Type>
													<FirstPart>
														<Expression>
															<Type>Comparison</Type>
															<Operator>NotEqual</Operator>
															<PropName>FormType</PropName>
															<Value>Text</Value>
														</Expression>
													</FirstPart>
													<Operator>or</Operator>
													<SecondPart>
														<Expression>
															<Type>BooleanExpression</Type>
															<FirstPart>
																<Expression>
																	<Type>BooleanExpression</Type>
																	<FirstPart>
																		<Expression>
																			<Type>IsObject</Type>
																			<ObjectName>FORMWND</ObjectName>
																		</Expression>
																	</FirstPart>
																	<Operator>or</Operator>
																	<SecondPart>
																		<Expression>
																			<Type>BooleanExpression</Type>
																			<FirstPart>
																				<Expression>
																					<Type>IsObject</Type>
																					<ObjectName>FORMBTN</ObjectName>
																				</Expression>
																			</FirstPart>
																			<Operator>or</Operator>
																			<SecondPart>
																				<Expression>
																					<Type>BooleanExpression</Type>
																					<FirstPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMATT</ObjectName>
																						</Expression>
																					</FirstPart>
																					<Operator>or</Operator>
																					<SecondPart>
																						<Expression>
																							<Type>IsObject</Type>
																							<ObjectName>FORMSFL</ObjectName>
																						</Expression>
																					</SecondPart>
																				</Expression>
																			</SecondPart>
																		</Expression>
																	</SecondPart>
																</Expression>
															</FirstPart>
															<Operator>not</Operator>
														</Expression>
													</SecondPart>
												</Expression>
											</SecondPart>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagNoSpecify'></Value>
								<Value name='customDefaultResolver'>Artech.Genexus.Common.Resolvers.AttControlInheritDefaultResolver, Artech.Genexus.Common, PublicKeyToken=6f5bf81c27b6b8aa</Value>
							</Metadata>
						</Prop>
						<Prop hidden='1'>
							<Id>BorderWidth</Id>
							<Name>BorderWidth</Name>
							<Description>BorderWidth</Description>
							<Type>Integer</Type>
							<Default>1</Default>
							<Dependencies>
								<Depend type='Not Show'>
									<Cond>not (context(BorderStyle) == 1)</Cond>
									<Condition>
										<Expression>
											<Type>BooleanExpression</Type>
											<FirstPart>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>BorderStyle</PropName>
													<Value>1</Value>
												</Expression>
											</FirstPart>
											<Operator>not</Operator>
										</Expression>
									</Condition>
								</Depend>
								<Depend type='Apply'>
									<Cond>value(FormType) != Text</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName>FormType</PropName>
											<Value>Text</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
							<Metadata>
								<Value name='FlagSpecificationLit_iNameFormat'>border({0})</Value>
								<Value name='FlagSpecificable'>IfNotText</Value>
								<Value name='FlagNoSpecify'></Value>
							</Metadata>
						</Prop>
					</Children>
				</Group>
				<Group>
					<Name>Layout</Name>
					<Type>Group</Type>
					<Children>
						<Group>
							<Id>Position</Id>
							<Name>Position</Name>
							<Description>Position</Description>
							<Type>Group</Type>
							<Children>
								<Prop>
									<Id>Left</Id>
									<Name>Left</Name>
									<Description>Left</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Left</Id>
									</OldIds>
									<Default>10</Default>
									<Dependencies>
										<Depend type='Not Show'>
											<Cond>context(UserMode) == 1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Top</Id>
									<Name>Top</Name>
									<Description>Top</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Top</Id>
									</OldIds>
									<Default>10</Default>
									<Dependencies>
										<Depend type='Not Show'>
											<Cond>context(UserMode) == 1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>UserMode</PropName>
													<Value>1</Value>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Width</Id>
									<Name>Width</Name>
									<Description>Width</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Width</Id>
									</OldIds>
									<Default>30</Default>
									<Dependencies>
										<Depend type='Default'>
											<Value>80</Value>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>240</Value>
											<Cond>value(FormType) == Mobile</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Mobile</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>400</Value>
										</Depend>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
								<Prop>
									<Id>Height</Id>
									<Name>Height</Name>
									<Description>Height</Description>
									<Type>Integer</Type>
									<OldIds>
										<Id>Position.Height</Id>
									</OldIds>
									<Default>17</Default>
									<Dependencies>
										<Depend type='Default'>
											<Value>24</Value>
											<Cond>value(FormType) == Text</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Text</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>268</Value>
											<Cond>value(FormType) == Mobile</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName>FormType</PropName>
													<Value>Mobile</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='Default'>
											<Value>400</Value>
										</Depend>
										<Depend type='Readonly'>
											<Cond>context(AutoResize) == -1</Cond>
											<Condition>
												<Expression>
													<Type>Comparison</Type>
													<Operator>Equal</Operator>
													<PropName source='context'>AutoResize</PropName>
													<Value>-1</Value>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(Font)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>Font</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderStyle)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderStyle</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(BorderWidth)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>BorderWidth</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AutoResize)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AutoResize</PropName>
												</Expression>
											</Condition>
										</Depend>
										<Depend type='On Change'>
											<Cond>onChange(AttID)</Cond>
											<Condition>
												<Expression>
													<Type>OnChange</Type>
													<PropName>AttID</PropName>
												</Expression>
											</Condition>
										</Depend>
									</Dependencies>
									<Metadata>
										<Value name='FlagNoSpecify'></Value>
										<Value name='FlagOnlyDefault'>IfReadonly</Value>
									</Metadata>
									<Options>
										<Option type='No Default'/>
									</Options>
								</Prop>
							</Children>
						</Group>
						<Prop>
							<Id>IdOffsetX</Id>
							<Name>ControlsOffsetX</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) != 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
						<Prop>
							<Id>IdOffsetY</Id>
							<Name>ControlsOffsetY</Name>
							<Type>Integer</Type>
							<Dependencies>
								<Depend type='Apply'>
									<Cond>context(UserMode) != 0</Cond>
									<Condition>
										<Expression>
											<Type>Comparison</Type>
											<Operator>NotEqual</Operator>
											<PropName source='context'>UserMode</PropName>
											<Value>0</Value>
										</Expression>
									</Condition>
								</Depend>
							</Dependencies>
						</Prop>
					</Children>
				</Group>
				<Prop hidden='1'>
					<Id>FromDefault</Id>
					<Name>FromDefault</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Prop hidden='1'>
					<Id>FromStyle</Id>
					<Name>FromStyle</Name>
					<Type>Boolean</Type>
					<Default>false</Default>
					<Options>
						<Option type='Not Show'/>
					</Options>
				</Prop>
				<Group hidden='1'>
					<Id>IdDataAreaProperties</Id>
					<Name>IdDataAreaProperties</Name>
					<Type>Group</Type>
					<Children>
						<Prop hidden='1'>
							<Id>DataLeft</Id>
							<Name>DataLeft</Name>
							<Type>Integer</Type>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataRight</Id>
							<Name>DataRight</Name>
							<Type>Integer</Type>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataTop</Id>
							<Name>DataTop</Name>
							<Type>Integer</Type>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
						<Prop hidden='1'>
							<Id>DataBottom</Id>
							<Name>DataBottom</Name>
							<Type>Integer</Type>
							<Options>
								<Option type='Not Show'/>
							</Options>
						</Prop>
					</Children>
				</Group>
			</Children>
		</Group>
	</Object>
</Content>
